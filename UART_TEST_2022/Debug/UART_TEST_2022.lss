
UART_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000030e4  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800178  00800178  00003290  2**0
                  ALLOC
  3 .stab         00002ae4  00000000  00000000  00003290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001272  00000000  00000000  00005d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007186  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ab09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c196  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_1>
       8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_2>
       c:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_3>
      10:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_4>
      14:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_7>
      20:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_8>
      24:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_9>
      28:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_10>
      2c:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <main>
      8a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_INIT>:
#include"UART_Interface.h"


u8 arr[4];
void UART_INIT(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	u8 Temporary_REG=0;
     e38:	19 82       	std	Y+1, r1	; 0x01
	/*to set Boudrate =51 with ferq=8MHZ*/
	UBRRH=0;
     e3a:	e0 e4       	ldi	r30, 0x40	; 64
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
	UBRRL=51;
     e40:	e9 e2       	ldi	r30, 0x29	; 41
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	83 e3       	ldi	r24, 0x33	; 51
     e46:	80 83       	st	Z, r24
	/*USART Control and Status Register B – UCSRB */
	Receiver_Enable;
     e48:	aa e2       	ldi	r26, 0x2A	; 42
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e2       	ldi	r30, 0x2A	; 42
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	8c 93       	st	X, r24
	Transmitter_Enable;
     e56:	aa e2       	ldi	r26, 0x2A	; 42
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e2       	ldi	r30, 0x2A	; 42
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
	/*Character Size*/
	Eight_Bit;
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8b 7f       	andi	r24, 0xFB	; 251
     e70:	8c 93       	st	X, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	82 60       	ori	r24, 0x02	; 2
     e7c:	89 83       	std	Y+1, r24	; 0x01
	/*Register Select*/
	SET_BIT( Temporary_REG , URSEL );
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	89 83       	std	Y+1, r24	; 0x01
	/*USART Mode Select*/
	CLR_BIT( Temporary_REG , UMSEL );
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	89 83       	std	Y+1, r24	; 0x01
	/*Parity Mode*/
	CLR_BIT( Temporary_REG ,  UPM1 );
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	8f 7d       	andi	r24, 0xDF	; 223
     e8e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT( Temporary_REG ,  UPM0 );
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	8f 7e       	andi	r24, 0xEF	; 239
     e94:	89 83       	std	Y+1, r24	; 0x01
	/*Stop Bit Select*/
	CLR_BIT( Temporary_REG ,  USBS );
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	89 83       	std	Y+1, r24	; 0x01
	/*Clock Polarity*/
	CLR_BIT( Temporary_REG , UCPOL );
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8e 7f       	andi	r24, 0xFE	; 254
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/*MOVING DATA*/
	USCRC=Temporary_REG;
     ea2:	e0 e4       	ldi	r30, 0x40	; 64
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 83       	st	Z, r24
	

}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <UART_VoidSendChar>:
void UART_VoidSendChar(u8 u8Data)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	89 83       	std	Y+1, r24	; 0x01
	/*wait until Transmitter be Empty*/
	while(GET_BIT(UCSRA,UDRE)==0);
     ebe:	eb e2       	ldi	r30, 0x2B	; 43
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	82 95       	swap	r24
     ec6:	86 95       	lsr	r24
     ec8:	87 70       	andi	r24, 0x07	; 7
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	81 70       	andi	r24, 0x01	; 1
     ed0:	90 70       	andi	r25, 0x00	; 0
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	a1 f3       	breq	.-24     	; 0xebe <UART_VoidSendChar+0xc>
	/*CLR Flag*/
	SET_BIT(UCSRA,UDRE);
     ed6:	ab e2       	ldi	r26, 0x2B	; 43
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	eb e2       	ldi	r30, 0x2B	; 43
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 62       	ori	r24, 0x20	; 32
     ee2:	8c 93       	st	X, r24
	/*put the data need to send in your Register*/
	UDR=u8Data;
     ee4:	ec e2       	ldi	r30, 0x2C	; 44
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 83       	st	Z, r24

}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_VoidGetChar>:
u8 UART_VoidGetChar(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	u8 u8Result=0;
     efe:	19 82       	std	Y+1, r1	; 0x01
	/*wait until Receive Complete*/
	while(GET_BIT(UCSRA,RXC)==0);
     f00:	eb e2       	ldi	r30, 0x2B	; 43
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 23       	and	r24, r24
     f08:	dc f7       	brge	.-10     	; 0xf00 <UART_VoidGetChar+0xc>
	/*CLR Flag*/
	SET_BIT(UCSRA,RXC);
     f0a:	ab e2       	ldi	r26, 0x2B	; 43
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e2       	ldi	r30, 0x2B	; 43
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	8c 93       	st	X, r24
	/*get the value from UDR Register*/
	u8Result=UDR;
     f18:	ec e2       	ldi	r30, 0x2C	; 44
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	89 83       	std	Y+1, r24	; 0x01

	return u8Result;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <UART_VoidGetString>:
u8* UART_VoidGetString(void)
{
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62

	for(u8 count=0;count<4;count++)
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <UART_VoidGetString+0x2a>
	{
		arr[count]=UART_VoidGetChar();
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	08 2f       	mov	r16, r24
     f40:	10 e0       	ldi	r17, 0x00	; 0
     f42:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_VoidGetChar>
     f46:	f8 01       	movw	r30, r16
     f48:	ea 57       	subi	r30, 0x7A	; 122
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	80 83       	st	Z, r24
	return u8Result;
}
u8* UART_VoidGetString(void)
{

	for(u8 count=0;count<4;count++)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	84 30       	cpi	r24, 0x04	; 4
     f58:	88 f3       	brcs	.-30     	; 0xf3c <UART_VoidGetString+0x12>
	{
		arr[count]=UART_VoidGetChar();
	}
	return arr;
     f5a:	86 e8       	ldi	r24, 0x86	; 134
     f5c:	91 e0       	ldi	r25, 0x01	; 1
}
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T2)(void)=NULL;
static void (*GPFunc_T1)(void)=NULL;


void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <TIMER0_OV_SetCallBack+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	90 93 79 01 	sts	0x0179, r25
     f80:	80 93 78 01 	sts	0x0178, r24
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <TIMER0_CM_SetCallBack+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	90 93 79 01 	sts	0x0179, r25
     fa4:	80 93 78 01 	sts	0x0178, r24
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <TIMER1_OV_SetCallBack+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	90 93 7d 01 	sts	0x017D, r25
     fc8:	80 93 7c 01 	sts	0x017C, r24
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <TIMER1_CM_A_SetCallBack+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	90 93 7d 01 	sts	0x017D, r25
     fec:	80 93 7c 01 	sts	0x017C, r24
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <TIMER1_CM_B_SetCallBack+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	90 93 7d 01 	sts	0x017D, r25
    1010:	80 93 7c 01 	sts	0x017C, r24
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <TIMER2_OV_SetCallBack+0x6>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	90 93 7b 01 	sts	0x017B, r25
    1034:	80 93 7a 01 	sts	0x017A, r24
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <TIMER2_CM_SetCallBack+0x6>
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	90 93 7b 01 	sts	0x017B, r25
    1058:	80 93 7a 01 	sts	0x017A, r24
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    1090:	80 91 78 01 	lds	r24, 0x0178
    1094:	90 91 79 01 	lds	r25, 0x0179
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_11+0x40>
	{
		GPFunc_T0();
    109c:	e0 91 78 01 	lds	r30, 0x0178
    10a0:	f0 91 79 01 	lds	r31, 0x0179
    10a4:	09 95       	icall
	}
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_10>:
ISR_TMR0_Comp()
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    10f6:	80 91 78 01 	lds	r24, 0x0178
    10fa:	90 91 79 01 	lds	r25, 0x0179
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_10+0x40>
	{
		GPFunc_T0();
    1102:	e0 91 78 01 	lds	r30, 0x0178
    1106:	f0 91 79 01 	lds	r31, 0x0179
    110a:	09 95       	icall
	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    115c:	80 91 7c 01 	lds	r24, 0x017C
    1160:	90 91 7d 01 	lds	r25, 0x017D
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	29 f0       	breq	.+10     	; 0x1172 <__vector_9+0x40>
		{
			GPFunc_T1();
    1168:	e0 91 7c 01 	lds	r30, 0x017C
    116c:	f0 91 7d 01 	lds	r31, 0x017D
    1170:	09 95       	icall
		}
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_7>:
ISR_TMR1_CompA()
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    11c2:	80 91 7c 01 	lds	r24, 0x017C
    11c6:	90 91 7d 01 	lds	r25, 0x017D
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <__vector_7+0x40>
		{
			GPFunc_T1();
    11ce:	e0 91 7c 01 	lds	r30, 0x017C
    11d2:	f0 91 7d 01 	lds	r31, 0x017D
    11d6:	09 95       	icall
		}
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_8>:
ISR_TMR1_CompB()
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1228:	80 91 7c 01 	lds	r24, 0x017C
    122c:	90 91 7d 01 	lds	r25, 0x017D
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	29 f0       	breq	.+10     	; 0x123e <__vector_8+0x40>
		{
			GPFunc_T1();
    1234:	e0 91 7c 01 	lds	r30, 0x017C
    1238:	f0 91 7d 01 	lds	r31, 0x017D
    123c:	09 95       	icall
		}
}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    128e:	80 91 7a 01 	lds	r24, 0x017A
    1292:	90 91 7b 01 	lds	r25, 0x017B
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	29 f0       	breq	.+10     	; 0x12a4 <__vector_5+0x40>
	{
		GPFunc_T2();
    129a:	e0 91 7a 01 	lds	r30, 0x017A
    129e:	f0 91 7b 01 	lds	r31, 0x017B
    12a2:	09 95       	icall
	}
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_4>:
ISR_TMR2_Comp()
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    12f4:	80 91 7a 01 	lds	r24, 0x017A
    12f8:	90 91 7b 01 	lds	r25, 0x017B
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	29 f0       	breq	.+10     	; 0x130a <__vector_4+0x40>
	{
		GPFunc_T2();
    1300:	e0 91 7a 01 	lds	r30, 0x017A
    1304:	f0 91 7b 01 	lds	r31, 0x017B
    1308:	09 95       	icall
	}
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    1338:	a3 e5       	ldi	r26, 0x53	; 83
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e3 e5       	ldi	r30, 0x53	; 83
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	8c 93       	st	X, r24
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	80 62       	ori	r24, 0x20	; 32
    1360:	8c 93       	st	X, r24
    1362:	a3 e5       	ldi	r26, 0x53	; 83
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e3 e5       	ldi	r30, 0x53	; 83
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7e       	andi	r24, 0xEF	; 239
    136e:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	84 60       	ori	r24, 0x04	; 4
    137c:	8c 93       	st	X, r24
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8d 7f       	andi	r24, 0xFD	; 253
    138a:	8c 93       	st	X, r24
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8e 7f       	andi	r24, 0xFE	; 254
    1398:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=625;		// For 50 Hz for servo motor
    13a8:	e6 e4       	ldi	r30, 0x46	; 70
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	81 e7       	ldi	r24, 0x71	; 113
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
	prescaler_clk_256_1;
    13b4:	ae e4       	ldi	r26, 0x4E	; 78
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ee e4       	ldi	r30, 0x4E	; 78
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	8c 93       	st	X, r24
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8e 7f       	andi	r24, 0xFE	; 254
    13dc:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    13de:	af e4       	ldi	r26, 0x4F	; 79
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8e 7f       	andi	r24, 0xFE	; 254
    13ea:	8c 93       	st	X, r24
    13ec:	af e4       	ldi	r26, 0x4F	; 79
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e4       	ldi	r30, 0x4F	; 79
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	82 60       	ori	r24, 0x02	; 2
    13f8:	8c 93       	st	X, r24
    13fa:	ae e4       	ldi	r26, 0x4E	; 78
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ee e4       	ldi	r30, 0x4E	; 78
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
    1408:	ae e4       	ldi	r26, 0x4E	; 78
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ee e4       	ldi	r30, 0x4E	; 78
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 61       	ori	r24, 0x10	; 16
    1414:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    1416:	af e4       	ldi	r26, 0x4F	; 79
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e4       	ldi	r30, 0x4F	; 79
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8c 93       	st	X, r24
    1424:	af e4       	ldi	r26, 0x4F	; 79
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ef e4       	ldi	r30, 0x4F	; 79
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 68       	ori	r24, 0x80	; 128
    1430:	8c 93       	st	X, r24
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 7e       	andi	r24, 0xEF	; 239
    143e:	8c 93       	st	X, r24
    1440:	af e4       	ldi	r26, 0x4F	; 79
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ef e4       	ldi	r30, 0x4F	; 79
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 62       	ori	r24, 0x20	; 32
    144c:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_2;
	prescaler_clk_8_2;
	Non_PWM_Normal_OC0_disconnected_2;
	Compare_Match_Interrupt_Enable_2;
#elif Timer2_Mode==Fast_PWM_Timer2_Mode
	Fast_PWM_2;
    145c:	a5 e4       	ldi	r26, 0x45	; 69
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e4       	ldi	r30, 0x45	; 69
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	88 60       	ori	r24, 0x08	; 8
    1468:	8c 93       	st	X, r24
    146a:	a5 e4       	ldi	r26, 0x45	; 69
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e4       	ldi	r30, 0x45	; 69
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	8c 93       	st	X, r24
	NonInverted_Mode_2;
    1478:	a5 e4       	ldi	r26, 0x45	; 69
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e4       	ldi	r30, 0x45	; 69
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 62       	ori	r24, 0x20	; 32
    1484:	8c 93       	st	X, r24
    1486:	a5 e4       	ldi	r26, 0x45	; 69
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e4       	ldi	r30, 0x45	; 69
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7e       	andi	r24, 0xEF	; 239
    1492:	8c 93       	st	X, r24
	prescaler_clk_256_2;
    1494:	a5 e4       	ldi	r26, 0x45	; 69
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e4       	ldi	r30, 0x45	; 69
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	8c 93       	st	X, r24
    14a2:	a5 e4       	ldi	r26, 0x45	; 69
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e4       	ldi	r30, 0x45	; 69
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8d 7f       	andi	r24, 0xFD	; 253
    14ae:	8c 93       	st	X, r24
    14b0:	a5 e4       	ldi	r26, 0x45	; 69
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e4       	ldi	r30, 0x45	; 69
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    14cc:	a9 e5       	ldi	r26, 0x59	; 89
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e9 e5       	ldi	r30, 0x59	; 89
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 62       	ori	r24, 0x20	; 32
    14d8:	8c 93       	st	X, r24
}
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <Set_Duty_Cycle_TIMER_0+0xa>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <Set_Duty_Cycle_TIMER_0+0xc>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	69 83       	std	Y+1, r22	; 0x01
    14f2:	7a 83       	std	Y+2, r23	; 0x02
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    14f8:	69 81       	ldd	r22, Y+1	; 0x01
    14fa:	7a 81       	ldd	r23, Y+2	; 0x02
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	48 ec       	ldi	r20, 0xC8	; 200
    1506:	52 e4       	ldi	r21, 0x42	; 66
    1508:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	ab 83       	std	Y+3, r26	; 0x03
    1516:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    1518:	0c e5       	ldi	r16, 0x5C	; 92
    151a:	10 e0       	ldi	r17, 0x00	; 0
    151c:	69 81       	ldd	r22, Y+1	; 0x01
    151e:	7a 81       	ldd	r23, Y+2	; 0x02
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	53 e4       	ldi	r21, 0x43	; 67
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	f8 01       	movw	r30, r16
    1556:	80 83       	st	Z, r24

}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <Set_Duty_Cycle_TIMER_1_A+0xa>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Set_Duty_Cycle_TIMER_1_A+0xc>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	69 83       	std	Y+1, r22	; 0x01
    157c:	7a 83       	std	Y+2, r23	; 0x02
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1582:	69 81       	ldd	r22, Y+1	; 0x01
    1584:	7a 81       	ldd	r23, Y+2	; 0x02
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	48 ec       	ldi	r20, 0xC8	; 200
    1590:	52 e4       	ldi	r21, 0x42	; 66
    1592:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	9a 83       	std	Y+2, r25	; 0x02
    159e:	ab 83       	std	Y+3, r26	; 0x03
    15a0:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    15a2:	0a e4       	ldi	r16, 0x4A	; 74
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	e6 e4       	ldi	r30, 0x46	; 70
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	cc 01       	movw	r24, r24
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	29 81       	ldd	r18, Y+1	; 0x01
    15c6:	3a 81       	ldd	r19, Y+2	; 0x02
    15c8:	4b 81       	ldd	r20, Y+3	; 0x03
    15ca:	5c 81       	ldd	r21, Y+4	; 0x04
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	f8 01       	movw	r30, r16
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <Set_Duty_Cycle_TIMER_1_B+0xa>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <Set_Duty_Cycle_TIMER_1_B+0xc>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	69 83       	std	Y+1, r22	; 0x01
    161e:	7a 83       	std	Y+2, r23	; 0x02
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1624:	69 81       	ldd	r22, Y+1	; 0x01
    1626:	7a 81       	ldd	r23, Y+2	; 0x02
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	48 ec       	ldi	r20, 0xC8	; 200
    1632:	52 e4       	ldi	r21, 0x42	; 66
    1634:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	ab 83       	std	Y+3, r26	; 0x03
    1642:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    1644:	08 e4       	ldi	r16, 0x48	; 72
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	e6 e4       	ldi	r30, 0x46	; 70
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	cc 01       	movw	r24, r24
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	4b 81       	ldd	r20, Y+3	; 0x03
    166c:	5c 81       	ldd	r21, Y+4	; 0x04
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	f8 01       	movw	r30, r16
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <Set_Duty_Cycle_TIMER_2+0xa>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <Set_Duty_Cycle_TIMER_2+0xc>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	69 83       	std	Y+1, r22	; 0x01
    16c0:	7a 83       	std	Y+2, r23	; 0x02
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    16c6:	69 81       	ldd	r22, Y+1	; 0x01
    16c8:	7a 81       	ldd	r23, Y+2	; 0x02
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	48 ec       	ldi	r20, 0xC8	; 200
    16d4:	52 e4       	ldi	r21, 0x42	; 66
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	ab 83       	std	Y+3, r26	; 0x03
    16e4:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    16e6:	03 e4       	ldi	r16, 0x43	; 67
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	69 81       	ldd	r22, Y+1	; 0x01
    16ec:	7a 81       	ldd	r23, Y+2	; 0x02
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24

}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1740:	af e5       	ldi	r26, 0x5F	; 95
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e5       	ldi	r30, 0x5F	; 95
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	8c 93       	st	X, r24
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    175c:	af e5       	ldi	r26, 0x5F	; 95
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ef e5       	ldi	r30, 0x5F	; 95
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 77       	andi	r24, 0x7F	; 127
    1768:	8c 93       	st	X, r24
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <INT0_SetCallBack+0x6>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	90 93 7f 01 	sts	0x017F, r25
    1786:	80 93 7e 01 	sts	0x017E, r24
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <INT1_SetCallBack+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	90 93 81 01 	sts	0x0181, r25
    17aa:	80 93 80 01 	sts	0x0180, r24
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <INT2_SetCallBack+0x6>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	90 93 83 01 	sts	0x0183, r25
    17ce:	80 93 82 01 	sts	0x0182, r24
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <__vector_1>:
ISR(__vector_1)
{
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    1806:	80 91 7e 01 	lds	r24, 0x017E
    180a:	90 91 7f 01 	lds	r25, 0x017F
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	29 f0       	breq	.+10     	; 0x181c <__vector_1+0x40>
	{
		GPFunc0();
    1812:	e0 91 7e 01 	lds	r30, 0x017E
    1816:	f0 91 7f 01 	lds	r31, 0x017F
    181a:	09 95       	icall
	}
}
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_2>:
ISR(__vector_2)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    186c:	80 91 80 01 	lds	r24, 0x0180
    1870:	90 91 81 01 	lds	r25, 0x0181
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	29 f0       	breq	.+10     	; 0x1882 <__vector_2+0x40>
	{
		GPFunc1();
    1878:	e0 91 80 01 	lds	r30, 0x0180
    187c:	f0 91 81 01 	lds	r31, 0x0181
    1880:	09 95       	icall
	}
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__vector_3>:
ISR(__vector_3)
{
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	0f 92       	push	r0
    18b0:	11 24       	eor	r1, r1
    18b2:	2f 93       	push	r18
    18b4:	3f 93       	push	r19
    18b6:	4f 93       	push	r20
    18b8:	5f 93       	push	r21
    18ba:	6f 93       	push	r22
    18bc:	7f 93       	push	r23
    18be:	8f 93       	push	r24
    18c0:	9f 93       	push	r25
    18c2:	af 93       	push	r26
    18c4:	bf 93       	push	r27
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    18d2:	80 91 82 01 	lds	r24, 0x0182
    18d6:	90 91 83 01 	lds	r25, 0x0183
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <__vector_3+0x40>
	{
		GPFunc2();
    18de:	e0 91 82 01 	lds	r30, 0x0182
    18e2:	f0 91 83 01 	lds	r31, 0x0183
    18e6:	09 95       	icall
	}
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1916:	ab e5       	ldi	r26, 0x5B	; 91
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	eb e5       	ldi	r30, 0x5B	; 91
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1924:	a5 e5       	ldi	r26, 0x55	; 85
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e5       	ldi	r30, 0x55	; 85
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1932:	a5 e5       	ldi	r26, 0x55	; 85
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e5       	ldi	r30, 0x55	; 85
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8d 7f       	andi	r24, 0xFD	; 253
    193e:	8c 93       	st	X, r24
	#endif
}
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    194e:	ab e5       	ldi	r26, 0x5B	; 91
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	eb e5       	ldi	r30, 0x5B	; 91
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 68       	ori	r24, 0x80	; 128
    195a:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8b 7f       	andi	r24, 0xFB	; 251
    1968:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    196a:	a5 e5       	ldi	r26, 0x55	; 85
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e5       	ldi	r30, 0x55	; 85
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	88 60       	ori	r24, 0x08	; 8
    1976:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1986:	ab e5       	ldi	r26, 0x5B	; 91
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e5       	ldi	r30, 0x5B	; 91
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 62       	ori	r24, 0x20	; 32
    1992:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1994:	a4 e5       	ldi	r26, 0x54	; 84
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e4 e5       	ldi	r30, 0x54	; 84
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	8f 7b       	andi	r24, 0xBF	; 191
    19a0:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	27 97       	sbiw	r28, 0x07	; 7
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	6a 83       	std	Y+2, r22	; 0x02
    19c0:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	09 f0       	breq	.+2      	; 0x19ca <DIO_VidSetPinDirection+0x22>
    19c8:	6f c0       	rjmp	.+222    	; 0x1aa8 <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3f 83       	std	Y+7, r19	; 0x07
    19d2:	2e 83       	std	Y+6, r18	; 0x06
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	9f 81       	ldd	r25, Y+7	; 0x07
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	49 f1       	breq	.+82     	; 0x1a30 <DIO_VidSetPinDirection+0x88>
    19de:	2e 81       	ldd	r18, Y+6	; 0x06
    19e0:	3f 81       	ldd	r19, Y+7	; 0x07
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <DIO_VidSetPinDirection+0x4a>
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	61 f0       	breq	.+24     	; 0x1a08 <DIO_VidSetPinDirection+0x60>
    19f0:	d2 c0       	rjmp	.+420    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
    19f2:	2e 81       	ldd	r18, Y+6	; 0x06
    19f4:	3f 81       	ldd	r19, Y+7	; 0x07
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	71 f1       	breq	.+92     	; 0x1a58 <DIO_VidSetPinDirection+0xb0>
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	e9 f1       	breq	.+122    	; 0x1a80 <DIO_VidSetPinDirection+0xd8>
    1a06:	c7 c0       	rjmp	.+398    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    1a08:	aa e3       	ldi	r26, 0x3A	; 58
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e3       	ldi	r30, 0x3A	; 58
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_VidSetPinDirection+0x7e>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_VidSetPinDirection+0x7a>
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	b3 c0       	rjmp	.+358    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    1a30:	a7 e3       	ldi	r26, 0x37	; 55
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e7 e3       	ldi	r30, 0x37	; 55
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_VidSetPinDirection+0xa6>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_VidSetPinDirection+0xa2>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	9f c0       	rjmp	.+318    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_VidSetPinDirection+0xce>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_VidSetPinDirection+0xca>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	8b c0       	rjmp	.+278    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1a80:	a1 e3       	ldi	r26, 0x31	; 49
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e1 e3       	ldi	r30, 0x31	; 49
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_VidSetPinDirection+0xf6>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_VidSetPinDirection+0xf2>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	77 c0       	rjmp	.+238    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <DIO_VidSetPinDirection+0x108>
    1aae:	73 c0       	rjmp	.+230    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3d 83       	std	Y+5, r19	; 0x05
    1ab8:	2c 83       	std	Y+4, r18	; 0x04
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	9d 81       	ldd	r25, Y+5	; 0x05
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	59 f1       	breq	.+86     	; 0x1b1a <DIO_VidSetPinDirection+0x172>
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <DIO_VidSetPinDirection+0x130>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f0       	breq	.+26     	; 0x1af0 <DIO_VidSetPinDirection+0x148>
    1ad6:	5f c0       	rjmp	.+190    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	89 f1       	breq	.+98     	; 0x1b44 <DIO_VidSetPinDirection+0x19c>
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <DIO_VidSetPinDirection+0x146>
    1aec:	40 c0       	rjmp	.+128    	; 0x1b6e <DIO_VidSetPinDirection+0x1c6>
    1aee:	53 c0       	rjmp	.+166    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1af0:	aa e3       	ldi	r26, 0x3A	; 58
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	ea e3       	ldi	r30, 0x3A	; 58
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_VidSetPinDirection+0x166>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_VidSetPinDirection+0x162>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	3e c0       	rjmp	.+124    	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    1b1a:	a7 e3       	ldi	r26, 0x37	; 55
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e7 e3       	ldi	r30, 0x37	; 55
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_VidSetPinDirection+0x190>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_VidSetPinDirection+0x18c>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	29 c0       	rjmp	.+82     	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1b44:	a4 e3       	ldi	r26, 0x34	; 52
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e4 e3       	ldi	r30, 0x34	; 52
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_VidSetPinDirection+0x1ba>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_VidSetPinDirection+0x1b6>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1b6e:	a1 e3       	ldi	r26, 0x31	; 49
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e1 e3       	ldi	r30, 0x31	; 49
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_VidSetPinDirection+0x1e4>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_VidSetPinDirection+0x1e0>
    1b90:	80 95       	com	r24
    1b92:	84 23       	and	r24, r20
    1b94:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1b96:	27 96       	adiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	27 97       	sbiw	r28, 0x07	; 7
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	6a 83       	std	Y+2, r22	; 0x02
    1bc0:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <DIO_VidSetPinValue+0x22>
    1bc8:	6f c0       	rjmp	.+222    	; 0x1ca8 <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3f 83       	std	Y+7, r19	; 0x07
    1bd2:	2e 83       	std	Y+6, r18	; 0x06
    1bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	49 f1       	breq	.+82     	; 0x1c30 <DIO_VidSetPinValue+0x88>
    1bde:	2e 81       	ldd	r18, Y+6	; 0x06
    1be0:	3f 81       	ldd	r19, Y+7	; 0x07
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <DIO_VidSetPinValue+0x4a>
    1be8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bea:	9f 81       	ldd	r25, Y+7	; 0x07
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	61 f0       	breq	.+24     	; 0x1c08 <DIO_VidSetPinValue+0x60>
    1bf0:	d2 c0       	rjmp	.+420    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
    1bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	71 f1       	breq	.+92     	; 0x1c58 <DIO_VidSetPinValue+0xb0>
    1bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1c00:	83 30       	cpi	r24, 0x03	; 3
    1c02:	91 05       	cpc	r25, r1
    1c04:	e9 f1       	breq	.+122    	; 0x1c80 <DIO_VidSetPinValue+0xd8>
    1c06:	c7 c0       	rjmp	.+398    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_VidSetPinValue+0x7e>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_VidSetPinValue+0x7a>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	b3 c0       	rjmp	.+358    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1c30:	a8 e3       	ldi	r26, 0x38	; 56
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e8 e3       	ldi	r30, 0x38	; 56
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_VidSetPinValue+0xa6>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_VidSetPinValue+0xa2>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	9f c0       	rjmp	.+318    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    1c58:	a5 e3       	ldi	r26, 0x35	; 53
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e3       	ldi	r30, 0x35	; 53
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_VidSetPinValue+0xce>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_VidSetPinValue+0xca>
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	8b c0       	rjmp	.+278    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1c80:	a2 e3       	ldi	r26, 0x32	; 50
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e2 e3       	ldi	r30, 0x32	; 50
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_VidSetPinValue+0xf6>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_VidSetPinValue+0xf2>
    1ca2:	84 2b       	or	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	77 c0       	rjmp	.+238    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	88 23       	and	r24, r24
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <DIO_VidSetPinValue+0x108>
    1cae:	73 c0       	rjmp	.+230    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	3d 83       	std	Y+5, r19	; 0x05
    1cb8:	2c 83       	std	Y+4, r18	; 0x04
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	59 f1       	breq	.+86     	; 0x1d1a <DIO_VidSetPinValue+0x172>
    1cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <DIO_VidSetPinValue+0x130>
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f0       	breq	.+26     	; 0x1cf0 <DIO_VidSetPinValue+0x148>
    1cd6:	5f c0       	rjmp	.+190    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
    1cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cda:	3d 81       	ldd	r19, Y+5	; 0x05
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	89 f1       	breq	.+98     	; 0x1d44 <DIO_VidSetPinValue+0x19c>
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <DIO_VidSetPinValue+0x146>
    1cec:	40 c0       	rjmp	.+128    	; 0x1d6e <DIO_VidSetPinValue+0x1c6>
    1cee:	53 c0       	rjmp	.+166    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1cf0:	ab e3       	ldi	r26, 0x3B	; 59
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	eb e3       	ldi	r30, 0x3B	; 59
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_VidSetPinValue+0x166>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_VidSetPinValue+0x162>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	3e c0       	rjmp	.+124    	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    1d1a:	a8 e3       	ldi	r26, 0x38	; 56
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e8 e3       	ldi	r30, 0x38	; 56
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <DIO_VidSetPinValue+0x190>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <DIO_VidSetPinValue+0x18c>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	29 c0       	rjmp	.+82     	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1d44:	a5 e3       	ldi	r26, 0x35	; 53
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e3       	ldi	r30, 0x35	; 53
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_VidSetPinValue+0x1ba>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_VidSetPinValue+0x1b6>
    1d66:	80 95       	com	r24
    1d68:	84 23       	and	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1d6e:	a2 e3       	ldi	r26, 0x32	; 50
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e2 e3       	ldi	r30, 0x32	; 50
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_VidSetPinValue+0x1e4>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_VidSetPinValue+0x1e0>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1d96:	27 96       	adiw	r28, 0x07	; 7
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <DIO_VidSetPortDirection+0x6>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <DIO_VidSetPortDirection+0x8>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3c 83       	std	Y+4, r19	; 0x04
    1dc0:	2b 83       	std	Y+3, r18	; 0x03
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	d1 f0       	breq	.+52     	; 0x1e00 <DIO_VidSetPortDirection+0x58>
    1dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dce:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd0:	22 30       	cpi	r18, 0x02	; 2
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <DIO_VidSetPortDirection+0x38>
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	61 f0       	breq	.+24     	; 0x1df6 <DIO_VidSetPortDirection+0x4e>
    1dde:	1e c0       	rjmp	.+60     	; 0x1e1c <DIO_VidSetPortDirection+0x74>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	81 f0       	breq	.+32     	; 0x1e0a <DIO_VidSetPortDirection+0x62>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	91 05       	cpc	r25, r1
    1df2:	81 f0       	breq	.+32     	; 0x1e14 <DIO_VidSetPortDirection+0x6c>
    1df4:	13 c0       	rjmp	.+38     	; 0x1e1c <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1df6:	ea e3       	ldi	r30, 0x3A	; 58
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	80 83       	st	Z, r24
    1dfe:	0e c0       	rjmp	.+28     	; 0x1e1c <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    1e00:	e7 e3       	ldi	r30, 0x37	; 55
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	80 83       	st	Z, r24
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    1e0a:	e4 e3       	ldi	r30, 0x34	; 52
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	80 83       	st	Z, r24
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    1e14:	e1 e3       	ldi	r30, 0x31	; 49
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	80 83       	st	Z, r24
	}	
	
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_VidSetPortValue+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DIO_VidSetPortValue+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3c 83       	std	Y+4, r19	; 0x04
    1e42:	2b 83       	std	Y+3, r18	; 0x03
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	d1 f0       	breq	.+52     	; 0x1e82 <DIO_VidSetPortValue+0x58>
    1e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e50:	3c 81       	ldd	r19, Y+4	; 0x04
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <DIO_VidSetPortValue+0x38>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <DIO_VidSetPortValue+0x4e>
    1e60:	1e c0       	rjmp	.+60     	; 0x1e9e <DIO_VidSetPortValue+0x74>
    1e62:	2b 81       	ldd	r18, Y+3	; 0x03
    1e64:	3c 81       	ldd	r19, Y+4	; 0x04
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	81 f0       	breq	.+32     	; 0x1e8c <DIO_VidSetPortValue+0x62>
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	91 05       	cpc	r25, r1
    1e74:	81 f0       	breq	.+32     	; 0x1e96 <DIO_VidSetPortValue+0x6c>
    1e76:	13 c0       	rjmp	.+38     	; 0x1e9e <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    1e78:	eb e3       	ldi	r30, 0x3B	; 59
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	80 83       	st	Z, r24
    1e80:	0e c0       	rjmp	.+28     	; 0x1e9e <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    1e82:	e8 e3       	ldi	r30, 0x38	; 56
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	80 83       	st	Z, r24
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    1e8c:	e5 e3       	ldi	r30, 0x35	; 53
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	80 83       	st	Z, r24
    1e94:	04 c0       	rjmp	.+8      	; 0x1e9e <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    1e96:	e2 e3       	ldi	r30, 0x32	; 50
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	80 83       	st	Z, r24
	}	
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <DIO_u8GetPinValue+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_u8GetPinValue+0x8>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    1ebe:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3d 83       	std	Y+5, r19	; 0x05
    1ec8:	2c 83       	std	Y+4, r18	; 0x04
    1eca:	4c 81       	ldd	r20, Y+4	; 0x04
    1ecc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ece:	41 30       	cpi	r20, 0x01	; 1
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	41 f1       	breq	.+80     	; 0x1f24 <DIO_u8GetPinValue+0x78>
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	91 05       	cpc	r25, r1
    1edc:	34 f4       	brge	.+12     	; 0x1eea <DIO_u8GetPinValue+0x3e>
    1ede:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee2:	21 15       	cp	r18, r1
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <DIO_u8GetPinValue+0x54>
    1ee8:	52 c0       	rjmp	.+164    	; 0x1f8e <DIO_u8GetPinValue+0xe2>
    1eea:	4c 81       	ldd	r20, Y+4	; 0x04
    1eec:	5d 81       	ldd	r21, Y+5	; 0x05
    1eee:	42 30       	cpi	r20, 0x02	; 2
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	51 f1       	breq	.+84     	; 0x1f48 <DIO_u8GetPinValue+0x9c>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	b9 f1       	breq	.+110    	; 0x1f6c <DIO_u8GetPinValue+0xc0>
    1efe:	47 c0       	rjmp	.+142    	; 0x1f8e <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    1f00:	e9 e3       	ldi	r30, 0x39	; 57
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a9 01       	movw	r20, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_u8GetPinValue+0x6c>
    1f14:	55 95       	asr	r21
    1f16:	47 95       	ror	r20
    1f18:	8a 95       	dec	r24
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_u8GetPinValue+0x68>
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	35 c0       	rjmp	.+106    	; 0x1f8e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    1f24:	e6 e3       	ldi	r30, 0x36	; 54
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_u8GetPinValue+0x90>
    1f38:	55 95       	asr	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_u8GetPinValue+0x8c>
    1f40:	ca 01       	movw	r24, r20
    1f42:	81 70       	andi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	23 c0       	rjmp	.+70     	; 0x1f8e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    1f48:	e3 e3       	ldi	r30, 0x33	; 51
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a9 01       	movw	r20, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <DIO_u8GetPinValue+0xb4>
    1f5c:	55 95       	asr	r21
    1f5e:	47 95       	ror	r20
    1f60:	8a 95       	dec	r24
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <DIO_u8GetPinValue+0xb0>
    1f64:	ca 01       	movw	r24, r20
    1f66:	81 70       	andi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    1f6c:	e0 e3       	ldi	r30, 0x30	; 48
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_u8GetPinValue+0xd8>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_u8GetPinValue+0xd4>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <DIO_u8TogglePinValue+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <DIO_u8TogglePinValue+0x8>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3c 83       	std	Y+4, r19	; 0x04
    1fb8:	2b 83       	std	Y+3, r18	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	49 f1       	breq	.+82     	; 0x2016 <DIO_u8TogglePinValue+0x76>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <DIO_u8TogglePinValue+0x38>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <DIO_u8TogglePinValue+0x4e>
    1fd6:	5a c0       	rjmp	.+180    	; 0x208c <DIO_u8TogglePinValue+0xec>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	71 f1       	breq	.+92     	; 0x203e <DIO_u8TogglePinValue+0x9e>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	e9 f1       	breq	.+122    	; 0x2066 <DIO_u8TogglePinValue+0xc6>
    1fec:	4f c0       	rjmp	.+158    	; 0x208c <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    1fee:	ab e3       	ldi	r26, 0x3B	; 59
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	eb e3       	ldi	r30, 0x3B	; 59
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_u8TogglePinValue+0x6c>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <DIO_u8TogglePinValue+0x68>
    2010:	84 27       	eor	r24, r20
    2012:	8c 93       	st	X, r24
    2014:	3b c0       	rjmp	.+118    	; 0x208c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    2016:	a8 e3       	ldi	r26, 0x38	; 56
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e8 e3       	ldi	r30, 0x38	; 56
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	48 2f       	mov	r20, r24
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 2e       	mov	r0, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_u8TogglePinValue+0x94>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	0a 94       	dec	r0
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_u8TogglePinValue+0x90>
    2038:	84 27       	eor	r24, r20
    203a:	8c 93       	st	X, r24
    203c:	27 c0       	rjmp	.+78     	; 0x208c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    203e:	a5 e3       	ldi	r26, 0x35	; 53
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e3       	ldi	r30, 0x35	; 53
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <DIO_u8TogglePinValue+0xbc>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <DIO_u8TogglePinValue+0xb8>
    2060:	84 27       	eor	r24, r20
    2062:	8c 93       	st	X, r24
    2064:	13 c0       	rjmp	.+38     	; 0x208c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    2066:	a2 e3       	ldi	r26, 0x32	; 50
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e2 e3       	ldi	r30, 0x32	; 50
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_u8TogglePinValue+0xe4>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_u8TogglePinValue+0xe0>
    2088:	84 27       	eor	r24, r20
    208a:	8c 93       	st	X, r24
	}
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <ADC_SetCallBack+0x6>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	90 93 85 01 	sts	0x0185, r25
    20b0:	80 93 84 01 	sts	0x0184, r24
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	2f 93       	push	r18
    20ca:	3f 93       	push	r19
    20cc:	4f 93       	push	r20
    20ce:	5f 93       	push	r21
    20d0:	6f 93       	push	r22
    20d2:	7f 93       	push	r23
    20d4:	8f 93       	push	r24
    20d6:	9f 93       	push	r25
    20d8:	af 93       	push	r26
    20da:	bf 93       	push	r27
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    20e8:	80 91 84 01 	lds	r24, 0x0184
    20ec:	90 91 85 01 	lds	r25, 0x0185
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	29 f0       	breq	.+10     	; 0x20fe <__vector_16+0x40>
	{
		GPFunc();
    20f4:	e0 91 84 01 	lds	r30, 0x0184
    20f8:	f0 91 85 01 	lds	r31, 0x0185
    20fc:	09 95       	icall
	}
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	ff 91       	pop	r31
    2104:	ef 91       	pop	r30
    2106:	bf 91       	pop	r27
    2108:	af 91       	pop	r26
    210a:	9f 91       	pop	r25
    210c:	8f 91       	pop	r24
    210e:	7f 91       	pop	r23
    2110:	6f 91       	pop	r22
    2112:	5f 91       	pop	r21
    2114:	4f 91       	pop	r20
    2116:	3f 91       	pop	r19
    2118:	2f 91       	pop	r18
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	0f 90       	pop	r0
    2120:	1f 90       	pop	r1
    2122:	18 95       	reti

00002124 <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    212c:	a7 e2       	ldi	r26, 0x27	; 39
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e7 e2       	ldi	r30, 0x27	; 39
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 64       	ori	r24, 0x40	; 64
    2138:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    213a:	a7 e2       	ldi	r26, 0x27	; 39
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e7 e2       	ldi	r30, 0x27	; 39
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8f 77       	andi	r24, 0x7F	; 127
    2146:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    2148:	a6 e2       	ldi	r26, 0x26	; 38
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8e 7f       	andi	r24, 0xFE	; 254
    2154:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    2156:	a6 e2       	ldi	r26, 0x26	; 38
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e6 e2       	ldi	r30, 0x26	; 38
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	82 60       	ori	r24, 0x02	; 2
    2162:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    2164:	a6 e2       	ldi	r26, 0x26	; 38
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e6 e2       	ldi	r30, 0x26	; 38
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	84 60       	ori	r24, 0x04	; 4
    2170:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    2172:	a7 e2       	ldi	r26, 0x27	; 39
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e7 e2       	ldi	r30, 0x27	; 39
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8f 7d       	andi	r24, 0xDF	; 223
    217e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADATE);
		CLR_BIT(SFIOR,ADTS0);
		CLR_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	#elif	ADC_Mode==ADC_External_Interrupt_0_Trigger
		SET_BIT(ADCSRA,ADATE);
    2180:	a6 e2       	ldi	r26, 0x26	; 38
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e6 e2       	ldi	r30, 0x26	; 38
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	80 62       	ori	r24, 0x20	; 32
    218c:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    218e:	a0 e5       	ldi	r26, 0x50	; 80
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e0 e5       	ldi	r30, 0x50	; 80
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7d       	andi	r24, 0xDF	; 223
    219a:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
    219c:	a0 e5       	ldi	r26, 0x50	; 80
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e0 e5       	ldi	r30, 0x50	; 80
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 64       	ori	r24, 0x40	; 64
    21a8:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    21aa:	a0 e5       	ldi	r26, 0x50	; 80
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e0 e5       	ldi	r30, 0x50	; 80
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	8c 93       	st	X, r24
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    21b8:	a6 e2       	ldi	r26, 0x26	; 38
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e6 e2       	ldi	r30, 0x26	; 38
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 68       	ori	r24, 0x80	; 128
    21c4:	8c 93       	st	X, r24
}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    21d4:	a6 e2       	ldi	r26, 0x26	; 38
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e6 e2       	ldi	r30, 0x26	; 38
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 64       	ori	r24, 0x40	; 64
    21e0:	8c 93       	st	X, r24
}
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    21f4:	a7 e2       	ldi	r26, 0x27	; 39
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e7 e2       	ldi	r30, 0x27	; 39
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	80 7e       	andi	r24, 0xE0	; 224
    2200:	8c 93       	st	X, r24
	ADMUX|=Channal;
    2202:	a7 e2       	ldi	r26, 0x27	; 39
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e7 e2       	ldi	r30, 0x27	; 39
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	90 81       	ld	r25, Z
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	89 2b       	or	r24, r25
    2210:	8c 93       	st	X, r24
}
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2222:	a6 e2       	ldi	r26, 0x26	; 38
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e6 e2       	ldi	r30, 0x26	; 38
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 60       	ori	r24, 0x08	; 8
    222e:	8c 93       	st	X, r24
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    223e:	e6 e2       	ldi	r30, 0x26	; 38
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	82 95       	swap	r24
    2246:	8f 70       	andi	r24, 0x0F	; 15
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	81 70       	andi	r24, 0x01	; 1
    224e:	90 70       	andi	r25, 0x00	; 0
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	a9 f3       	breq	.-22     	; 0x223e <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    2254:	a6 e2       	ldi	r26, 0x26	; 38
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e6 e2       	ldi	r30, 0x26	; 38
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 61       	ori	r24, 0x10	; 16
    2260:	8c 93       	st	X, r24
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <ADC_Get_Result+0x6>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    2276:	e4 e2       	ldi	r30, 0x24	; 36
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	6c 97       	sbiw	r28, 0x1c	; 28
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e8       	ldi	r26, 0x80	; 128
    22b4:	bf e3       	ldi	r27, 0x3F	; 63
    22b6:	89 8f       	std	Y+25, r24	; 0x19
    22b8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ba:	ab 8f       	std	Y+27, r26	; 0x1b
    22bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	69 8d       	ldd	r22, Y+25	; 0x19
    22c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8d 8b       	std	Y+21, r24	; 0x15
    22d8:	9e 8b       	std	Y+22, r25	; 0x16
    22da:	af 8b       	std	Y+23, r26	; 0x17
    22dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9c 8b       	std	Y+20, r25	; 0x14
    22fc:	8b 8b       	std	Y+19, r24	; 0x13
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    2300:	6d 89       	ldd	r22, Y+21	; 0x15
    2302:	7e 89       	ldd	r23, Y+22	; 0x16
    2304:	8f 89       	ldd	r24, Y+23	; 0x17
    2306:	98 8d       	ldd	r25, Y+24	; 0x18
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	69 8d       	ldd	r22, Y+25	; 0x19
    231a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9c 8b       	std	Y+20, r25	; 0x14
    233e:	8b 8b       	std	Y+19, r24	; 0x13
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_VidPulseEnable+0xd0>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9a 8b       	std	Y+18, r25	; 0x12
    2348:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	9a 89       	ldd	r25, Y+18	; 0x12
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_VidPulseEnable+0xbe>
    2352:	9a 8b       	std	Y+18, r25	; 0x12
    2354:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8b 89       	ldd	r24, Y+19	; 0x13
    2358:	9c 89       	ldd	r25, Y+20	; 0x14
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_VidPulseEnable+0xb2>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9c 8b       	std	Y+20, r25	; 0x14
    237c:	8b 8b       	std	Y+19, r24	; 0x13
    237e:	8b 89       	ldd	r24, Y+19	; 0x13
    2380:	9c 89       	ldd	r25, Y+20	; 0x14
    2382:	98 8b       	std	Y+16, r25	; 0x10
    2384:	8f 87       	std	Y+15, r24	; 0x0f
    2386:	8f 85       	ldd	r24, Y+15	; 0x0f
    2388:	98 89       	ldd	r25, Y+16	; 0x10
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_VidPulseEnable+0xfa>
    238e:	98 8b       	std	Y+16, r25	; 0x10
    2390:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e8       	ldi	r26, 0x80	; 128
    23a2:	bf e3       	ldi	r27, 0x3F	; 63
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
    23a8:	ad 87       	std	Y+13, r26	; 0x0d
    23aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a ef       	ldi	r20, 0xFA	; 250
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8f 83       	std	Y+7, r24	; 0x07
    23c6:	98 87       	std	Y+8, r25	; 0x08
    23c8:	a9 87       	std	Y+9, r26	; 0x09
    23ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_VidPulseEnable+0x1be>
    2430:	88 ec       	ldi	r24, 0xC8	; 200
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_VidPulseEnable+0x1ac>
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <LCD_VidPulseEnable+0x1a0>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_VidPulseEnable+0x1e8>
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2480:	6c 96       	adiw	r28, 0x1c	; 28
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <LCD_VidInit>:
void LCD_VidInit(void)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	e8 97       	sbiw	r28, 0x38	; 56
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a8 e4       	ldi	r26, 0x48	; 72
    24ac:	b2 e4       	ldi	r27, 0x42	; 66
    24ae:	8d ab       	std	Y+53, r24	; 0x35
    24b0:	9e ab       	std	Y+54, r25	; 0x36
    24b2:	af ab       	std	Y+55, r26	; 0x37
    24b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6d a9       	ldd	r22, Y+53	; 0x35
    24b8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ba:	8f a9       	ldd	r24, Y+55	; 0x37
    24bc:	98 ad       	ldd	r25, Y+56	; 0x38
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	89 ab       	std	Y+49, r24	; 0x31
    24d0:	9a ab       	std	Y+50, r25	; 0x32
    24d2:	ab ab       	std	Y+51, r26	; 0x33
    24d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d6:	69 a9       	ldd	r22, Y+49	; 0x31
    24d8:	7a a9       	ldd	r23, Y+50	; 0x32
    24da:	8b a9       	ldd	r24, Y+51	; 0x33
    24dc:	9c a9       	ldd	r25, Y+52	; 0x34
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_VidInit+0x66>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    24f8:	69 a9       	ldd	r22, Y+49	; 0x31
    24fa:	7a a9       	ldd	r23, Y+50	; 0x32
    24fc:	8b a9       	ldd	r24, Y+51	; 0x33
    24fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6d a9       	ldd	r22, Y+53	; 0x35
    2512:	7e a9       	ldd	r23, Y+54	; 0x36
    2514:	8f a9       	ldd	r24, Y+55	; 0x37
    2516:	98 ad       	ldd	r25, Y+56	; 0x38
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	98 ab       	std	Y+48, r25	; 0x30
    2536:	8f a7       	std	Y+47, r24	; 0x2f
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_VidInit+0xc6>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e a7       	std	Y+46, r25	; 0x2e
    2540:	8d a7       	std	Y+45, r24	; 0x2d
    2542:	8d a5       	ldd	r24, Y+45	; 0x2d
    2544:	9e a5       	ldd	r25, Y+46	; 0x2e
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_VidInit+0xb4>
    254a:	9e a7       	std	Y+46, r25	; 0x2e
    254c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2550:	98 a9       	ldd	r25, Y+48	; 0x30
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8f a5       	ldd	r24, Y+47	; 0x2f
    255a:	98 a9       	ldd	r25, Y+48	; 0x30
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_VidInit+0xa8>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	69 a9       	ldd	r22, Y+49	; 0x31
    2564:	7a a9       	ldd	r23, Y+50	; 0x32
    2566:	8b a9       	ldd	r24, Y+51	; 0x33
    2568:	9c a9       	ldd	r25, Y+52	; 0x34
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	98 ab       	std	Y+48, r25	; 0x30
    2574:	8f a7       	std	Y+47, r24	; 0x2f
    2576:	8f a5       	ldd	r24, Y+47	; 0x2f
    2578:	98 a9       	ldd	r25, Y+48	; 0x30
    257a:	9c a7       	std	Y+44, r25	; 0x2c
    257c:	8b a7       	std	Y+43, r24	; 0x2b
    257e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2580:	9c a5       	ldd	r25, Y+44	; 0x2c
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_VidInit+0xf0>
    2586:	9c a7       	std	Y+44, r25	; 0x2c
    2588:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		/* END OF DISPLAY CLEAR */

#elif MODE==8
	  /*set direction*/
		DIO_VidSetPortDirection(LCD_DATA_PORT,0XFF);
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	6f ef       	ldi	r22, 0xFF	; 255
    258e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_VidSetPortDirection>
		DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	67 e0       	ldi	r22, 0x07	; 7
    2596:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <DIO_VidSetPortDirection>

		LCD_VidWriteCommend(0B00111000);//function set
    259a:	88 e3       	ldi	r24, 0x38	; 56
    259c:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e8       	ldi	r26, 0x80	; 128
    25a6:	bf e3       	ldi	r27, 0x3F	; 63
    25a8:	8f a3       	std	Y+39, r24	; 0x27
    25aa:	98 a7       	std	Y+40, r25	; 0x28
    25ac:	a9 a7       	std	Y+41, r26	; 0x29
    25ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6f a1       	ldd	r22, Y+39	; 0x27
    25b2:	78 a5       	ldd	r23, Y+40	; 0x28
    25b4:	89 a5       	ldd	r24, Y+41	; 0x29
    25b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a ef       	ldi	r20, 0xFA	; 250
    25be:	54 e4       	ldi	r21, 0x44	; 68
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8b a3       	std	Y+35, r24	; 0x23
    25ca:	9c a3       	std	Y+36, r25	; 0x24
    25cc:	ad a3       	std	Y+37, r26	; 0x25
    25ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25d0:	6b a1       	ldd	r22, Y+35	; 0x23
    25d2:	7c a1       	ldd	r23, Y+36	; 0x24
    25d4:	8d a1       	ldd	r24, Y+37	; 0x25
    25d6:	9e a1       	ldd	r25, Y+38	; 0x26
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <LCD_VidInit+0x160>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9a a3       	std	Y+34, r25	; 0x22
    25ee:	89 a3       	std	Y+33, r24	; 0x21
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <LCD_VidInit+0x1de>
	else if (__tmp > 65535)
    25f2:	6b a1       	ldd	r22, Y+35	; 0x23
    25f4:	7c a1       	ldd	r23, Y+36	; 0x24
    25f6:	8d a1       	ldd	r24, Y+37	; 0x25
    25f8:	9e a1       	ldd	r25, Y+38	; 0x26
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <LCD_VidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6f a1       	ldd	r22, Y+39	; 0x27
    260c:	78 a5       	ldd	r23, Y+40	; 0x28
    260e:	89 a5       	ldd	r24, Y+41	; 0x29
    2610:	9a a5       	ldd	r25, Y+42	; 0x2a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <LCD_VidInit+0x1c0>
    2634:	88 ec       	ldi	r24, 0xC8	; 200
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	98 a3       	std	Y+32, r25	; 0x20
    263a:	8f 8f       	std	Y+31, r24	; 0x1f
    263c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263e:	98 a1       	ldd	r25, Y+32	; 0x20
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_VidInit+0x1ae>
    2644:	98 a3       	std	Y+32, r25	; 0x20
    2646:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	89 a1       	ldd	r24, Y+33	; 0x21
    264a:	9a a1       	ldd	r25, Y+34	; 0x22
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9a a3       	std	Y+34, r25	; 0x22
    2650:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	89 a1       	ldd	r24, Y+33	; 0x21
    2654:	9a a1       	ldd	r25, Y+34	; 0x22
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <LCD_VidInit+0x1a2>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <LCD_VidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6b a1       	ldd	r22, Y+35	; 0x23
    265e:	7c a1       	ldd	r23, Y+36	; 0x24
    2660:	8d a1       	ldd	r24, Y+37	; 0x25
    2662:	9e a1       	ldd	r25, Y+38	; 0x26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
    2670:	89 a1       	ldd	r24, Y+33	; 0x21
    2672:	9a a1       	ldd	r25, Y+34	; 0x22
    2674:	9e 8f       	std	Y+30, r25	; 0x1e
    2676:	8d 8f       	std	Y+29, r24	; 0x1d
    2678:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_VidInit+0x1ea>
    2680:	9e 8f       	std	Y+30, r25	; 0x1e
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidWriteCommend(0B00001100);//screen on
    2684:	8c e0       	ldi	r24, 0x0C	; 12
    2686:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e8       	ldi	r26, 0x80	; 128
    2690:	bf e3       	ldi	r27, 0x3F	; 63
    2692:	89 8f       	std	Y+25, r24	; 0x19
    2694:	9a 8f       	std	Y+26, r25	; 0x1a
    2696:	ab 8f       	std	Y+27, r26	; 0x1b
    2698:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	69 8d       	ldd	r22, Y+25	; 0x19
    269c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a ef       	ldi	r20, 0xFA	; 250
    26a8:	54 e4       	ldi	r21, 0x44	; 68
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8d 8b       	std	Y+21, r24	; 0x15
    26b4:	9e 8b       	std	Y+22, r25	; 0x16
    26b6:	af 8b       	std	Y+23, r26	; 0x17
    26b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ba:	6d 89       	ldd	r22, Y+21	; 0x15
    26bc:	7e 89       	ldd	r23, Y+22	; 0x16
    26be:	8f 89       	ldd	r24, Y+23	; 0x17
    26c0:	98 8d       	ldd	r25, Y+24	; 0x18
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <LCD_VidInit+0x24a>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9c 8b       	std	Y+20, r25	; 0x14
    26d8:	8b 8b       	std	Y+19, r24	; 0x13
    26da:	3f c0       	rjmp	.+126    	; 0x275a <LCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    26dc:	6d 89       	ldd	r22, Y+21	; 0x15
    26de:	7e 89       	ldd	r23, Y+22	; 0x16
    26e0:	8f 89       	ldd	r24, Y+23	; 0x17
    26e2:	98 8d       	ldd	r25, Y+24	; 0x18
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <LCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	69 8d       	ldd	r22, Y+25	; 0x19
    26f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9c 8b       	std	Y+20, r25	; 0x14
    271a:	8b 8b       	std	Y+19, r24	; 0x13
    271c:	0f c0       	rjmp	.+30     	; 0x273c <LCD_VidInit+0x2aa>
    271e:	88 ec       	ldi	r24, 0xC8	; 200
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9a 8b       	std	Y+18, r25	; 0x12
    2724:	89 8b       	std	Y+17, r24	; 0x11
    2726:	89 89       	ldd	r24, Y+17	; 0x11
    2728:	9a 89       	ldd	r25, Y+18	; 0x12
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_VidInit+0x298>
    272e:	9a 8b       	std	Y+18, r25	; 0x12
    2730:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8b 89       	ldd	r24, Y+19	; 0x13
    2734:	9c 89       	ldd	r25, Y+20	; 0x14
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <LCD_VidInit+0x28c>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <LCD_VidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	6d 89       	ldd	r22, Y+21	; 0x15
    2748:	7e 89       	ldd	r23, Y+22	; 0x16
    274a:	8f 89       	ldd	r24, Y+23	; 0x17
    274c:	98 8d       	ldd	r25, Y+24	; 0x18
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	98 8b       	std	Y+16, r25	; 0x10
    2760:	8f 87       	std	Y+15, r24	; 0x0f
    2762:	8f 85       	ldd	r24, Y+15	; 0x0f
    2764:	98 89       	ldd	r25, Y+16	; 0x10
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_VidInit+0x2d4>
    276a:	98 8b       	std	Y+16, r25	; 0x10
    276c:	8f 87       	std	Y+15, r24	; 0x0f
	          _delay_ms(1);
		LCD_VidWriteCommend(0B00000001);//clear display
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e0       	ldi	r26, 0x00	; 0
    277a:	b0 e4       	ldi	r27, 0x40	; 64
    277c:	8b 87       	std	Y+11, r24	; 0x0b
    277e:	9c 87       	std	Y+12, r25	; 0x0c
    2780:	ad 87       	std	Y+13, r26	; 0x0d
    2782:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2784:	6b 85       	ldd	r22, Y+11	; 0x0b
    2786:	7c 85       	ldd	r23, Y+12	; 0x0c
    2788:	8d 85       	ldd	r24, Y+13	; 0x0d
    278a:	9e 85       	ldd	r25, Y+14	; 0x0e
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a ef       	ldi	r20, 0xFA	; 250
    2792:	54 e4       	ldi	r21, 0x44	; 68
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	8f 83       	std	Y+7, r24	; 0x07
    279e:	98 87       	std	Y+8, r25	; 0x08
    27a0:	a9 87       	std	Y+9, r26	; 0x09
    27a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a4:	6f 81       	ldd	r22, Y+7	; 0x07
    27a6:	78 85       	ldd	r23, Y+8	; 0x08
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <LCD_VidInit+0x334>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <LCD_VidInit+0x3b2>
	else if (__tmp > 65535)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	4c f5       	brge	.+82     	; 0x2830 <LCD_VidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <LCD_VidInit+0x394>
    2808:	88 ec       	ldi	r24, 0xC8	; 200
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <LCD_VidInit+0x382>
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <LCD_VidInit+0x376>
    282e:	14 c0       	rjmp	.+40     	; 0x2858 <LCD_VidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	6f 81       	ldd	r22, Y+7	; 0x07
    2832:	78 85       	ldd	r23, Y+8	; 0x08
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_VidInit+0x3be>
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
	          _delay_ms(2);
		LCD_VidWriteCommend(0B00000110);//Mode Set
    2858:	86 e0       	ldi	r24, 0x06	; 6
    285a:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000010);//Return Home
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2870:	e8 96       	adiw	r28, 0x38	; 56
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	0f 92       	push	r0
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	89 83       	std	Y+1, r24	; 0x01
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();	
#elif MODE==8
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN0,0);  //RS=0
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN1,0);  //RW=0
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	69 81       	ldd	r22, Y+1	; 0x01
    28a6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DIO_VidSetPortValue>

	LCD_VidPulseEnable();
    28aa:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_VidPulseEnable>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	6d 97       	sbiw	r28, 0x1d	; 29
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	8d 8f       	std	Y+29, r24	; 0x1d
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();
#elif MODE==8
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1);  //RS=0
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28e4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	62 e0       	ldi	r22, 0x02	; 2
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e8       	ldi	r26, 0x80	; 128
    28f8:	bf e3       	ldi	r27, 0x3F	; 63
    28fa:	89 8f       	std	Y+25, r24	; 0x19
    28fc:	9a 8f       	std	Y+26, r25	; 0x1a
    28fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2900:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	69 8d       	ldd	r22, Y+25	; 0x19
    2904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a ef       	ldi	r20, 0xFA	; 250
    2910:	54 e4       	ldi	r21, 0x44	; 68
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	8d 8b       	std	Y+21, r24	; 0x15
    291c:	9e 8b       	std	Y+22, r25	; 0x16
    291e:	af 8b       	std	Y+23, r26	; 0x17
    2920:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2922:	6d 89       	ldd	r22, Y+21	; 0x15
    2924:	7e 89       	ldd	r23, Y+22	; 0x16
    2926:	8f 89       	ldd	r24, Y+23	; 0x17
    2928:	98 8d       	ldd	r25, Y+24	; 0x18
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9c 8b       	std	Y+20, r25	; 0x14
    2940:	8b 8b       	std	Y+19, r24	; 0x13
    2942:	3f c0       	rjmp	.+126    	; 0x29c2 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    2944:	6d 89       	ldd	r22, Y+21	; 0x15
    2946:	7e 89       	ldd	r23, Y+22	; 0x16
    2948:	8f 89       	ldd	r24, Y+23	; 0x17
    294a:	98 8d       	ldd	r25, Y+24	; 0x18
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	4c f5       	brge	.+82     	; 0x29ae <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	69 8d       	ldd	r22, Y+25	; 0x19
    295e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <LCD_VidWriteData+0xee>
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9a 8b       	std	Y+18, r25	; 0x12
    298c:	89 8b       	std	Y+17, r24	; 0x11
    298e:	89 89       	ldd	r24, Y+17	; 0x11
    2990:	9a 89       	ldd	r25, Y+18	; 0x12
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_VidWriteData+0xdc>
    2996:	9a 8b       	std	Y+18, r25	; 0x12
    2998:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9c 8b       	std	Y+20, r25	; 0x14
    29a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8b 89       	ldd	r24, Y+19	; 0x13
    29a6:	9c 89       	ldd	r25, Y+20	; 0x14
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <LCD_VidWriteData+0xd0>
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	6d 89       	ldd	r22, Y+21	; 0x15
    29b0:	7e 89       	ldd	r23, Y+22	; 0x16
    29b2:	8f 89       	ldd	r24, Y+23	; 0x17
    29b4:	98 8d       	ldd	r25, Y+24	; 0x18
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9c 8b       	std	Y+20, r25	; 0x14
    29c0:	8b 8b       	std	Y+19, r24	; 0x13
    29c2:	8b 89       	ldd	r24, Y+19	; 0x13
    29c4:	9c 89       	ldd	r25, Y+20	; 0x14
    29c6:	98 8b       	std	Y+16, r25	; 0x10
    29c8:	8f 87       	std	Y+15, r24	; 0x0f
    29ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    29cc:	98 89       	ldd	r25, Y+16	; 0x10
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_VidWriteData+0x118>
    29d2:	98 8b       	std	Y+16, r25	; 0x10
    29d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	62 e0       	ldi	r22, 0x02	; 2
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	8b 87       	std	Y+11, r24	; 0x0b
    29ea:	9c 87       	std	Y+12, r25	; 0x0c
    29ec:	ad 87       	std	Y+13, r26	; 0x0d
    29ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a ef       	ldi	r20, 0xFA	; 250
    29fe:	54 e4       	ldi	r21, 0x44	; 68
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8f 83       	std	Y+7, r24	; 0x07
    2a0a:	98 87       	std	Y+8, r25	; 0x08
    2a0c:	a9 87       	std	Y+9, r26	; 0x09
    2a0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_VidWriteData+0x1dc>
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c 83       	std	Y+4, r25	; 0x04
    2a7a:	8b 83       	std	Y+3, r24	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_VidWriteData+0x1ca>
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_VidWriteData+0x1be>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_VidWriteData+0x206>
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2ac4:	6d 96       	adiw	r28, 0x1d	; 29
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <LCD_VidWriteString>:

void LCD_VidWriteString(u8 *ptr)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <LCD_VidWriteString+0x6>
    2adc:	0f 92       	push	r0
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;i<100;i++)
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	19 c0       	rjmp	.+50     	; 0x2b1c <LCD_VidWriteString+0x46>
	{
		if(ptr[i]=='\0')
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	9b 81       	ldd	r25, Y+3	; 0x03
    2af4:	fc 01       	movw	r30, r24
    2af6:	e2 0f       	add	r30, r18
    2af8:	f3 1f       	adc	r31, r19
    2afa:	80 81       	ld	r24, Z
    2afc:	88 23       	and	r24, r24
    2afe:	89 f0       	breq	.+34     	; 0x2b22 <LCD_VidWriteString+0x4c>
		    {
		    	break;
		    }
	LCD_VidWriteData(ptr[i]);
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	80 81       	ld	r24, Z
    2b12:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>

}

void LCD_VidWriteString(u8 *ptr)
{
	for(u8 i=0;i<100;i++)
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	8f 5f       	subi	r24, 0xFF	; 255
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	84 36       	cpi	r24, 0x64	; 100
    2b20:	20 f3       	brcs	.-56     	; 0x2aea <LCD_VidWriteString+0x14>
		    }
	LCD_VidWriteData(ptr[i]);

	}

}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u32 LOC_u32num)
{
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	0f 93       	push	r16
    2b34:	1f 93       	push	r17
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	2c 97       	sbiw	r28, 0x0c	; 12
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	69 87       	std	Y+9, r22	; 0x09
    2b4c:	7a 87       	std	Y+10, r23	; 0x0a
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
u32 revrese=0;
    2b52:	1d 82       	std	Y+5, r1	; 0x05
    2b54:	1e 82       	std	Y+6, r1	; 0x06
    2b56:	1f 82       	std	Y+7, r1	; 0x07
    2b58:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2b5a:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b62:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	a1 05       	cpc	r26, r1
    2b68:	b1 05       	cpc	r27, r1
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <LCD_VidWriteNumber+0x40>
    2b6c:	46 c0       	rjmp	.+140    	; 0x2bfa <LCD_VidWriteNumber+0xcc>
{
	LCD_VidWriteData(48);
    2b6e:	80 e3       	ldi	r24, 0x30	; 48
    2b70:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>
    2b74:	42 c0       	rjmp	.+132    	; 0x2bfa <LCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	af 81       	ldd	r26, Y+7	; 0x07
    2b7c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b7e:	2a e0       	ldi	r18, 0x0A	; 10
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsi3>
    2b8e:	7b 01       	movw	r14, r22
    2b90:	8c 01       	movw	r16, r24
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b98:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b9a:	2a e0       	ldi	r18, 0x0A	; 10
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	8e 0d       	add	r24, r14
    2bb0:	9f 1d       	adc	r25, r15
    2bb2:	a0 1f       	adc	r26, r16
    2bb4:	b1 1f       	adc	r27, r17
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	af 83       	std	Y+7, r26	; 0x07
    2bbc:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	af 81       	ldd	r26, Y+7	; 0x07
    2bc4:	b8 85       	ldd	r27, Y+8	; 0x08
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	a1 05       	cpc	r26, r1
    2bca:	b1 05       	cpc	r27, r1
    2bcc:	21 f4       	brne	.+8      	; 0x2bd6 <LCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2bce:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bdc:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bde:	2a e0       	ldi	r18, 0x0A	; 10
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2bee:	da 01       	movw	r26, r20
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	89 87       	std	Y+9, r24	; 0x09
    2bf4:	9a 87       	std	Y+10, r25	; 0x0a
    2bf6:	ab 87       	std	Y+11, r26	; 0x0b
    2bf8:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_VidWriteData(48);
}
while(LOC_u32num>0)
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c00:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	a1 05       	cpc	r26, r1
    2c06:	b1 05       	cpc	r27, r1
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <LCD_VidWriteNumber+0xde>
    2c0a:	b5 cf       	rjmp	.-150    	; 0x2b76 <LCD_VidWriteNumber+0x48>
    2c0c:	25 c0       	rjmp	.+74     	; 0x2c58 <LCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	af 81       	ldd	r26, Y+7	; 0x07
    2c14:	b8 85       	ldd	r27, Y+8	; 0x08
    2c16:	2a e0       	ldi	r18, 0x0A	; 10
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(res+48);
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	80 5d       	subi	r24, 0xD0	; 208
    2c30:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>
	revrese=revrese/10;
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	af 81       	ldd	r26, Y+7	; 0x07
    2c3a:	b8 85       	ldd	r27, Y+8	; 0x08
    2c3c:	2a e0       	ldi	r18, 0x0A	; 10
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	bc 01       	movw	r22, r24
    2c46:	cd 01       	movw	r24, r26
    2c48:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    2c4c:	da 01       	movw	r26, r20
    2c4e:	c9 01       	movw	r24, r18
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	af 83       	std	Y+7, r26	; 0x07
    2c56:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	af 81       	ldd	r26, Y+7	; 0x07
    2c5e:	b8 85       	ldd	r27, Y+8	; 0x08
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	a1 05       	cpc	r26, r1
    2c64:	b1 05       	cpc	r27, r1
    2c66:	99 f6       	brne	.-90     	; 0x2c0e <LCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	88 23       	and	r24, r24
    2c6c:	61 f4       	brne	.+24     	; 0x2c86 <LCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2c6e:	19 82       	std	Y+1, r1	; 0x01
    2c70:	06 c0       	rjmp	.+12     	; 0x2c7e <LCD_VidWriteNumber+0x150>
	{
LCD_VidWriteData(48);
    2c72:	80 e3       	ldi	r24, 0x30	; 48
    2c74:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	8f 5f       	subi	r24, 0xFF	; 255
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	99 81       	ldd	r25, Y+1	; 0x01
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	98 17       	cp	r25, r24
    2c84:	b0 f3       	brcs	.-20     	; 0x2c72 <LCD_VidWriteNumber+0x144>
	{
LCD_VidWriteData(48);
	}
}
}
    2c86:	2c 96       	adiw	r28, 0x0c	; 12
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	08 95       	ret

00002ca0 <LCD_GoToXY>:

void LCD_GoToXY(u8 row,u8 col)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <LCD_GoToXY+0x6>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	88 23       	and	r24, r24
    2cb2:	29 f4       	brne	.+10     	; 0x2cbe <LCD_GoToXY+0x1e>
	{
		LCD_VidWriteCommend(128+col);
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	80 58       	subi	r24, 0x80	; 128
    2cb8:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
    2cbc:	07 c0       	rjmp	.+14     	; 0x2ccc <LCD_GoToXY+0x2c>
	}
	else if (row==1)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	21 f4       	brne	.+8      	; 0x2ccc <LCD_GoToXY+0x2c>
	{
		LCD_VidWriteCommend(192+col);
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	80 54       	subi	r24, 0x40	; 64
    2cc8:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
	}
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <LCD_CONSTANT>:

void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
    2cd6:	0f 93       	push	r16
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	27 97       	sbiw	r28, 0x07	; 7
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	9b 83       	std	Y+3, r25	; 0x03
    2cee:	8a 83       	std	Y+2, r24	; 0x02
    2cf0:	6c 83       	std	Y+4, r22	; 0x04
    2cf2:	4d 83       	std	Y+5, r20	; 0x05
    2cf4:	2e 83       	std	Y+6, r18	; 0x06
    2cf6:	0f 83       	std	Y+7, r16	; 0x07
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	80 5c       	subi	r24, 0xC0	; 192
    2cfc:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
		/*for face*/
for(u8 i=0;i<8;i++)
    2d00:	19 82       	std	Y+1, r1	; 0x01
    2d02:	0e c0       	rjmp	.+28     	; 0x2d20 <LCD_CONSTANT+0x4a>
	{
	LCD_VidWriteData(Arr[i]);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e2 0f       	add	r30, r18
    2d12:	f3 1f       	adc	r31, r19
    2d14:	80 81       	ld	r24, Z
    2d16:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>
void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
		/*for face*/
for(u8 i=0;i<8;i++)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	88 30       	cpi	r24, 0x08	; 8
    2d24:	78 f3       	brcs	.-34     	; 0x2d04 <LCD_CONSTANT+0x2e>
	{
	LCD_VidWriteData(Arr[i]);
	}

LCD_GoToXY(Row,Col);
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	6e 81       	ldd	r22, Y+6	; 0x06
    2d2a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_GoToXY>
LCD_VidWriteData(Data);
    2d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d30:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <LCD_VidWriteData>
}
    2d34:	27 96       	adiw	r28, 0x07	; 7
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <LCD_CLEAR>:
void LCD_CLEAR(u8 Row,u8 start,u8 end)
{
    2d48:	0f 93       	push	r16
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	2b 97       	sbiw	r28, 0x0b	; 11
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	89 87       	std	Y+9, r24	; 0x09
    2d60:	6a 87       	std	Y+10, r22	; 0x0a
    2d62:	4b 87       	std	Y+11, r20	; 0x0b
	u8 empty[8]={0,0,0,0,0,0,0,0};
    2d64:	88 e0       	ldi	r24, 0x08	; 8
    2d66:	fe 01       	movw	r30, r28
    2d68:	31 96       	adiw	r30, 0x01	; 1
    2d6a:	df 01       	movw	r26, r30
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	1d 92       	st	X+, r1
    2d70:	9a 95       	dec	r25
    2d72:	e9 f7       	brne	.-6      	; 0x2d6e <LCD_CLEAR+0x26>
	while(1)
	{
		LCD_CONSTANT(empty,0,Row,start,0);
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	49 85       	ldd	r20, Y+9	; 0x09
    2d7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d7e:	00 e0       	ldi	r16, 0x00	; 0
    2d80:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_CONSTANT>
		  start++;
    2d84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8a 87       	std	Y+10, r24	; 0x0a
		  if(start==end)
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d8e:	98 17       	cp	r25, r24
    2d90:	89 f7       	brne	.-30     	; 0x2d74 <LCD_CLEAR+0x2c>
			  break;
		  }
	}


}
    2d92:	2b 96       	adiw	r28, 0x0b	; 11
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	0f 91       	pop	r16
    2da4:	08 95       	ret

00002da6 <main>:
#include "util/delay.h"



void main()
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	6e 97       	sbiw	r28, 0x1e	; 30
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinDirection(DIO_PORTA,PIN0,OUTPUT);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,PIN0,INPUT);
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTD,PIN1,OUTPUT);
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
    2dd4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <DIO_VidSetPinDirection>

	u8 GetData=0;
    2dd8:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 ptr=0;
    2dda:	1d 8e       	std	Y+29, r1	; 0x1d
	/*UART INIT*/
	UART_INIT();
    2ddc:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_INIT>
	/*LCD INIT*/
	LCD_VidInit();
    2de0:	0e 94 49 12 	call	0x2492	; 0x2492 <LCD_VidInit>
	LCD_VidWriteString(("Welcome Elsayed"));
    2de4:	80 e6       	ldi	r24, 0x60	; 96
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_VidWriteString>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	aa e7       	ldi	r26, 0x7A	; 122
    2df2:	b4 e4       	ldi	r27, 0x44	; 68
    2df4:	89 8f       	std	Y+25, r24	; 0x19
    2df6:	9a 8f       	std	Y+26, r25	; 0x1a
    2df8:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a ef       	ldi	r20, 0xFA	; 250
    2e0a:	54 e4       	ldi	r21, 0x44	; 68
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8d 8b       	std	Y+21, r24	; 0x15
    2e16:	9e 8b       	std	Y+22, r25	; 0x16
    2e18:	af 8b       	std	Y+23, r26	; 0x17
    2e1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	98 8d       	ldd	r25, Y+24	; 0x18
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <main+0x98>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <main+0x116>
	else if (__tmp > 65535)
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	69 8d       	ldd	r22, Y+25	; 0x19
    2e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <main+0xf8>
    2e80:	88 ec       	ldi	r24, 0xC8	; 200
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9a 8b       	std	Y+18, r25	; 0x12
    2e86:	89 8b       	std	Y+17, r24	; 0x11
    2e88:	89 89       	ldd	r24, Y+17	; 0x11
    2e8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <main+0xe6>
    2e90:	9a 8b       	std	Y+18, r25	; 0x12
    2e92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <main+0xda>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2eac:	8f 89       	ldd	r24, Y+23	; 0x17
    2eae:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec0:	98 8b       	std	Y+16, r25	; 0x10
    2ec2:	8f 87       	std	Y+15, r24	; 0x0f
    2ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec6:	98 89       	ldd	r25, Y+16	; 0x10
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <main+0x122>
    2ecc:	98 8b       	std	Y+16, r25	; 0x10
    2ece:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_VidWriteCommend(1);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	0e 94 41 14 	call	0x2882	; 0x2882 <LCD_VidWriteCommend>
	while(1)
	{
		GetData=UART_VoidGetChar();
    2ed6:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_VoidGetChar>
    2eda:	8e 8f       	std	Y+30, r24	; 0x1e
		if(GetData=='3')
    2edc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ede:	83 33       	cpi	r24, 0x33	; 51
    2ee0:	49 f4       	brne	.+18     	; 0x2ef4 <main+0x14e>
		{
			DIO_VidSetPinValue(DIO_PORTA,PIN0,HIGH);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
			UART_VoidSendChar(GetData);
    2eec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eee:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_VoidSendChar>
    2ef2:	08 c0       	rjmp	.+16     	; 0x2f04 <main+0x15e>
		}
		else if(GetData=='c')
    2ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef6:	83 36       	cpi	r24, 0x63	; 99
    2ef8:	29 f4       	brne	.+10     	; 0x2f04 <main+0x15e>
		{
			DIO_VidSetPinValue(DIO_PORTA,PIN0,LOW);
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <DIO_VidSetPinValue>
		}
		UART_VoidSendChar(GetData);
    2f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f06:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_VoidSendChar>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a8 e4       	ldi	r26, 0x48	; 72
    2f10:	b3 e4       	ldi	r27, 0x43	; 67
    2f12:	8b 87       	std	Y+11, r24	; 0x0b
    2f14:	9c 87       	std	Y+12, r25	; 0x0c
    2f16:	ad 87       	std	Y+13, r26	; 0x0d
    2f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8f 83       	std	Y+7, r24	; 0x07
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	a9 87       	std	Y+9, r26	; 0x09
    2f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <main+0x1b6>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <main+0x234>
	else if (__tmp > 65535)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <main+0x216>
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <main+0x204>
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <main+0x1f8>
    2fc4:	88 cf       	rjmp	.-240    	; 0x2ed6 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	78 85       	ldd	r23, Y+8	; 0x08
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <main+0x240>
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
    2fee:	73 cf       	rjmp	.-282    	; 0x2ed6 <main+0x130>

00002ff0 <__mulsi3>:
    2ff0:	62 9f       	mul	r22, r18
    2ff2:	d0 01       	movw	r26, r0
    2ff4:	73 9f       	mul	r23, r19
    2ff6:	f0 01       	movw	r30, r0
    2ff8:	82 9f       	mul	r24, r18
    2ffa:	e0 0d       	add	r30, r0
    2ffc:	f1 1d       	adc	r31, r1
    2ffe:	64 9f       	mul	r22, r20
    3000:	e0 0d       	add	r30, r0
    3002:	f1 1d       	adc	r31, r1
    3004:	92 9f       	mul	r25, r18
    3006:	f0 0d       	add	r31, r0
    3008:	83 9f       	mul	r24, r19
    300a:	f0 0d       	add	r31, r0
    300c:	74 9f       	mul	r23, r20
    300e:	f0 0d       	add	r31, r0
    3010:	65 9f       	mul	r22, r21
    3012:	f0 0d       	add	r31, r0
    3014:	99 27       	eor	r25, r25
    3016:	72 9f       	mul	r23, r18
    3018:	b0 0d       	add	r27, r0
    301a:	e1 1d       	adc	r30, r1
    301c:	f9 1f       	adc	r31, r25
    301e:	63 9f       	mul	r22, r19
    3020:	b0 0d       	add	r27, r0
    3022:	e1 1d       	adc	r30, r1
    3024:	f9 1f       	adc	r31, r25
    3026:	bd 01       	movw	r22, r26
    3028:	cf 01       	movw	r24, r30
    302a:	11 24       	eor	r1, r1
    302c:	08 95       	ret

0000302e <__udivmodsi4>:
    302e:	a1 e2       	ldi	r26, 0x21	; 33
    3030:	1a 2e       	mov	r1, r26
    3032:	aa 1b       	sub	r26, r26
    3034:	bb 1b       	sub	r27, r27
    3036:	fd 01       	movw	r30, r26
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <__udivmodsi4_ep>

0000303a <__udivmodsi4_loop>:
    303a:	aa 1f       	adc	r26, r26
    303c:	bb 1f       	adc	r27, r27
    303e:	ee 1f       	adc	r30, r30
    3040:	ff 1f       	adc	r31, r31
    3042:	a2 17       	cp	r26, r18
    3044:	b3 07       	cpc	r27, r19
    3046:	e4 07       	cpc	r30, r20
    3048:	f5 07       	cpc	r31, r21
    304a:	20 f0       	brcs	.+8      	; 0x3054 <__udivmodsi4_ep>
    304c:	a2 1b       	sub	r26, r18
    304e:	b3 0b       	sbc	r27, r19
    3050:	e4 0b       	sbc	r30, r20
    3052:	f5 0b       	sbc	r31, r21

00003054 <__udivmodsi4_ep>:
    3054:	66 1f       	adc	r22, r22
    3056:	77 1f       	adc	r23, r23
    3058:	88 1f       	adc	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	1a 94       	dec	r1
    305e:	69 f7       	brne	.-38     	; 0x303a <__udivmodsi4_loop>
    3060:	60 95       	com	r22
    3062:	70 95       	com	r23
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	9b 01       	movw	r18, r22
    306a:	ac 01       	movw	r20, r24
    306c:	bd 01       	movw	r22, r26
    306e:	cf 01       	movw	r24, r30
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <_exit>:
    30e0:	f8 94       	cli

000030e2 <__stop_program>:
    30e2:	ff cf       	rjmp	.-2      	; 0x30e2 <__stop_program>
