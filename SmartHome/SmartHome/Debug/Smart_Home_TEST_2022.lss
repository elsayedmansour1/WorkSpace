
Smart_Home_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000321a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000321a  000032ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800094  00800094  000032e2  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001452  00000000  00000000  00006674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b658  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_1>
       8:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_2>
       c:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <main>
      8a:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWSR,1);
     b4e:	a1 e2       	ldi	r26, 0x21	; 33
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e2       	ldi	r30, 0x21	; 33
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     b5c:	a1 e2       	ldi	r26, 0x21	; 33
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e1 e2       	ldi	r30, 0x21	; 33
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWBR = 12;
     b6a:	e0 e2       	ldi	r30, 0x20	; 32
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8c e0       	ldi	r24, 0x0C	; 12
     b70:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     b72:	a6 e5       	ldi	r26, 0x56	; 86
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e5       	ldi	r30, 0x56	; 86
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 64       	ori	r24, 0x40	; 64
     b7e:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     b80:	a6 e5       	ldi	r26, 0x56	; 86
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e5       	ldi	r30, 0x56	; 86
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	8c 93       	st	X, r24
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <TWI_u8SlaveInit>:

void   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	0f 92       	push	r0
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8ErrorState = STD_TYPES_OK;
	/* Set Slave Adress IN TWAR REG */
	TWAR = Copy_u8SlaveAddress << 1;
     ba0:	e2 e2       	ldi	r30, 0x22	; 34
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	88 0f       	add	r24, r24
     ba8:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     baa:	a6 e5       	ldi	r26, 0x56	; 86
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e6 e5       	ldi	r30, 0x56	; 86
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 64       	ori	r24, 0x40	; 64
     bb6:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     bb8:	a6 e5       	ldi	r26, 0x56	; 86
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e6 e5       	ldi	r30, 0x56	; 86
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	84 60       	ori	r24, 0x04	; 4
     bc4:	8c 93       	st	X, r24
}
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     bdc:	a6 e5       	ldi	r26, 0x56	; 86
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e6 e5       	ldi	r30, 0x56	; 86
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     bea:	a6 e5       	ldi	r26, 0x56	; 86
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e6 e5       	ldi	r30, 0x56	; 86
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 68       	ori	r24, 0x80	; 128
     bf6:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     bf8:	e6 e5       	ldi	r30, 0x56	; 86
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	88 23       	and	r24, r24
     c00:	dc f7       	brge	.-10     	; 0xbf8 <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x08 )
     c02:	e1 e2       	ldi	r30, 0x21	; 33
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	88 7f       	andi	r24, 0xF8	; 248
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	88 30       	cpi	r24, 0x08	; 8
     c12:	91 05       	cpc	r25, r1
     c14:	11 f0       	breq	.+4      	; 0xc1a <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     c32:	a6 e5       	ldi	r26, 0x56	; 86
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e6 e5       	ldi	r30, 0x56	; 86
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	80 62       	ori	r24, 0x20	; 32
     c3e:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     c40:	a6 e5       	ldi	r26, 0x56	; 86
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e6 e5       	ldi	r30, 0x56	; 86
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 68       	ori	r24, 0x80	; 128
     c4c:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     c4e:	e6 e5       	ldi	r30, 0x56	; 86
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	dc f7       	brge	.-10     	; 0xc4e <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x10 )
     c58:	e1 e2       	ldi	r30, 0x21	; 33
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	88 7f       	andi	r24, 0xF8	; 248
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	80 31       	cpi	r24, 0x10	; 16
     c68:	91 05       	cpc	r25, r1
     c6a:	11 f0       	breq	.+4      	; 0xc70 <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c70:	89 81       	ldd	r24, Y+1	; 0x01
}
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <TWI_enuSendSlaveWithWrite+0x6>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     c8a:	e3 e2       	ldi	r30, 0x23	; 35
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	88 0f       	add	r24, r24
     c92:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
     c94:	a3 e2       	ldi	r26, 0x23	; 35
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e3 e2       	ldi	r30, 0x23	; 35
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     ca2:	a6 e5       	ldi	r26, 0x56	; 86
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e6 e5       	ldi	r30, 0x56	; 86
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8f 7d       	andi	r24, 0xDF	; 223
     cae:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     cb0:	a6 e5       	ldi	r26, 0x56	; 86
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e6 e5       	ldi	r30, 0x56	; 86
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	dc f7       	brge	.-10     	; 0xcbe <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x18 )
     cc8:	e1 e2       	ldi	r30, 0x21	; 33
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	88 7f       	andi	r24, 0xF8	; 248
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	88 31       	cpi	r24, 0x18	; 24
     cd8:	91 05       	cpc	r25, r1
     cda:	11 f0       	breq	.+4      	; 0xce0 <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <TWI_enuSendSlaveWithRead+0x6>
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     cfc:	e3 e2       	ldi	r30, 0x23	; 35
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	88 0f       	add	r24, r24
     d04:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
     d06:	a3 e2       	ldi	r26, 0x23	; 35
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e2       	ldi	r30, 0x23	; 35
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	81 60       	ori	r24, 0x01	; 1
     d12:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     d14:	a6 e5       	ldi	r26, 0x56	; 86
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e6 e5       	ldi	r30, 0x56	; 86
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 7d       	andi	r24, 0xDF	; 223
     d20:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     d22:	a6 e5       	ldi	r26, 0x56	; 86
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e5       	ldi	r30, 0x56	; 86
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     d30:	e6 e5       	ldi	r30, 0x56	; 86
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 23       	and	r24, r24
     d38:	dc f7       	brge	.-10     	; 0xd30 <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x40 )
     d3a:	e1 e2       	ldi	r30, 0x21	; 33
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	88 7f       	andi	r24, 0xF8	; 248
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	80 34       	cpi	r24, 0x40	; 64
     d4a:	91 05       	cpc	r25, r1
     d4c:	11 f0       	breq	.+4      	; 0xd52 <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <TWI_enuSendDataByte+0x6>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWDR = Copy_u8Data;
     d6e:	e3 e2       	ldi	r30, 0x23	; 35
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWCR,7);
     d76:	a6 e5       	ldi	r26, 0x56	; 86
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e5       	ldi	r30, 0x56	; 86
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     d84:	e6 e5       	ldi	r30, 0x56	; 86
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	dc f7       	brge	.-10     	; 0xd84 <TWI_enuSendDataByte+0x26>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x28 )
     d8e:	e1 e2       	ldi	r30, 0x21	; 33
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 7f       	andi	r24, 0xF8	; 248
     d9a:	90 70       	andi	r25, 0x00	; 0
     d9c:	88 32       	cpi	r24, 0x28	; 40
     d9e:	91 05       	cpc	r25, r1
     da0:	11 f0       	breq	.+4      	; 0xda6 <TWI_enuSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <TWI_enuReceiveDataByte+0x6>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	9b 81       	ldd	r25, Y+3	; 0x03
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	01 f1       	breq	.+64     	; 0xe0e <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWCR,7);
     dce:	a6 e5       	ldi	r26, 0x56	; 86
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWCR,7)));
     ddc:	e6 e5       	ldi	r30, 0x56	; 86
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 23       	and	r24, r24
     de4:	dc f7       	brge	.-10     	; 0xddc <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWSR & 0xF8) != 0x50 )
     de6:	e1 e2       	ldi	r30, 0x21	; 33
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	88 7f       	andi	r24, 0xF8	; 248
     df2:	90 70       	andi	r25, 0x00	; 0
     df4:	80 35       	cpi	r24, 0x50	; 80
     df6:	91 05       	cpc	r25, r1
     df8:	19 f0       	breq	.+6      	; 0xe00 <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWDR;
     e00:	e3 e2       	ldi	r30, 0x23	; 35
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	ea 81       	ldd	r30, Y+2	; 0x02
     e08:	fb 81       	ldd	r31, Y+3	; 0x03
     e0a:	80 83       	st	Z, r24
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWCR,4);
     e28:	a6 e5       	ldi	r26, 0x56	; 86
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e6 e5       	ldi	r30, 0x56	; 86
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     e36:	a6 e5       	ldi	r26, 0x56	; 86
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e5       	ldi	r30, 0x56	; 86
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
     e6e:	af e5       	ldi	r26, 0x5F	; 95
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ef e5       	ldi	r30, 0x5F	; 95
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8f 77       	andi	r24, 0x7F	; 127
     e7a:	8c 93       	st	X, r24
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <INT0_SetCallBack+0x6>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	90 93 95 00 	sts	0x0095, r25
     e98:	80 93 94 00 	sts	0x0094, r24
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <INT1_SetCallBack+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	90 93 97 00 	sts	0x0097, r25
     ebc:	80 93 96 00 	sts	0x0096, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <INT2_SetCallBack+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	90 93 99 00 	sts	0x0099, r25
     ee0:	80 93 98 00 	sts	0x0098, r24
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <__vector_1>:
ISR(__vector_1)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
     f18:	80 91 94 00 	lds	r24, 0x0094
     f1c:	90 91 95 00 	lds	r25, 0x0095
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	29 f0       	breq	.+10     	; 0xf2e <__vector_1+0x40>
	{
		GPFunc0();
     f24:	e0 91 94 00 	lds	r30, 0x0094
     f28:	f0 91 95 00 	lds	r31, 0x0095
     f2c:	09 95       	icall
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_2>:
ISR(__vector_2)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	ef 93       	push	r30
     f74:	ff 93       	push	r31
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
     f7e:	80 91 96 00 	lds	r24, 0x0096
     f82:	90 91 97 00 	lds	r25, 0x0097
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	29 f0       	breq	.+10     	; 0xf94 <__vector_2+0x40>
	{
		GPFunc1();
     f8a:	e0 91 96 00 	lds	r30, 0x0096
     f8e:	f0 91 97 00 	lds	r31, 0x0097
     f92:	09 95       	icall
	}
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_3>:
ISR(__vector_3)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
     fe4:	80 91 98 00 	lds	r24, 0x0098
     fe8:	90 91 99 00 	lds	r25, 0x0099
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	29 f0       	breq	.+10     	; 0xffa <__vector_3+0x40>
	{
		GPFunc2();
     ff0:	e0 91 98 00 	lds	r30, 0x0098
     ff4:	f0 91 99 00 	lds	r31, 0x0099
     ff8:	09 95       	icall
	}
}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	81 60       	ori	r24, 0x01	; 1
    1042:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	8c 93       	st	X, r24
	#endif
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8b 7f       	andi	r24, 0xFB	; 251
    107a:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e5       	ldi	r30, 0x55	; 85
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 60       	ori	r24, 0x08	; 8
    1088:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1098:	ab e5       	ldi	r26, 0x5B	; 91
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e5       	ldi	r30, 0x5B	; 91
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 62       	ori	r24, 0x20	; 32
    10a4:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    10a6:	a4 e5       	ldi	r26, 0x54	; 84
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e4 e5       	ldi	r30, 0x54	; 84
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	27 97       	sbiw	r28, 0x07	; 7
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	6a 83       	std	Y+2, r22	; 0x02
    10d2:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <DIO_VidSetPinDirection+0x22>
    10da:	6f c0       	rjmp	.+222    	; 0x11ba <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3f 83       	std	Y+7, r19	; 0x07
    10e4:	2e 83       	std	Y+6, r18	; 0x06
    10e6:	8e 81       	ldd	r24, Y+6	; 0x06
    10e8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	49 f1       	breq	.+82     	; 0x1142 <DIO_VidSetPinDirection+0x88>
    10f0:	2e 81       	ldd	r18, Y+6	; 0x06
    10f2:	3f 81       	ldd	r19, Y+7	; 0x07
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <DIO_VidSetPinDirection+0x4a>
    10fa:	8e 81       	ldd	r24, Y+6	; 0x06
    10fc:	9f 81       	ldd	r25, Y+7	; 0x07
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <DIO_VidSetPinDirection+0x60>
    1102:	d2 c0       	rjmp	.+420    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
    1104:	2e 81       	ldd	r18, Y+6	; 0x06
    1106:	3f 81       	ldd	r19, Y+7	; 0x07
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	71 f1       	breq	.+92     	; 0x116a <DIO_VidSetPinDirection+0xb0>
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	9f 81       	ldd	r25, Y+7	; 0x07
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	e9 f1       	breq	.+122    	; 0x1192 <DIO_VidSetPinDirection+0xd8>
    1118:	c7 c0       	rjmp	.+398    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    111a:	aa e3       	ldi	r26, 0x3A	; 58
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_VidSetPinDirection+0x7e>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_VidSetPinDirection+0x7a>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	b3 c0       	rjmp	.+358    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    1142:	a7 e3       	ldi	r26, 0x37	; 55
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e7 e3       	ldi	r30, 0x37	; 55
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_VidSetPinDirection+0xa6>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_VidSetPinDirection+0xa2>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	9f c0       	rjmp	.+318    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    116a:	a4 e3       	ldi	r26, 0x34	; 52
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_VidSetPinDirection+0xce>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_VidSetPinDirection+0xca>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	8b c0       	rjmp	.+278    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_VidSetPinDirection+0xf6>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_VidSetPinDirection+0xf2>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	77 c0       	rjmp	.+238    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <DIO_VidSetPinDirection+0x108>
    11c0:	73 c0       	rjmp	.+230    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	59 f1       	breq	.+86     	; 0x122c <DIO_VidSetPinDirection+0x172>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_VidSetPinDirection+0x130>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f0       	breq	.+26     	; 0x1202 <DIO_VidSetPinDirection+0x148>
    11e8:	5f c0       	rjmp	.+190    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	89 f1       	breq	.+98     	; 0x1256 <DIO_VidSetPinDirection+0x19c>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_VidSetPinDirection+0x146>
    11fe:	40 c0       	rjmp	.+128    	; 0x1280 <DIO_VidSetPinDirection+0x1c6>
    1200:	53 c0       	rjmp	.+166    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1202:	aa e3       	ldi	r26, 0x3A	; 58
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_VidSetPinDirection+0x166>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_VidSetPinDirection+0x162>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	3e c0       	rjmp	.+124    	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    122c:	a7 e3       	ldi	r26, 0x37	; 55
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e7 e3       	ldi	r30, 0x37	; 55
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_VidSetPinDirection+0x190>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_VidSetPinDirection+0x18c>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	29 c0       	rjmp	.+82     	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1256:	a4 e3       	ldi	r26, 0x34	; 52
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_VidSetPinDirection+0x1ba>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_VidSetPinDirection+0x1b6>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1280:	a1 e3       	ldi	r26, 0x31	; 49
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e1 e3       	ldi	r30, 0x31	; 49
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_VidSetPinDirection+0x1e4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_VidSetPinDirection+0x1e0>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    12a8:	27 96       	adiw	r28, 0x07	; 7
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	27 97       	sbiw	r28, 0x07	; 7
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	6a 83       	std	Y+2, r22	; 0x02
    12d2:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <DIO_VidSetPinValue+0x22>
    12da:	6f c0       	rjmp	.+222    	; 0x13ba <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3f 83       	std	Y+7, r19	; 0x07
    12e4:	2e 83       	std	Y+6, r18	; 0x06
    12e6:	8e 81       	ldd	r24, Y+6	; 0x06
    12e8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	49 f1       	breq	.+82     	; 0x1342 <DIO_VidSetPinValue+0x88>
    12f0:	2e 81       	ldd	r18, Y+6	; 0x06
    12f2:	3f 81       	ldd	r19, Y+7	; 0x07
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_VidSetPinValue+0x4a>
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <DIO_VidSetPinValue+0x60>
    1302:	d2 c0       	rjmp	.+420    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
    1304:	2e 81       	ldd	r18, Y+6	; 0x06
    1306:	3f 81       	ldd	r19, Y+7	; 0x07
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	71 f1       	breq	.+92     	; 0x136a <DIO_VidSetPinValue+0xb0>
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	e9 f1       	breq	.+122    	; 0x1392 <DIO_VidSetPinValue+0xd8>
    1318:	c7 c0       	rjmp	.+398    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_VidSetPinValue+0x7e>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_VidSetPinValue+0x7a>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	b3 c0       	rjmp	.+358    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_VidSetPinValue+0xa6>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_VidSetPinValue+0xa2>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	9f c0       	rjmp	.+318    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_VidSetPinValue+0xce>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_VidSetPinValue+0xca>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	8b c0       	rjmp	.+278    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_VidSetPinValue+0xf6>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_VidSetPinValue+0xf2>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	77 c0       	rjmp	.+238    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 23       	and	r24, r24
    13be:	09 f0       	breq	.+2      	; 0x13c2 <DIO_VidSetPinValue+0x108>
    13c0:	73 c0       	rjmp	.+230    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3d 83       	std	Y+5, r19	; 0x05
    13ca:	2c 83       	std	Y+4, r18	; 0x04
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	59 f1       	breq	.+86     	; 0x142c <DIO_VidSetPinValue+0x172>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	2c f4       	brge	.+10     	; 0x13ea <DIO_VidSetPinValue+0x130>
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f0       	breq	.+26     	; 0x1402 <DIO_VidSetPinValue+0x148>
    13e8:	5f c0       	rjmp	.+190    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	89 f1       	breq	.+98     	; 0x1456 <DIO_VidSetPinValue+0x19c>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_VidSetPinValue+0x146>
    13fe:	40 c0       	rjmp	.+128    	; 0x1480 <DIO_VidSetPinValue+0x1c6>
    1400:	53 c0       	rjmp	.+166    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_VidSetPinValue+0x166>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_VidSetPinValue+0x162>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	3e c0       	rjmp	.+124    	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_VidSetPinValue+0x190>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_VidSetPinValue+0x18c>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	29 c0       	rjmp	.+82     	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_VidSetPinValue+0x1ba>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_VidSetPinValue+0x1b6>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_VidSetPinValue+0x1e4>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_VidSetPinValue+0x1e0>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    14a8:	27 96       	adiw	r28, 0x07	; 7
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_VidSetPortDirection+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_VidSetPortDirection+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <DIO_VidSetPortDirection+0x58>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <DIO_VidSetPortDirection+0x38>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_VidSetPortDirection+0x4e>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <DIO_VidSetPortDirection+0x74>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <DIO_VidSetPortDirection+0x62>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <DIO_VidSetPortDirection+0x6c>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    151c:	e4 e3       	ldi	r30, 0x34	; 52
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
	}	
	
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_VidSetPortValue+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_VidSetPortValue+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <DIO_VidSetPortValue+0x58>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_VidSetPortValue+0x38>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <DIO_VidSetPortValue+0x4e>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <DIO_VidSetPortValue+0x74>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <DIO_VidSetPortValue+0x62>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <DIO_VidSetPortValue+0x6c>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
	}	
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_u8GetPinValue+0x6>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <DIO_u8GetPinValue+0x8>
    15c6:	0f 92       	push	r0
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    15d0:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3d 83       	std	Y+5, r19	; 0x05
    15da:	2c 83       	std	Y+4, r18	; 0x04
    15dc:	4c 81       	ldd	r20, Y+4	; 0x04
    15de:	5d 81       	ldd	r21, Y+5	; 0x05
    15e0:	41 30       	cpi	r20, 0x01	; 1
    15e2:	51 05       	cpc	r21, r1
    15e4:	41 f1       	breq	.+80     	; 0x1636 <DIO_u8GetPinValue+0x78>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	91 05       	cpc	r25, r1
    15ee:	34 f4       	brge	.+12     	; 0x15fc <DIO_u8GetPinValue+0x3e>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	21 15       	cp	r18, r1
    15f6:	31 05       	cpc	r19, r1
    15f8:	61 f0       	breq	.+24     	; 0x1612 <DIO_u8GetPinValue+0x54>
    15fa:	52 c0       	rjmp	.+164    	; 0x16a0 <DIO_u8GetPinValue+0xe2>
    15fc:	4c 81       	ldd	r20, Y+4	; 0x04
    15fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1600:	42 30       	cpi	r20, 0x02	; 2
    1602:	51 05       	cpc	r21, r1
    1604:	51 f1       	breq	.+84     	; 0x165a <DIO_u8GetPinValue+0x9c>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	b9 f1       	breq	.+110    	; 0x167e <DIO_u8GetPinValue+0xc0>
    1610:	47 c0       	rjmp	.+142    	; 0x16a0 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    1612:	e9 e3       	ldi	r30, 0x39	; 57
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8GetPinValue+0x6c>
    1626:	55 95       	asr	r21
    1628:	47 95       	ror	r20
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8GetPinValue+0x68>
    162e:	ca 01       	movw	r24, r20
    1630:	81 70       	andi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	35 c0       	rjmp	.+106    	; 0x16a0 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    1636:	e6 e3       	ldi	r30, 0x36	; 54
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a9 01       	movw	r20, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_u8GetPinValue+0x90>
    164a:	55 95       	asr	r21
    164c:	47 95       	ror	r20
    164e:	8a 95       	dec	r24
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_u8GetPinValue+0x8c>
    1652:	ca 01       	movw	r24, r20
    1654:	81 70       	andi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	23 c0       	rjmp	.+70     	; 0x16a0 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    165a:	e3 e3       	ldi	r30, 0x33	; 51
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a9 01       	movw	r20, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8GetPinValue+0xb4>
    166e:	55 95       	asr	r21
    1670:	47 95       	ror	r20
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8GetPinValue+0xb0>
    1676:	ca 01       	movw	r24, r20
    1678:	81 70       	andi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    167e:	e0 e3       	ldi	r30, 0x30	; 48
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_u8GetPinValue+0xd8>
    1692:	55 95       	asr	r21
    1694:	47 95       	ror	r20
    1696:	8a 95       	dec	r24
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_u8GetPinValue+0xd4>
    169a:	ca 01       	movw	r24, r20
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_u8TogglePinValue+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_u8TogglePinValue+0x8>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	49 f1       	breq	.+82     	; 0x1728 <DIO_u8TogglePinValue+0x76>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <DIO_u8TogglePinValue+0x38>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	61 f0       	breq	.+24     	; 0x1700 <DIO_u8TogglePinValue+0x4e>
    16e8:	5a c0       	rjmp	.+180    	; 0x179e <DIO_u8TogglePinValue+0xec>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	71 f1       	breq	.+92     	; 0x1750 <DIO_u8TogglePinValue+0x9e>
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	e9 f1       	breq	.+122    	; 0x1778 <DIO_u8TogglePinValue+0xc6>
    16fe:	4f c0       	rjmp	.+158    	; 0x179e <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_u8TogglePinValue+0x6c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_u8TogglePinValue+0x68>
    1722:	84 27       	eor	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	3b c0       	rjmp	.+118    	; 0x179e <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    1728:	a8 e3       	ldi	r26, 0x38	; 56
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e8 e3       	ldi	r30, 0x38	; 56
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8TogglePinValue+0x94>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8TogglePinValue+0x90>
    174a:	84 27       	eor	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	27 c0       	rjmp	.+78     	; 0x179e <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8TogglePinValue+0xbc>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8TogglePinValue+0xb8>
    1772:	84 27       	eor	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	13 c0       	rjmp	.+38     	; 0x179e <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    1778:	a2 e3       	ldi	r26, 0x32	; 50
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e2 e3       	ldi	r30, 0x32	; 50
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8TogglePinValue+0xe4>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8TogglePinValue+0xe0>
    179a:	84 27       	eor	r24, r20
    179c:	8c 93       	st	X, r24
	}
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <DIO_SetNippleValue>:
void DIO_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <DIO_SetNippleValue+0x6>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <DIO_SetNippleValue+0x8>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	6a 83       	std	Y+2, r22	; 0x02
    17be:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8PinStart<=4)
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	85 30       	cpi	r24, 0x05	; 5
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <DIO_SetNippleValue+0x1c>
    17c6:	c6 c0       	rjmp	.+396    	; 0x1954 <DIO_SetNippleValue+0x1a8>
	{
		switch(Copy_u8PortNumber)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3d 83       	std	Y+5, r19	; 0x05
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	6c 81       	ldd	r22, Y+4	; 0x04
    17d4:	7d 81       	ldd	r23, Y+5	; 0x05
    17d6:	61 30       	cpi	r22, 0x01	; 1
    17d8:	71 05       	cpc	r23, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <DIO_SetNippleValue+0x32>
    17dc:	41 c0       	rjmp	.+130    	; 0x1860 <DIO_SetNippleValue+0xb4>
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	91 05       	cpc	r25, r1
    17e6:	34 f4       	brge	.+12     	; 0x17f4 <DIO_SetNippleValue+0x48>
    17e8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	21 15       	cp	r18, r1
    17ee:	31 05       	cpc	r19, r1
    17f0:	71 f0       	breq	.+28     	; 0x180e <DIO_SetNippleValue+0x62>
    17f2:	b0 c0       	rjmp	.+352    	; 0x1954 <DIO_SetNippleValue+0x1a8>
    17f4:	6c 81       	ldd	r22, Y+4	; 0x04
    17f6:	7d 81       	ldd	r23, Y+5	; 0x05
    17f8:	62 30       	cpi	r22, 0x02	; 2
    17fa:	71 05       	cpc	r23, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <DIO_SetNippleValue+0x54>
    17fe:	59 c0       	rjmp	.+178    	; 0x18b2 <DIO_SetNippleValue+0x106>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	91 05       	cpc	r25, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <DIO_SetNippleValue+0x60>
    180a:	7c c0       	rjmp	.+248    	; 0x1904 <DIO_SetNippleValue+0x158>
    180c:	a3 c0       	rjmp	.+326    	; 0x1954 <DIO_SetNippleValue+0x1a8>
		{
		case DIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    180e:	ab e3       	ldi	r26, 0x3B	; 59
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	eb e3       	ldi	r30, 0x3B	; 59
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	8f e0       	ldi	r24, 0x0F	; 15
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_SetNippleValue+0x7e>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	2a 95       	dec	r18
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_SetNippleValue+0x7a>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    1834:	ab e3       	ldi	r26, 0x3B	; 59
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	b9 01       	movw	r22, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_SetNippleValue+0xa8>
    1850:	66 0f       	add	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	8a 95       	dec	r24
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_SetNippleValue+0xa4>
    1858:	cb 01       	movw	r24, r22
    185a:	84 2b       	or	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	7a c0       	rjmp	.+244    	; 0x1954 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1860:	a8 e3       	ldi	r26, 0x38	; 56
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e8 e3       	ldi	r30, 0x38	; 56
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	8f e0       	ldi	r24, 0x0F	; 15
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_SetNippleValue+0xd0>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	2a 95       	dec	r18
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_SetNippleValue+0xcc>
    1880:	80 95       	com	r24
    1882:	84 23       	and	r24, r20
    1884:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	b9 01       	movw	r22, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_SetNippleValue+0xfa>
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_SetNippleValue+0xf6>
    18aa:	cb 01       	movw	r24, r22
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	51 c0       	rjmp	.+162    	; 0x1954 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    18b2:	a5 e3       	ldi	r26, 0x35	; 53
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8f e0       	ldi	r24, 0x0F	; 15
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_SetNippleValue+0x122>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	2a 95       	dec	r18
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_SetNippleValue+0x11e>
    18d2:	80 95       	com	r24
    18d4:	84 23       	and	r24, r20
    18d6:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    18d8:	a5 e3       	ldi	r26, 0x35	; 53
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e5 e3       	ldi	r30, 0x35	; 53
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	b9 01       	movw	r22, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_SetNippleValue+0x14c>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_SetNippleValue+0x148>
    18fc:	cb 01       	movw	r24, r22
    18fe:	84 2b       	or	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	28 c0       	rjmp	.+80     	; 0x1954 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1904:	a2 e3       	ldi	r26, 0x32	; 50
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8f e0       	ldi	r24, 0x0F	; 15
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_SetNippleValue+0x174>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	2a 95       	dec	r18
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_SetNippleValue+0x170>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    192a:	a2 e3       	ldi	r26, 0x32	; 50
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	b9 01       	movw	r22, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_SetNippleValue+0x19e>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	8a 95       	dec	r24
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_SetNippleValue+0x19a>
    194e:	cb 01       	movw	r24, r22
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
			break;

		}
	}

}
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <ADC_SetCallBack+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	90 93 9b 00 	sts	0x009B, r25
    197a:	80 93 9a 00 	sts	0x009A, r24
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    19b2:	80 91 9a 00 	lds	r24, 0x009A
    19b6:	90 91 9b 00 	lds	r25, 0x009B
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <__vector_16+0x40>
	{
		GPFunc();
    19be:	e0 91 9a 00 	lds	r30, 0x009A
    19c2:	f0 91 9b 00 	lds	r31, 0x009B
    19c6:	09 95       	icall
	}
}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    19f6:	a7 e2       	ldi	r26, 0x27	; 39
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e7 e2       	ldi	r30, 0x27	; 39
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    1a04:	a7 e2       	ldi	r26, 0x27	; 39
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e7 e2       	ldi	r30, 0x27	; 39
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 77       	andi	r24, 0x7F	; 127
    1a10:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    1a12:	a6 e2       	ldi	r26, 0x26	; 38
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e6 e2       	ldi	r30, 0x26	; 38
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8e 7f       	andi	r24, 0xFE	; 254
    1a1e:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    1a20:	a6 e2       	ldi	r26, 0x26	; 38
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e6 e2       	ldi	r30, 0x26	; 38
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    1a2e:	a6 e2       	ldi	r26, 0x26	; 38
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e6 e2       	ldi	r30, 0x26	; 38
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	84 60       	ori	r24, 0x04	; 4
    1a3a:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    1a3c:	a7 e2       	ldi	r26, 0x27	; 39
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e7 e2       	ldi	r30, 0x27	; 39
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7d       	andi	r24, 0xDF	; 223
    1a48:	8c 93       	st	X, r24
	#endif
	/***************ADC MODE******************/
	#if	ADC_Mode==ADC_Single_Conversion
		CLR_BIT(ADCSRA,ADATE);
	#elif	ADC_Mode==ADC_Free_Running
		SET_BIT(ADCSRA,ADATE);
    1a4a:	a6 e2       	ldi	r26, 0x26	; 38
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e6 e2       	ldi	r30, 0x26	; 38
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	80 62       	ori	r24, 0x20	; 32
    1a56:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    1a58:	a0 e5       	ldi	r26, 0x50	; 80
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e0 e5       	ldi	r30, 0x50	; 80
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 7d       	andi	r24, 0xDF	; 223
    1a64:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS1);
    1a66:	a0 e5       	ldi	r26, 0x50	; 80
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e0 e5       	ldi	r30, 0x50	; 80
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 7b       	andi	r24, 0xBF	; 191
    1a72:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    1a74:	a0 e5       	ldi	r26, 0x50	; 80
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e0 e5       	ldi	r30, 0x50	; 80
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 77       	andi	r24, 0x7F	; 127
    1a80:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    1a82:	a6 e2       	ldi	r26, 0x26	; 38
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e6 e2       	ldi	r30, 0x26	; 38
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 68       	ori	r24, 0x80	; 128
    1a8e:	8c 93       	st	X, r24
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    1a9e:	a6 e2       	ldi	r26, 0x26	; 38
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e6 e2       	ldi	r30, 0x26	; 38
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 64       	ori	r24, 0x40	; 64
    1aaa:	8c 93       	st	X, r24
}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    1abe:	a7 e2       	ldi	r26, 0x27	; 39
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e7 e2       	ldi	r30, 0x27	; 39
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 7e       	andi	r24, 0xE0	; 224
    1aca:	8c 93       	st	X, r24
	ADMUX|=Channal;
    1acc:	a7 e2       	ldi	r26, 0x27	; 39
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e7 e2       	ldi	r30, 0x27	; 39
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	90 81       	ld	r25, Z
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	89 2b       	or	r24, r25
    1ada:	8c 93       	st	X, r24
}
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    1aec:	a6 e2       	ldi	r26, 0x26	; 38
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e6 e2       	ldi	r30, 0x26	; 38
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	88 60       	ori	r24, 0x08	; 8
    1af8:	8c 93       	st	X, r24
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    1b08:	e6 e2       	ldi	r30, 0x26	; 38
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 95       	swap	r24
    1b10:	8f 70       	andi	r24, 0x0F	; 15
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	81 70       	andi	r24, 0x01	; 1
    1b18:	90 70       	andi	r25, 0x00	; 0
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	a9 f3       	breq	.-22     	; 0x1b08 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    1b1e:	a6 e2       	ldi	r26, 0x26	; 38
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e6 e2       	ldi	r30, 0x26	; 38
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	80 61       	ori	r24, 0x10	; 16
    1b2a:	8c 93       	st	X, r24
}
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <ADC_Get_Result+0x6>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    1b40:	e4 e2       	ldi	r30, 0x24	; 36
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	6c 97       	sbiw	r28, 0x1c	; 28
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	64 e0       	ldi	r22, 0x04	; 4
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	89 8f       	std	Y+25, r24	; 0x19
    1b82:	9a 8f       	std	Y+26, r25	; 0x1a
    1b84:	ab 8f       	std	Y+27, r26	; 0x1b
    1b86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8d 8b       	std	Y+21, r24	; 0x15
    1ba2:	9e 8b       	std	Y+22, r25	; 0x16
    1ba4:	af 8b       	std	Y+23, r26	; 0x17
    1ba6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	69 8d       	ldd	r22, Y+25	; 0x19
    1be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9c 8b       	std	Y+20, r25	; 0x14
    1c08:	8b 8b       	std	Y+19, r24	; 0x13
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <LCD_VidPulseEnable+0xd0>
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9a 8b       	std	Y+18, r25	; 0x12
    1c12:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c14:	89 89       	ldd	r24, Y+17	; 0x11
    1c16:	9a 89       	ldd	r25, Y+18	; 0x12
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_VidPulseEnable+0xbe>
    1c1c:	9a 8b       	std	Y+18, r25	; 0x12
    1c1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <LCD_VidPulseEnable+0xb2>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4c:	98 8b       	std	Y+16, r25	; 0x10
    1c4e:	8f 87       	std	Y+15, r24	; 0x0f
    1c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c52:	98 89       	ldd	r25, Y+16	; 0x10
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_VidPulseEnable+0xfa>
    1c58:	98 8b       	std	Y+16, r25	; 0x10
    1c5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e8       	ldi	r26, 0x80	; 128
    1c6c:	bf e3       	ldi	r27, 0x3F	; 63
    1c6e:	8b 87       	std	Y+11, r24	; 0x0b
    1c70:	9c 87       	std	Y+12, r25	; 0x0c
    1c72:	ad 87       	std	Y+13, r26	; 0x0d
    1c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8f 83       	std	Y+7, r24	; 0x07
    1c90:	98 87       	std	Y+8, r25	; 0x08
    1c92:	a9 87       	std	Y+9, r26	; 0x09
    1c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_VidPulseEnable+0x1be>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_VidPulseEnable+0x1ac>
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_VidPulseEnable+0x1a0>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_VidPulseEnable+0x1e8>
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d4a:	6c 96       	adiw	r28, 0x1c	; 28
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_VidInit>:
void LCD_VidInit(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	e8 97       	sbiw	r28, 0x38	; 56
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a8 e4       	ldi	r26, 0x48	; 72
    1d76:	b2 e4       	ldi	r27, 0x42	; 66
    1d78:	8d ab       	std	Y+53, r24	; 0x35
    1d7a:	9e ab       	std	Y+54, r25	; 0x36
    1d7c:	af ab       	std	Y+55, r26	; 0x37
    1d7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6d a9       	ldd	r22, Y+53	; 0x35
    1d82:	7e a9       	ldd	r23, Y+54	; 0x36
    1d84:	8f a9       	ldd	r24, Y+55	; 0x37
    1d86:	98 ad       	ldd	r25, Y+56	; 0x38
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	89 ab       	std	Y+49, r24	; 0x31
    1d9a:	9a ab       	std	Y+50, r25	; 0x32
    1d9c:	ab ab       	std	Y+51, r26	; 0x33
    1d9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_VidInit+0x66>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 ab       	std	Y+48, r25	; 0x30
    1dbe:	8f a7       	std	Y+47, r24	; 0x2f
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1dc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6d a9       	ldd	r22, Y+53	; 0x35
    1ddc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dde:	8f a9       	ldd	r24, Y+55	; 0x37
    1de0:	98 ad       	ldd	r25, Y+56	; 0x38
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	98 ab       	std	Y+48, r25	; 0x30
    1e00:	8f a7       	std	Y+47, r24	; 0x2f
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_VidInit+0xc6>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e a7       	std	Y+46, r25	; 0x2e
    1e0a:	8d a7       	std	Y+45, r24	; 0x2d
    1e0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_VidInit+0xb4>
    1e14:	9e a7       	std	Y+46, r25	; 0x2e
    1e16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	98 ab       	std	Y+48, r25	; 0x30
    1e20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_VidInit+0xa8>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e30:	8b a9       	ldd	r24, Y+51	; 0x33
    1e32:	9c a9       	ldd	r25, Y+52	; 0x34
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e42:	98 a9       	ldd	r25, Y+48	; 0x30
    1e44:	9c a7       	std	Y+44, r25	; 0x2c
    1e46:	8b a7       	std	Y+43, r24	; 0x2b
    1e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_VidInit+0xf0>
    1e50:	9c a7       	std	Y+44, r25	; 0x2c
    1e52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
#if MODE==4
	//DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);  /* Configure the control pins(E,RS,RW) as output pins */
	DIO_VidSetPinDirection(LCD_CTRL_PORT,PIN2,OUTPUT);
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	62 e0       	ldi	r22, 0x02	; 2
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,PIN3,OUTPUT);
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	63 e0       	ldi	r22, 0x03	; 3
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,PIN4,OUTPUT);
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	64 e0       	ldi	r22, 0x04	; 4
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
	//_delay_ms(1);


		// set only PORT 4~7 pins as outputs
		//DIO_VidSetPortDirection(LCD_DATA_PORT,0xF0);  /* Configure the data port as output port */
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN4,OUTPUT);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	64 e0       	ldi	r22, 0x04	; 4
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN5,OUTPUT);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	65 e0       	ldi	r22, 0x05	; 5
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN6,OUTPUT);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN7,OUTPUT);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	67 e0       	ldi	r22, 0x07	; 7
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
		/*send function set command*/
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET);
    1ea6:	88 e2       	ldi	r24, 0x28	; 40
    1ea8:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	8f a3       	std	Y+39, r24	; 0x27
    1eb6:	98 a7       	std	Y+40, r25	; 0x28
    1eb8:	a9 a7       	std	Y+41, r26	; 0x29
    1eba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8b a3       	std	Y+35, r24	; 0x23
    1ed6:	9c a3       	std	Y+36, r25	; 0x24
    1ed8:	ad a3       	std	Y+37, r26	; 0x25
    1eda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1edc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ede:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_VidInit+0x1a2>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9a a3       	std	Y+34, r25	; 0x22
    1efa:	89 a3       	std	Y+33, r24	; 0x21
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_VidInit+0x220>
	else if (__tmp > 65535)
    1efe:	6b a1       	ldd	r22, Y+35	; 0x23
    1f00:	7c a1       	ldd	r23, Y+36	; 0x24
    1f02:	8d a1       	ldd	r24, Y+37	; 0x25
    1f04:	9e a1       	ldd	r25, Y+38	; 0x26
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_VidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6f a1       	ldd	r22, Y+39	; 0x27
    1f18:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_VidInit+0x202>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	98 a3       	std	Y+32, r25	; 0x20
    1f46:	8f 8f       	std	Y+31, r24	; 0x1f
    1f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_VidInit+0x1f0>
    1f50:	98 a3       	std	Y+32, r25	; 0x20
    1f52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9a a3       	std	Y+34, r25	; 0x22
    1f5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f60:	9a a1       	ldd	r25, Y+34	; 0x22
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_VidInit+0x1e4>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_VidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f80:	9e 8f       	std	Y+30, r25	; 0x1e
    1f82:	8d 8f       	std	Y+29, r24	; 0x1d
    1f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_VidInit+0x22c>
    1f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			/*send Display on/off  command*/
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF>>4);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF);
    1f96:	8c e0       	ldi	r24, 0x0C	; 12
    1f98:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e8       	ldi	r26, 0x80	; 128
    1fa2:	bf e3       	ldi	r27, 0x3F	; 63
    1fa4:	89 8f       	std	Y+25, r24	; 0x19
    1fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    1faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	69 8d       	ldd	r22, Y+25	; 0x19
    1fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	54 e4       	ldi	r21, 0x44	; 68
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8d 8b       	std	Y+21, r24	; 0x15
    1fc6:	9e 8b       	std	Y+22, r25	; 0x16
    1fc8:	af 8b       	std	Y+23, r26	; 0x17
    1fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <LCD_VidInit+0x292>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <LCD_VidInit+0x310>
	else if (__tmp > 65535)
    1fee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <LCD_VidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	69 8d       	ldd	r22, Y+25	; 0x19
    2008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
    202e:	0f c0       	rjmp	.+30     	; 0x204e <LCD_VidInit+0x2f2>
    2030:	88 ec       	ldi	r24, 0xC8	; 200
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9a 8b       	std	Y+18, r25	; 0x12
    2036:	89 8b       	std	Y+17, r24	; 0x11
    2038:	89 89       	ldd	r24, Y+17	; 0x11
    203a:	9a 89       	ldd	r25, Y+18	; 0x12
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_VidInit+0x2e0>
    2040:	9a 8b       	std	Y+18, r25	; 0x12
    2042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	9c 8b       	std	Y+20, r25	; 0x14
    204c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <LCD_VidInit+0x2d4>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <LCD_VidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	6d 89       	ldd	r22, Y+21	; 0x15
    205a:	7e 89       	ldd	r23, Y+22	; 0x16
    205c:	8f 89       	ldd	r24, Y+23	; 0x17
    205e:	98 8d       	ldd	r25, Y+24	; 0x18
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	98 8b       	std	Y+16, r25	; 0x10
    2072:	8f 87       	std	Y+15, r24	; 0x0f
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	98 89       	ldd	r25, Y+16	; 0x10
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_VidInit+0x31c>
    207c:	98 8b       	std	Y+16, r25	; 0x10
    207e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			/*send Display Clear  command*/
			LCD_VidWriteCommend(DISPLAY_CLEAR>>4);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
			LCD_VidWriteCommend(DISPLAY_CLEAR);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e0       	ldi	r26, 0x00	; 0
    2092:	b0 e4       	ldi	r27, 0x40	; 64
    2094:	8b 87       	std	Y+11, r24	; 0x0b
    2096:	9c 87       	std	Y+12, r25	; 0x0c
    2098:	ad 87       	std	Y+13, r26	; 0x0d
    209a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	6b 85       	ldd	r22, Y+11	; 0x0b
    209e:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a ef       	ldi	r20, 0xFA	; 250
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8f 83       	std	Y+7, r24	; 0x07
    20b6:	98 87       	std	Y+8, r25	; 0x08
    20b8:	a9 87       	std	Y+9, r26	; 0x09
    20ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <LCD_VidInit+0x382>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <LCD_VidInit+0x400>
	else if (__tmp > 65535)
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <LCD_VidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_VidInit+0x3e2>
    2120:	88 ec       	ldi	r24, 0xC8	; 200
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_VidInit+0x3d0>
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_VidInit+0x3c4>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <LCD_VidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_VidInit+0x40c>
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			/*send Entry Mode  set command*/
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);
    2176:	86 e0       	ldi	r24, 0x06	; 6
    2178:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    217c:	e8 96       	adiw	r28, 0x38	; 56
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ab 97       	sbiw	r28, 0x2b	; 43
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	8b a7       	std	Y+43, r24	; 0x2b
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,0); /* Instruction Mode RS=0 */
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	63 e0       	ldi	r22, 0x03	; 3
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e8       	ldi	r26, 0x80	; 128
    21be:	bf e3       	ldi	r27, 0x3F	; 63
    21c0:	8f a3       	std	Y+39, r24	; 0x27
    21c2:	98 a7       	std	Y+40, r25	; 0x28
    21c4:	a9 a7       	std	Y+41, r26	; 0x29
    21c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ca:	78 a5       	ldd	r23, Y+40	; 0x28
    21cc:	89 a5       	ldd	r24, Y+41	; 0x29
    21ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a ef       	ldi	r20, 0xFA	; 250
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8b a3       	std	Y+35, r24	; 0x23
    21e2:	9c a3       	std	Y+36, r25	; 0x24
    21e4:	ad a3       	std	Y+37, r26	; 0x25
    21e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_VidWriteCommend+0x7c>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9a a3       	std	Y+34, r25	; 0x22
    2206:	89 a3       	std	Y+33, r24	; 0x21
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_VidWriteCommend+0xfa>
	else if (__tmp > 65535)
    220a:	6b a1       	ldd	r22, Y+35	; 0x23
    220c:	7c a1       	ldd	r23, Y+36	; 0x24
    220e:	8d a1       	ldd	r24, Y+37	; 0x25
    2210:	9e a1       	ldd	r25, Y+38	; 0x26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_VidWriteCommend+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	6f a1       	ldd	r22, Y+39	; 0x27
    2224:	78 a5       	ldd	r23, Y+40	; 0x28
    2226:	89 a5       	ldd	r24, Y+41	; 0x29
    2228:	9a a5       	ldd	r25, Y+42	; 0x2a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_VidWriteCommend+0xdc>
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	98 a3       	std	Y+32, r25	; 0x20
    2252:	8f 8f       	std	Y+31, r24	; 0x1f
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	98 a1       	ldd	r25, Y+32	; 0x20
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_VidWriteCommend+0xca>
    225c:	98 a3       	std	Y+32, r25	; 0x20
    225e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	89 a1       	ldd	r24, Y+33	; 0x21
    2262:	9a a1       	ldd	r25, Y+34	; 0x22
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	89 a1       	ldd	r24, Y+33	; 0x21
    226c:	9a a1       	ldd	r25, Y+34	; 0x22
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_VidWriteCommend+0xbe>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <LCD_VidWriteCommend+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6b a1       	ldd	r22, Y+35	; 0x23
    2276:	7c a1       	ldd	r23, Y+36	; 0x24
    2278:	8d a1       	ldd	r24, Y+37	; 0x25
    227a:	9e a1       	ldd	r25, Y+38	; 0x26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	9e 8f       	std	Y+30, r25	; 0x1e
    228e:	8d 8f       	std	Y+29, r24	; 0x1d
    2290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_VidWriteCommend+0x106>
    2298:	9e 8f       	std	Y+30, r25	; 0x1e
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Commend); /* out the required command to the data bus D0 --> D7 */
    229c:	84 e0       	ldi	r24, 0x04	; 4
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	4b a5       	ldd	r20, Y+43	; 0x2b
    22a2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_SetNippleValue>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e8       	ldi	r26, 0x80	; 128
    22ac:	bf e3       	ldi	r27, 0x3F	; 63
    22ae:	89 8f       	std	Y+25, r24	; 0x19
    22b0:	9a 8f       	std	Y+26, r25	; 0x1a
    22b2:	ab 8f       	std	Y+27, r26	; 0x1b
    22b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	69 8d       	ldd	r22, Y+25	; 0x19
    22b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a ef       	ldi	r20, 0xFA	; 250
    22c4:	54 e4       	ldi	r21, 0x44	; 68
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8d 8b       	std	Y+21, r24	; 0x15
    22d0:	9e 8b       	std	Y+22, r25	; 0x16
    22d2:	af 8b       	std	Y+23, r26	; 0x17
    22d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d6:	6d 89       	ldd	r22, Y+21	; 0x15
    22d8:	7e 89       	ldd	r23, Y+22	; 0x16
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	98 8d       	ldd	r25, Y+24	; 0x18
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_VidWriteCommend+0x16a>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_VidWriteCommend+0x1e8>
	else if (__tmp > 65535)
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_VidWriteCommend+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_VidWriteCommend+0x1ca>
    233a:	88 ec       	ldi	r24, 0xC8	; 200
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
    2342:	89 89       	ldd	r24, Y+17	; 0x11
    2344:	9a 89       	ldd	r25, Y+18	; 0x12
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_VidWriteCommend+0x1b8>
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9c 8b       	std	Y+20, r25	; 0x14
    2356:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_VidWriteCommend+0x1ac>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_VidWriteCommend+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6d 89       	ldd	r22, Y+21	; 0x15
    2364:	7e 89       	ldd	r23, Y+22	; 0x16
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	98 8b       	std	Y+16, r25	; 0x10
    237c:	8f 87       	std	Y+15, r24	; 0x0f
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	98 89       	ldd	r25, Y+16	; 0x10
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_VidWriteCommend+0x1f4>
    2386:	98 8b       	std	Y+16, r25	; 0x10
    2388:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	64 e0       	ldi	r22, 0x04	; 4
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e4       	ldi	r27, 0x40	; 64
    239c:	8b 87       	std	Y+11, r24	; 0x0b
    239e:	9c 87       	std	Y+12, r25	; 0x0c
    23a0:	ad 87       	std	Y+13, r26	; 0x0d
    23a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8f 83       	std	Y+7, r24	; 0x07
    23be:	98 87       	std	Y+8, r25	; 0x08
    23c0:	a9 87       	std	Y+9, r26	; 0x09
    23c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <LCD_VidWriteCommend+0x258>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <LCD_VidWriteCommend+0x2d6>
	else if (__tmp > 65535)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <LCD_VidWriteCommend+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_VidWriteCommend+0x2b8>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_VidWriteCommend+0x2a6>
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_VidWriteCommend+0x29a>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <LCD_VidWriteCommend+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_VidWriteCommend+0x2e2>
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	64 e0       	ldi	r22, 0x04	; 4
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2482:	ab 96       	adiw	r28, 0x2b	; 43
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	6d 97       	sbiw	r28, 0x1d	; 29
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1); /* Instruction Mode RS=0 */
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	62 e0       	ldi	r22, 0x02	; 2
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    24b4:	83 e0       	ldi	r24, 0x03	; 3
    24b6:	63 e0       	ldi	r22, 0x03	; 3
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e8       	ldi	r26, 0x80	; 128
    24c4:	bf e3       	ldi	r27, 0x3F	; 63
    24c6:	89 8f       	std	Y+25, r24	; 0x19
    24c8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ca:	ab 8f       	std	Y+27, r26	; 0x1b
    24cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	69 8d       	ldd	r22, Y+25	; 0x19
    24d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a ef       	ldi	r20, 0xFA	; 250
    24dc:	54 e4       	ldi	r21, 0x44	; 68
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8d 8b       	std	Y+21, r24	; 0x15
    24e8:	9e 8b       	std	Y+22, r25	; 0x16
    24ea:	af 8b       	std	Y+23, r26	; 0x17
    24ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ee:	6d 89       	ldd	r22, Y+21	; 0x15
    24f0:	7e 89       	ldd	r23, Y+22	; 0x16
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_VidWriteData+0x7c>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_VidWriteData+0xfa>
	else if (__tmp > 65535)
    2510:	6d 89       	ldd	r22, Y+21	; 0x15
    2512:	7e 89       	ldd	r23, Y+22	; 0x16
    2514:	8f 89       	ldd	r24, Y+23	; 0x17
    2516:	98 8d       	ldd	r25, Y+24	; 0x18
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_VidWriteData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	69 8d       	ldd	r22, Y+25	; 0x19
    252a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    252c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    252e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_VidWriteData+0xdc>
    2552:	88 ec       	ldi	r24, 0xC8	; 200
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9a 8b       	std	Y+18, r25	; 0x12
    2558:	89 8b       	std	Y+17, r24	; 0x11
    255a:	89 89       	ldd	r24, Y+17	; 0x11
    255c:	9a 89       	ldd	r25, Y+18	; 0x12
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_VidWriteData+0xca>
    2562:	9a 8b       	std	Y+18, r25	; 0x12
    2564:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_VidWriteData+0xbe>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_VidWriteData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	98 8b       	std	Y+16, r25	; 0x10
    2594:	8f 87       	std	Y+15, r24	; 0x0f
    2596:	8f 85       	ldd	r24, Y+15	; 0x0f
    2598:	98 89       	ldd	r25, Y+16	; 0x10
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_VidWriteData+0x106>
    259e:	98 8b       	std	Y+16, r25	; 0x10
    25a0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Data);
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    25a8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_SetNippleValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	64 e0       	ldi	r22, 0x04	; 4
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a0 e0       	ldi	r26, 0x00	; 0
    25bc:	b0 e4       	ldi	r27, 0x40	; 64
    25be:	8b 87       	std	Y+11, r24	; 0x0b
    25c0:	9c 87       	std	Y+12, r25	; 0x0c
    25c2:	ad 87       	std	Y+13, r26	; 0x0d
    25c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8f 83       	std	Y+7, r24	; 0x07
    25e0:	98 87       	std	Y+8, r25	; 0x08
    25e2:	a9 87       	std	Y+9, r26	; 0x09
    25e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <LCD_VidWriteData+0x174>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <LCD_VidWriteData+0x1f2>
	else if (__tmp > 65535)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <LCD_VidWriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <LCD_VidWriteData+0x1d4>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	8b 83       	std	Y+3, r24	; 0x03
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_VidWriteData+0x1c2>
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8d 81       	ldd	r24, Y+5	; 0x05
    2660:	9e 81       	ldd	r25, Y+6	; 0x06
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <LCD_VidWriteData+0x1b6>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <LCD_VidWriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_VidWriteData+0x1fe>
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	64 e0       	ldi	r22, 0x04	; 4
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    26a4:	6d 96       	adiw	r28, 0x1d	; 29
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <LCD_VoidClearDisplay>:
void LCD_VoidClearDisplay(void)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	2e 97       	sbiw	r28, 0x0e	; 14
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommend(0x01>>4);
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
	LCD_VidWriteCommend(0x01);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 ea       	ldi	r26, 0xA0	; 160
    26dc:	b1 e4       	ldi	r27, 0x41	; 65
    26de:	8b 87       	std	Y+11, r24	; 0x0b
    26e0:	9c 87       	std	Y+12, r25	; 0x0c
    26e2:	ad 87       	std	Y+13, r26	; 0x0d
    26e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
    2702:	a9 87       	std	Y+9, r26	; 0x09
    2704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_VoidClearDisplay+0x72>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_VoidClearDisplay+0xf0>
	else if (__tmp > 65535)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_VoidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_VoidClearDisplay+0xd2>
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_VoidClearDisplay+0xc0>
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_VoidClearDisplay+0xb4>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_VoidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_VoidClearDisplay+0xfc>
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    27ba:	2e 96       	adiw	r28, 0x0e	; 14
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <LCD_4Bits_DisplayCharacter>:
void LCD_4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	0f 92       	push	r0
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data>>4);
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	82 95       	swap	r24
    27dc:	8f 70       	andi	r24, 0x0F	; 15
    27de:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_VidWriteData>
	LCD_VidWriteData(Copy_u8Data);
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_VidWriteData>
}
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <LCD_4Bits_DisplayString>:
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <LCD_4Bits_DisplayString+0x6>
    27f6:	0f 92       	push	r0
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	9b 83       	std	Y+3, r25	; 0x03
    27fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2800:	19 82       	std	Y+1, r1	; 0x01
    2802:	0e c0       	rjmp	.+28     	; 0x2820 <LCD_4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	9b 81       	ldd	r25, Y+3	; 0x03
    280e:	fc 01       	movw	r30, r24
    2810:	e2 0f       	add	r30, r18
    2812:	f3 1f       	adc	r31, r19
    2814:	80 81       	ld	r24, Z
    2816:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_4Bits_DisplayCharacter>
		Loc_u8Count++;
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data);
}
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	fc 01       	movw	r30, r24
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	80 81       	ld	r24, Z
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	29 f7       	brne	.-54     	; 0x2804 <LCD_4Bits_DisplayString+0x14>
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <LCD_4Bits_VidWriteNumber>:
void LCD_4Bits_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	2c 97       	sbiw	r28, 0x0c	; 12
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	69 87       	std	Y+9, r22	; 0x09
    2864:	7a 87       	std	Y+10, r23	; 0x0a
    2866:	8b 87       	std	Y+11, r24	; 0x0b
    2868:	9c 87       	std	Y+12, r25	; 0x0c
    286a:	1d 82       	std	Y+5, r1	; 0x05
    286c:	1e 82       	std	Y+6, r1	; 0x06
    286e:	1f 82       	std	Y+7, r1	; 0x07
    2870:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2872:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	ab 85       	ldd	r26, Y+11	; 0x0b
    287a:	bc 85       	ldd	r27, Y+12	; 0x0c
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a1 05       	cpc	r26, r1
    2880:	b1 05       	cpc	r27, r1
    2882:	09 f0       	breq	.+2      	; 0x2886 <LCD_4Bits_VidWriteNumber+0x40>
    2884:	46 c0       	rjmp	.+140    	; 0x2912 <LCD_4Bits_VidWriteNumber+0xcc>
{
	LCD_4Bits_DisplayCharacter(48);
    2886:	80 e3       	ldi	r24, 0x30	; 48
    2888:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_4Bits_DisplayCharacter>
    288c:	42 c0       	rjmp	.+132    	; 0x2912 <LCD_4Bits_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	af 81       	ldd	r26, Y+7	; 0x07
    2894:	b8 85       	ldd	r27, Y+8	; 0x08
    2896:	2a e0       	ldi	r18, 0x0A	; 10
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 93 18 	call	0x3126	; 0x3126 <__mulsi3>
    28a6:	7b 01       	movw	r14, r22
    28a8:	8c 01       	movw	r16, r24
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    28b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    28b2:	2a e0       	ldi	r18, 0x0A	; 10
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 b2 18 	call	0x3164	; 0x3164 <__udivmodsi4>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8e 0d       	add	r24, r14
    28c8:	9f 1d       	adc	r25, r15
    28ca:	a0 1f       	adc	r26, r16
    28cc:	b1 1f       	adc	r27, r17
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	af 83       	std	Y+7, r26	; 0x07
    28d4:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	af 81       	ldd	r26, Y+7	; 0x07
    28dc:	b8 85       	ldd	r27, Y+8	; 0x08
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	a1 05       	cpc	r26, r1
    28e2:	b1 05       	cpc	r27, r1
    28e4:	21 f4       	brne	.+8      	; 0x28ee <LCD_4Bits_VidWriteNumber+0xa8>
	{
		 y=0;
    28e6:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    28f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    28f6:	2a e0       	ldi	r18, 0x0A	; 10
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 b2 18 	call	0x3164	; 0x3164 <__udivmodsi4>
    2906:	da 01       	movw	r26, r20
    2908:	c9 01       	movw	r24, r18
    290a:	89 87       	std	Y+9, r24	; 0x09
    290c:	9a 87       	std	Y+10, r25	; 0x0a
    290e:	ab 87       	std	Y+11, r26	; 0x0b
    2910:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_4Bits_DisplayCharacter(48);
}
while(LOC_u32num>0)
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	ab 85       	ldd	r26, Y+11	; 0x0b
    2918:	bc 85       	ldd	r27, Y+12	; 0x0c
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	a1 05       	cpc	r26, r1
    291e:	b1 05       	cpc	r27, r1
    2920:	09 f0       	breq	.+2      	; 0x2924 <LCD_4Bits_VidWriteNumber+0xde>
    2922:	b5 cf       	rjmp	.-150    	; 0x288e <LCD_4Bits_VidWriteNumber+0x48>
    2924:	25 c0       	rjmp	.+74     	; 0x2970 <LCD_4Bits_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	9e 81       	ldd	r25, Y+6	; 0x06
    292a:	af 81       	ldd	r26, Y+7	; 0x07
    292c:	b8 85       	ldd	r27, Y+8	; 0x08
    292e:	2a e0       	ldi	r18, 0x0A	; 10
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__udivmodsi4>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8a 83       	std	Y+2, r24	; 0x02
	LCD_4Bits_DisplayCharacter(res+48);
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	80 5d       	subi	r24, 0xD0	; 208
    2948:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_4Bits_DisplayCharacter>
	revrese=revrese/10;
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	af 81       	ldd	r26, Y+7	; 0x07
    2952:	b8 85       	ldd	r27, Y+8	; 0x08
    2954:	2a e0       	ldi	r18, 0x0A	; 10
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 b2 18 	call	0x3164	; 0x3164 <__udivmodsi4>
    2964:	da 01       	movw	r26, r20
    2966:	c9 01       	movw	r24, r18
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	af 83       	std	Y+7, r26	; 0x07
    296e:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	af 81       	ldd	r26, Y+7	; 0x07
    2976:	b8 85       	ldd	r27, Y+8	; 0x08
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	a1 05       	cpc	r26, r1
    297c:	b1 05       	cpc	r27, r1
    297e:	99 f6       	brne	.-90     	; 0x2926 <LCD_4Bits_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	88 23       	and	r24, r24
    2984:	61 f4       	brne	.+24     	; 0x299e <LCD_4Bits_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2986:	19 82       	std	Y+1, r1	; 0x01
    2988:	06 c0       	rjmp	.+12     	; 0x2996 <LCD_4Bits_VidWriteNumber+0x150>
	{
		LCD_4Bits_DisplayCharacter(48);
    298a:	80 e3       	ldi	r24, 0x30	; 48
    298c:	0e 94 e6 13 	call	0x27cc	; 0x27cc <LCD_4Bits_DisplayCharacter>
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	99 81       	ldd	r25, Y+1	; 0x01
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	98 17       	cp	r25, r24
    299c:	b0 f3       	brcs	.-20     	; 0x298a <LCD_4Bits_VidWriteNumber+0x144>
	{
		LCD_4Bits_DisplayCharacter(48);
	}
}
}
    299e:	2c 96       	adiw	r28, 0x0c	; 12
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	08 95       	ret

000029b8 <LCD_Vid4Bits_SetPosition>:
void LCD_Vid4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <LCD_Vid4Bits_SetPosition+0x6>
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==0)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	88 23       	and	r24, r24
    29ca:	b9 f4       	brne	.+46     	; 0x29fa <LCD_Vid4Bits_SetPosition+0x42>
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	80 31       	cpi	r24, 0x10	; 16
    29d0:	a0 f4       	brcc	.+40     	; 0x29fa <LCD_Vid4Bits_SetPosition+0x42>
	{
		LCD_VidWriteCommend((128+Copy_u8PositionNumber)>>4);
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	80 58       	subi	r24, 0x80	; 128
    29da:	9f 4f       	sbci	r25, 0xFF	; 255
    29dc:	95 95       	asr	r25
    29de:	87 95       	ror	r24
    29e0:	95 95       	asr	r25
    29e2:	87 95       	ror	r24
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	95 95       	asr	r25
    29ea:	87 95       	ror	r24
    29ec:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
		LCD_VidWriteCommend((128+Copy_u8PositionNumber));
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	80 58       	subi	r24, 0x80	; 128
    29f4:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
    29f8:	19 c0       	rjmp	.+50     	; 0x2a2c <LCD_Vid4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	b1 f4       	brne	.+44     	; 0x2a2c <LCD_Vid4Bits_SetPosition+0x74>
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	80 31       	cpi	r24, 0x10	; 16
    2a04:	98 f4       	brcc	.+38     	; 0x2a2c <LCD_Vid4Bits_SetPosition+0x74>
	{
		LCD_VidWriteCommend((192+Copy_u8PositionNumber)>>4);
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	80 54       	subi	r24, 0x40	; 64
    2a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a10:	95 95       	asr	r25
    2a12:	87 95       	ror	r24
    2a14:	95 95       	asr	r25
    2a16:	87 95       	ror	r24
    2a18:	95 95       	asr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	95 95       	asr	r25
    2a1e:	87 95       	ror	r24
    2a20:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
		LCD_VidWriteCommend((192+Copy_u8PositionNumber));
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	80 54       	subi	r24, 0x40	; 64
    2a28:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_VidWriteCommend>
	}
	else
	{
	}
}
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <KEYPAD_VidInit>:
#include "Keypad_Interface.h"



void KEYPAD_VidInit(void)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	/*we will set the first 4-pins as output by set 1 in direction*/
	 /*and set the second 4-pins as input by set 0 in direction*/
	DIO_VidSetPortDirection ( DIO_Keypad,0b00001111);
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	6f e0       	ldi	r22, 0x0F	; 15
    2a42:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_VidSetPortDirection>
	/*the 4 input pins we will activate pull up resistor */
	/*the 4 output pins we will set value as 1*/
	DIO_VidSetPortValue	( DIO_Keypad, 0b11111111);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	6f ef       	ldi	r22, 0xFF	; 255
    2a4a:	0e 94 9e 0a 	call	0x153c	; 0x153c <DIO_VidSetPortValue>
}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <KEYPAD_GET_PressedKey>:
u8 KEYPAD_GET_PressedKey(void)
{   u8 keypad_array[4][4]={{ 1, 2, 3, 4},
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	a6 97       	sbiw	r28, 0x26	; 38
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
		                   { 5, 6, 7, 8},
						   { 9,10,11,12},
						   {13,14,15,16}};
    2a68:	ce 01       	movw	r24, r28
    2a6a:	42 96       	adiw	r24, 0x12	; 18
    2a6c:	9b a3       	std	Y+35, r25	; 0x23
    2a6e:	8a a3       	std	Y+34, r24	; 0x22
    2a70:	e4 e8       	ldi	r30, 0x84	; 132
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	fd a3       	std	Y+37, r31	; 0x25
    2a76:	ec a3       	std	Y+36, r30	; 0x24
    2a78:	f0 e1       	ldi	r31, 0x10	; 16
    2a7a:	fe a3       	std	Y+38, r31	; 0x26
    2a7c:	ec a1       	ldd	r30, Y+36	; 0x24
    2a7e:	fd a1       	ldd	r31, Y+37	; 0x25
    2a80:	00 80       	ld	r0, Z
    2a82:	8c a1       	ldd	r24, Y+36	; 0x24
    2a84:	9d a1       	ldd	r25, Y+37	; 0x25
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	9d a3       	std	Y+37, r25	; 0x25
    2a8a:	8c a3       	std	Y+36, r24	; 0x24
    2a8c:	ea a1       	ldd	r30, Y+34	; 0x22
    2a8e:	fb a1       	ldd	r31, Y+35	; 0x23
    2a90:	00 82       	st	Z, r0
    2a92:	8a a1       	ldd	r24, Y+34	; 0x22
    2a94:	9b a1       	ldd	r25, Y+35	; 0x23
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9b a3       	std	Y+35, r25	; 0x23
    2a9a:	8a a3       	std	Y+34, r24	; 0x22
    2a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9e:	91 50       	subi	r25, 0x01	; 1
    2aa0:	9e a3       	std	Y+38, r25	; 0x26
    2aa2:	ee a1       	ldd	r30, Y+38	; 0x26
    2aa4:	ee 23       	and	r30, r30
    2aa6:	51 f7       	brne	.-44     	; 0x2a7c <KEYPAD_GET_PressedKey+0x28>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
    2aa8:	1f 86       	std	Y+15, r1	; 0x0f
	for(col=0;col<4;col++)
    2aaa:	19 8a       	std	Y+17, r1	; 0x11
    2aac:	ad c0       	rjmp	.+346    	; 0x2c08 <KEYPAD_GET_PressedKey+0x1b4>
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 0);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	69 89       	ldd	r22, Y+17	; 0x11
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    2ab8:	84 e0       	ldi	r24, 0x04	; 4
    2aba:	88 8b       	std	Y+16, r24	; 0x10
    2abc:	99 c0       	rjmp	.+306    	; 0x2bf0 <KEYPAD_GET_PressedKey+0x19c>
		{
			/*every time you change the column value */
			     /*you will check all Rows */
			/*if any Row his value changed that mean*/
				/*there is key is pressed*/
			if(DIO_u8GetPinValue(DIO_Keypad,row)==0)
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	68 89       	ldd	r22, Y+16	; 0x10
    2ac2:	0e 94 df 0a 	call	0x15be	; 0x15be <DIO_u8GetPinValue>
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <KEYPAD_GET_PressedKey+0x78>
    2aca:	8f c0       	rjmp	.+286    	; 0x2bea <KEYPAD_GET_PressedKey+0x196>
			{
				/*we will mapping between the pressed key*/
					/*and the value in keypad array*/
				keypad_out= keypad_array[row-4][col];
    2acc:	88 89       	ldd	r24, Y+16	; 0x10
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 01       	movw	r18, r24
    2ad4:	24 50       	subi	r18, 0x04	; 4
    2ad6:	30 40       	sbci	r19, 0x00	; 0
    2ad8:	89 89       	ldd	r24, Y+17	; 0x11
    2ada:	48 2f       	mov	r20, r24
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	22 0f       	add	r18, r18
    2ae0:	33 1f       	adc	r19, r19
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	01 96       	adiw	r24, 0x01	; 1
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	84 0f       	add	r24, r20
    2af0:	95 1f       	adc	r25, r21
    2af2:	fc 01       	movw	r30, r24
    2af4:	71 96       	adiw	r30, 0x11	; 17
    2af6:	80 81       	ld	r24, Z
    2af8:	8f 87       	std	Y+15, r24	; 0x0f
				/* if the key is still pressed you will not  */
				      /* go to for the next instruction*/
				while(DIO_u8GetPinValue(DIO_Keypad,row)==0);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	68 89       	ldd	r22, Y+16	; 0x10
    2afe:	0e 94 df 0a 	call	0x15be	; 0x15be <DIO_u8GetPinValue>
    2b02:	88 23       	and	r24, r24
    2b04:	d1 f3       	breq	.-12     	; 0x2afa <KEYPAD_GET_PressedKey+0xa6>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a8 e4       	ldi	r26, 0x48	; 72
    2b0c:	b2 e4       	ldi	r27, 0x42	; 66
    2b0e:	8b 87       	std	Y+11, r24	; 0x0b
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	ad 87       	std	Y+13, r26	; 0x0d
    2b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8f 83       	std	Y+7, r24	; 0x07
    2b30:	98 87       	std	Y+8, r25	; 0x08
    2b32:	a9 87       	std	Y+9, r26	; 0x09
    2b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <KEYPAD_GET_PressedKey+0x104>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <KEYPAD_GET_PressedKey+0x182>
	else if (__tmp > 65535)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <KEYPAD_GET_PressedKey+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <KEYPAD_GET_PressedKey+0x164>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <KEYPAD_GET_PressedKey+0x152>
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <KEYPAD_GET_PressedKey+0x146>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <KEYPAD_GET_PressedKey+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <KEYPAD_GET_PressedKey+0x18e>
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
	for(col=0;col<4;col++)
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 0);
		for(row=4;row<8;row++)
    2bea:	88 89       	ldd	r24, Y+16	; 0x10
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	88 8b       	std	Y+16, r24	; 0x10
    2bf0:	88 89       	ldd	r24, Y+16	; 0x10
    2bf2:	88 30       	cpi	r24, 0x08	; 8
    2bf4:	08 f4       	brcc	.+2      	; 0x2bf8 <KEYPAD_GET_PressedKey+0x1a4>
    2bf6:	63 cf       	rjmp	.-314    	; 0x2abe <KEYPAD_GET_PressedKey+0x6a>


		}
			  /*if you check in all rows in this column*/
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 1);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	69 89       	ldd	r22, Y+17	; 0x11
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_VidSetPinValue>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
	for(col=0;col<4;col++)
    2c02:	89 89       	ldd	r24, Y+17	; 0x11
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	89 8b       	std	Y+17, r24	; 0x11
    2c08:	89 89       	ldd	r24, Y+17	; 0x11
    2c0a:	84 30       	cpi	r24, 0x04	; 4
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <KEYPAD_GET_PressedKey+0x1bc>
    2c0e:	4f cf       	rjmp	.-354    	; 0x2aae <KEYPAD_GET_PressedKey+0x5a>
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 1);
	}
/*if there is any switch is pressed the value of keypad_out variable*/
	/*will change from 0 to the mapping value in keypad_array*/
return keypad_out;
    2c10:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2c12:	a6 96       	adiw	r28, 0x26	; 38
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <EEPROM_voidInit>:
#include "EEPROM_private.h"
#include "EERPROM_interface.h"


void EEPROM_voidInit(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    2c2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <TWI_voidMasterInit>
}
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <EEPROM_u8WriteDataByte>:

u8   EEPROM_u8WriteDataByte(u8 Copy_u8Data,u16 Copy_u16ByteAddress)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	63 97       	sbiw	r28, 0x13	; 19
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	89 8b       	std	Y+17, r24	; 0x11
    2c4c:	7b 8b       	std	Y+19, r23	; 0x13
    2c4e:	6a 8b       	std	Y+18, r22	; 0x12
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	8f 87       	std	Y+15, r24	; 0x0f
	/* Start Condition */
	Local_enuTWIErrorState = TWI_enuSendStartCondition();
    2c58:	0e 94 e7 05 	call	0xbce	; 0xbce <TWI_enuSendStartCondition>
    2c5c:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c60:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2c64:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Slave Address with Write Bit */
	Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite((EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8)));
    2c66:	8a 89       	ldd	r24, Y+18	; 0x12
    2c68:	9b 89       	ldd	r25, Y+19	; 0x13
    2c6a:	89 2f       	mov	r24, r25
    2c6c:	99 27       	eor	r25, r25
    2c6e:	80 65       	ori	r24, 0x50	; 80
    2c70:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_enuSendSlaveWithWrite>
    2c74:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c78:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2c7c:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Rest Of The Byte Address */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    2c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c80:	0e 94 af 06 	call	0xd5e	; 0xd5e <TWI_enuSendDataByte>
    2c84:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c88:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2c8c:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Data Byte */
	Local_enuTWIErrorState = TWI_enuSendDataByte(Copy_u8Data);
    2c8e:	89 89       	ldd	r24, Y+17	; 0x11
    2c90:	0e 94 af 06 	call	0xd5e	; 0xd5e <TWI_enuSendDataByte>
    2c94:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c98:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2c9c:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Stop Condition */
	TWI_voidSendStopCondition();
    2c9e:	0e 94 10 07 	call	0xe20	; 0xe20 <TWI_voidSendStopCondition>
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ca8:	b0 e4       	ldi	r27, 0x40	; 64
    2caa:	8b 87       	std	Y+11, r24	; 0x0b
    2cac:	9c 87       	std	Y+12, r25	; 0x0c
    2cae:	ad 87       	std	Y+13, r26	; 0x0d
    2cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4a ef       	ldi	r20, 0xFA	; 250
    2cc0:	54 e4       	ldi	r21, 0x44	; 68
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	8f 83       	std	Y+7, r24	; 0x07
    2ccc:	98 87       	std	Y+8, r25	; 0x08
    2cce:	a9 87       	std	Y+9, r26	; 0x09
    2cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd4:	78 85       	ldd	r23, Y+8	; 0x08
    2cd6:	89 85       	ldd	r24, Y+9	; 0x09
    2cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e8       	ldi	r20, 0x80	; 128
    2ce0:	5f e3       	ldi	r21, 0x3F	; 63
    2ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce6:	88 23       	and	r24, r24
    2ce8:	2c f4       	brge	.+10     	; 0x2cf4 <EEPROM_u8WriteDataByte+0xbe>
		__ticks = 1;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	3f c0       	rjmp	.+126    	; 0x2d72 <EEPROM_u8WriteDataByte+0x13c>
	else if (__tmp > 65535)
    2cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf6:	78 85       	ldd	r23, Y+8	; 0x08
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	3f ef       	ldi	r19, 0xFF	; 255
    2d00:	4f e7       	ldi	r20, 0x7F	; 127
    2d02:	57 e4       	ldi	r21, 0x47	; 71
    2d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d08:	18 16       	cp	r1, r24
    2d0a:	4c f5       	brge	.+82     	; 0x2d5e <EEPROM_u8WriteDataByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	8d 83       	std	Y+5, r24	; 0x05
    2d34:	0f c0       	rjmp	.+30     	; 0x2d54 <EEPROM_u8WriteDataByte+0x11e>
    2d36:	88 ec       	ldi	r24, 0xC8	; 200
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9c 83       	std	Y+4, r25	; 0x04
    2d3c:	8b 83       	std	Y+3, r24	; 0x03
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <EEPROM_u8WriteDataByte+0x10c>
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	9e 81       	ldd	r25, Y+6	; 0x06
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <EEPROM_u8WriteDataByte+0x100>
    2d5c:	14 c0       	rjmp	.+40     	; 0x2d86 <EEPROM_u8WriteDataByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	9a 83       	std	Y+2, r25	; 0x02
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <EEPROM_u8WriteDataByte+0x148>
    2d82:	9a 83       	std	Y+2, r25	; 0x02
    2d84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_u8ErrorState;
    2d86:	88 89       	ldd	r24, Y+16	; 0x10
}
    2d88:	63 96       	adiw	r28, 0x13	; 19
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <EEPROM_u8ReadDataByte>:

u8   EEPROM_u8ReadDataByte(u8 * Copy_pu8ReceivedData ,u16 Copy_u16ByteAddress )
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	65 97       	sbiw	r28, 0x15	; 21
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	9b 8b       	std	Y+19, r25	; 0x13
    2db0:	8a 8b       	std	Y+18, r24	; 0x12
    2db2:	7d 8b       	std	Y+21, r23	; 0x15
    2db4:	6c 8b       	std	Y+20, r22	; 0x14
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	88 8b       	std	Y+16, r24	; 0x10
	if(Copy_pu8ReceivedData != NULL)
    2dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    2dc0:	9b 89       	ldd	r25, Y+19	; 0x13
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <EEPROM_u8ReadDataByte+0x2e>
    2dc6:	aa c0       	rjmp	.+340    	; 0x2f1c <EEPROM_u8ReadDataByte+0x182>
	{
		u8 Local_u8EEPROMAddress = (EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8));
    2dc8:	8c 89       	ldd	r24, Y+20	; 0x14
    2dca:	9d 89       	ldd	r25, Y+21	; 0x15
    2dcc:	89 2f       	mov	r24, r25
    2dce:	99 27       	eor	r25, r25
    2dd0:	80 65       	ori	r24, 0x50	; 80
    2dd2:	8f 87       	std	Y+15, r24	; 0x0f
		/* Send Start Condition */
		Local_enuTWIErrorState = TWI_enuSendStartCondition();
    2dd4:	0e 94 e7 05 	call	0xbce	; 0xbce <TWI_enuSendStartCondition>
    2dd8:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2dda:	88 89       	ldd	r24, Y+16	; 0x10
    2ddc:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2de0:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Write Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <TWI_enuSendSlaveWithWrite>
    2de8:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2dea:	88 89       	ldd	r24, Y+16	; 0x10
    2dec:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2df0:	89 8b       	std	Y+17, r24	; 0x11

		/* Send The Rest Of The Byte Address */
		Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    2df2:	8c 89       	ldd	r24, Y+20	; 0x14
    2df4:	0e 94 af 06 	call	0xd5e	; 0xd5e <TWI_enuSendDataByte>
    2df8:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2dfa:	88 89       	ldd	r24, Y+16	; 0x10
    2dfc:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2e00:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Repeated Start Condition */
		Local_enuTWIErrorState = TWI_enuSendRepeatedStartCondition();
    2e02:	0e 94 12 06 	call	0xc24	; 0xc24 <TWI_enuSendRepeatedStartCondition>
    2e06:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2e0e:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Read Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithRead(Local_u8EEPROMAddress);
    2e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e12:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_enuSendSlaveWithRead>
    2e16:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2e18:	88 89       	ldd	r24, Y+16	; 0x10
    2e1a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2e1e:	89 8b       	std	Y+17, r24	; 0x11

		/* Read Data */
		Local_enuTWIErrorState = TWI_enuReceiveDataByte(Copy_pu8ReceivedData);
    2e20:	8a 89       	ldd	r24, Y+18	; 0x12
    2e22:	9b 89       	ldd	r25, Y+19	; 0x13
    2e24:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <TWI_enuReceiveDataByte>
    2e28:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    2e2a:	88 89       	ldd	r24, Y+16	; 0x10
    2e2c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Private_u8ErrorStateCheck>
    2e30:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Stop Condition */
		TWI_voidSendStopCondition();
    2e32:	0e 94 10 07 	call	0xe20	; 0xe20 <TWI_voidSendStopCondition>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e3c:	b0 e4       	ldi	r27, 0x40	; 64
    2e3e:	8b 87       	std	Y+11, r24	; 0x0b
    2e40:	9c 87       	std	Y+12, r25	; 0x0c
    2e42:	ad 87       	std	Y+13, r26	; 0x0d
    2e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8f 83       	std	Y+7, r24	; 0x07
    2e60:	98 87       	std	Y+8, r25	; 0x08
    2e62:	a9 87       	std	Y+9, r26	; 0x09
    2e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <EEPROM_u8ReadDataByte+0xee>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <EEPROM_u8ReadDataByte+0x16c>
	else if (__tmp > 65535)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <EEPROM_u8ReadDataByte+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <EEPROM_u8ReadDataByte+0x14e>
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <EEPROM_u8ReadDataByte+0x13c>
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <EEPROM_u8ReadDataByte+0x130>
    2ef0:	16 c0       	rjmp	.+44     	; 0x2f1e <EEPROM_u8ReadDataByte+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <EEPROM_u8ReadDataByte+0x178>
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <EEPROM_u8ReadDataByte+0x184>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f1c:	19 8a       	std	Y+17, r1	; 0x11
	}
	return Local_u8ErrorState;
    2f1e:	89 89       	ldd	r24, Y+17	; 0x11

}
    2f20:	65 96       	adiw	r28, 0x15	; 21
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <Private_u8ErrorStateCheck>:

static u8   Private_u8ErrorStateCheck(TWI_ErrorState Copy_enuErrorState)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <Private_u8ErrorStateCheck+0x6>
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuErrorState != TWI_OK)
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <Private_u8ErrorStateCheck+0x18>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f48:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <main>:
#include "../HAL/EEPROM/EERPROM_interface.h"
#include "util/delay.h"


int main(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	61 97       	sbiw	r28, 0x11	; 17
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
		if(counter>7)
			counter=0;
	}*/


	u8 keypad_out=0;
    2f6a:	18 8a       	std	Y+16, r1	; 0x10
	//u16 ADC_OUT=0,ANALOG_VALUE=0;
	u8 Data_EEPROM=0;
    2f6c:	19 8a       	std	Y+17, r1	; 0x11
	u8 error=0;
    2f6e:	1f 86       	std	Y+15, r1	; 0x0f
	/*set SDA-->C1 &SCL-->C0 AS output */
	DIO_VidSetPinDirection(DIO_PORTC,PIN0,OUTPUT);//SCL
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTC,PIN1,OUTPUT);//SDA
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	61 e0       	ldi	r22, 0x01	; 1
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_VidSetPinDirection>
	/*EEPROM initialization*/
	EEPROM_voidInit();
    2f84:	0e 94 12 16 	call	0x2c24	; 0x2c24 <EEPROM_voidInit>
	/*LCD initialization*/
	LCD_VidInit();
    2f88:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_VidInit>

	/*KEYPAD initialization*/
	KEYPAD_VidInit();
    2f8c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <KEYPAD_VidInit>
	//DIO_VidSetPinDirection(DIO_PORTA,PIN1,INPUT);
	//ADC_VidINIT();
	//ADC_Select_Channal(1);

	LCD_4Bits_DisplayString("WELCOME BACK");
    2f90:	80 e6       	ldi	r24, 0x60	; 96
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_4Bits_DisplayString>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	aa e7       	ldi	r26, 0x7A	; 122
    2f9e:	b4 e4       	ldi	r27, 0x44	; 68
    2fa0:	8b 87       	std	Y+11, r24	; 0x0b
    2fa2:	9c 87       	std	Y+12, r25	; 0x0c
    2fa4:	ad 87       	std	Y+13, r26	; 0x0d
    2fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a ef       	ldi	r20, 0xFA	; 250
    2fb6:	54 e4       	ldi	r21, 0x44	; 68
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8f 83       	std	Y+7, r24	; 0x07
    2fc2:	98 87       	std	Y+8, r25	; 0x08
    2fc4:	a9 87       	std	Y+9, r26	; 0x09
    2fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <main+0x94>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	3f c0       	rjmp	.+126    	; 0x3068 <main+0x112>
	else if (__tmp > 65535)
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	3f ef       	ldi	r19, 0xFF	; 255
    2ff6:	4f e7       	ldi	r20, 0x7F	; 127
    2ff8:	57 e4       	ldi	r21, 0x47	; 71
    2ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffe:	18 16       	cp	r1, r24
    3000:	4c f5       	brge	.+82     	; 0x3054 <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3002:	6b 85       	ldd	r22, Y+11	; 0x0b
    3004:	7c 85       	ldd	r23, Y+12	; 0x0c
    3006:	8d 85       	ldd	r24, Y+13	; 0x0d
    3008:	9e 85       	ldd	r25, Y+14	; 0x0e
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
    302a:	0f c0       	rjmp	.+30     	; 0x304a <main+0xf4>
    302c:	88 ec       	ldi	r24, 0xC8	; 200
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c 83       	std	Y+4, r25	; 0x04
    3032:	8b 83       	std	Y+3, r24	; 0x03
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <main+0xe2>
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <main+0xd6>
    3052:	14 c0       	rjmp	.+40     	; 0x307c <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	9a 83       	std	Y+2, r25	; 0x02
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <main+0x11e>
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	LCD_VoidClearDisplay();
    307c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <LCD_VoidClearDisplay>
	//ADC_Start_Conversion();

	while(1)
	{
		LCD_Vid4Bits_SetPosition(0,0);
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
		LCD_4Bits_DisplayString("SEND:");
    3088:	8d e6       	ldi	r24, 0x6D	; 109
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_4Bits_DisplayString>
		LCD_Vid4Bits_SetPosition(1,0);
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
		LCD_4Bits_DisplayString("Receive:");
    3098:	83 e7       	ldi	r24, 0x73	; 115
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_4Bits_DisplayString>
		keypad_out=6;
    30a0:	86 e0       	ldi	r24, 0x06	; 6
    30a2:	88 8b       	std	Y+16, r24	; 0x10
		if(keypad_out!=0)
    30a4:	88 89       	ldd	r24, Y+16	; 0x10
    30a6:	88 23       	and	r24, r24
    30a8:	99 f1       	breq	.+102    	; 0x3110 <main+0x1ba>
		{
			LCD_Vid4Bits_SetPosition(0,5);
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	65 e0       	ldi	r22, 0x05	; 5
    30ae:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
			LCD_4Bits_VidWriteNumber(keypad_out);
    30b2:	88 89       	ldd	r24, Y+16	; 0x10
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a0 e0       	ldi	r26, 0x00	; 0
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 23 14 	call	0x2846	; 0x2846 <LCD_4Bits_VidWriteNumber>
			error=EEPROM_u8WriteDataByte(keypad_out,8);//send data that come from UART to Location -->5 In EEPROM.
    30c4:	88 89       	ldd	r24, Y+16	; 0x10
    30c6:	68 e0       	ldi	r22, 0x08	; 8
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <EEPROM_u8WriteDataByte>
    30ce:	8f 87       	std	Y+15, r24	; 0x0f
			/*Get Data from EEPROM in selected location*/
			LCD_Vid4Bits_SetPosition(0,8);
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	68 e0       	ldi	r22, 0x08	; 8
    30d4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
			LCD_4Bits_VidWriteNumber(error);
    30d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30da:	88 2f       	mov	r24, r24
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 23 14 	call	0x2846	; 0x2846 <LCD_4Bits_VidWriteNumber>
			EEPROM_u8ReadDataByte(&Data_EEPROM,8);
    30ea:	ce 01       	movw	r24, r28
    30ec:	41 96       	adiw	r24, 0x11	; 17
    30ee:	68 e0       	ldi	r22, 0x08	; 8
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <EEPROM_u8ReadDataByte>
			LCD_Vid4Bits_SetPosition(1,8);
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	68 e0       	ldi	r22, 0x08	; 8
    30fa:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
			LCD_4Bits_VidWriteNumber(Data_EEPROM);
    30fe:	89 89       	ldd	r24, Y+17	; 0x11
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a0 e0       	ldi	r26, 0x00	; 0
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 23 14 	call	0x2846	; 0x2846 <LCD_4Bits_VidWriteNumber>
		}
		LCD_Vid4Bits_SetPosition(0,8);
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	68 e0       	ldi	r22, 0x08	; 8
    3114:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_Vid4Bits_SetPosition>
					LCD_4Bits_VidWriteNumber(10);
    3118:	6a e0       	ldi	r22, 0x0A	; 10
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 23 14 	call	0x2846	; 0x2846 <LCD_4Bits_VidWriteNumber>
    3124:	ad cf       	rjmp	.-166    	; 0x3080 <main+0x12a>

00003126 <__mulsi3>:
    3126:	62 9f       	mul	r22, r18
    3128:	d0 01       	movw	r26, r0
    312a:	73 9f       	mul	r23, r19
    312c:	f0 01       	movw	r30, r0
    312e:	82 9f       	mul	r24, r18
    3130:	e0 0d       	add	r30, r0
    3132:	f1 1d       	adc	r31, r1
    3134:	64 9f       	mul	r22, r20
    3136:	e0 0d       	add	r30, r0
    3138:	f1 1d       	adc	r31, r1
    313a:	92 9f       	mul	r25, r18
    313c:	f0 0d       	add	r31, r0
    313e:	83 9f       	mul	r24, r19
    3140:	f0 0d       	add	r31, r0
    3142:	74 9f       	mul	r23, r20
    3144:	f0 0d       	add	r31, r0
    3146:	65 9f       	mul	r22, r21
    3148:	f0 0d       	add	r31, r0
    314a:	99 27       	eor	r25, r25
    314c:	72 9f       	mul	r23, r18
    314e:	b0 0d       	add	r27, r0
    3150:	e1 1d       	adc	r30, r1
    3152:	f9 1f       	adc	r31, r25
    3154:	63 9f       	mul	r22, r19
    3156:	b0 0d       	add	r27, r0
    3158:	e1 1d       	adc	r30, r1
    315a:	f9 1f       	adc	r31, r25
    315c:	bd 01       	movw	r22, r26
    315e:	cf 01       	movw	r24, r30
    3160:	11 24       	eor	r1, r1
    3162:	08 95       	ret

00003164 <__udivmodsi4>:
    3164:	a1 e2       	ldi	r26, 0x21	; 33
    3166:	1a 2e       	mov	r1, r26
    3168:	aa 1b       	sub	r26, r26
    316a:	bb 1b       	sub	r27, r27
    316c:	fd 01       	movw	r30, r26
    316e:	0d c0       	rjmp	.+26     	; 0x318a <__udivmodsi4_ep>

00003170 <__udivmodsi4_loop>:
    3170:	aa 1f       	adc	r26, r26
    3172:	bb 1f       	adc	r27, r27
    3174:	ee 1f       	adc	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	a2 17       	cp	r26, r18
    317a:	b3 07       	cpc	r27, r19
    317c:	e4 07       	cpc	r30, r20
    317e:	f5 07       	cpc	r31, r21
    3180:	20 f0       	brcs	.+8      	; 0x318a <__udivmodsi4_ep>
    3182:	a2 1b       	sub	r26, r18
    3184:	b3 0b       	sbc	r27, r19
    3186:	e4 0b       	sbc	r30, r20
    3188:	f5 0b       	sbc	r31, r21

0000318a <__udivmodsi4_ep>:
    318a:	66 1f       	adc	r22, r22
    318c:	77 1f       	adc	r23, r23
    318e:	88 1f       	adc	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	1a 94       	dec	r1
    3194:	69 f7       	brne	.-38     	; 0x3170 <__udivmodsi4_loop>
    3196:	60 95       	com	r22
    3198:	70 95       	com	r23
    319a:	80 95       	com	r24
    319c:	90 95       	com	r25
    319e:	9b 01       	movw	r18, r22
    31a0:	ac 01       	movw	r20, r24
    31a2:	bd 01       	movw	r22, r26
    31a4:	cf 01       	movw	r24, r30
    31a6:	08 95       	ret

000031a8 <__prologue_saves__>:
    31a8:	2f 92       	push	r2
    31aa:	3f 92       	push	r3
    31ac:	4f 92       	push	r4
    31ae:	5f 92       	push	r5
    31b0:	6f 92       	push	r6
    31b2:	7f 92       	push	r7
    31b4:	8f 92       	push	r8
    31b6:	9f 92       	push	r9
    31b8:	af 92       	push	r10
    31ba:	bf 92       	push	r11
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	ca 1b       	sub	r28, r26
    31d2:	db 0b       	sbc	r29, r27
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	09 94       	ijmp

000031e0 <__epilogue_restores__>:
    31e0:	2a 88       	ldd	r2, Y+18	; 0x12
    31e2:	39 88       	ldd	r3, Y+17	; 0x11
    31e4:	48 88       	ldd	r4, Y+16	; 0x10
    31e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    31ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    31f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31f2:	b9 84       	ldd	r11, Y+9	; 0x09
    31f4:	c8 84       	ldd	r12, Y+8	; 0x08
    31f6:	df 80       	ldd	r13, Y+7	; 0x07
    31f8:	ee 80       	ldd	r14, Y+6	; 0x06
    31fa:	fd 80       	ldd	r15, Y+5	; 0x05
    31fc:	0c 81       	ldd	r16, Y+4	; 0x04
    31fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3200:	aa 81       	ldd	r26, Y+2	; 0x02
    3202:	b9 81       	ldd	r27, Y+1	; 0x01
    3204:	ce 0f       	add	r28, r30
    3206:	d1 1d       	adc	r29, r1
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	ed 01       	movw	r28, r26
    3214:	08 95       	ret

00003216 <_exit>:
    3216:	f8 94       	cli

00003218 <__stop_program>:
    3218:	ff cf       	rjmp	.-2      	; 0x3218 <__stop_program>
