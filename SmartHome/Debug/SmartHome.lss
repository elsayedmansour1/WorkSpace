
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000455c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  0000455c  000045f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001e0  008001e0  00004770  2**0
                  ALLOC
  3 .stab         00004bfc  00000000  00000000  00004770  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bf4  00000000  00000000  0000936c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000af60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ea83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_1>
       8:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_2>
       c:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_3>
      10:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__vector_4>
      14:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_7>
      20:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_8>
      24:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_9>
      28:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_10>
      2c:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <main>
      8a:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ec       	ldi	r22, 0xC6	; 198
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 22 	jmp	0x450a	; 0x450a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 53       	subi	r30, 0x32	; 50
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWSR,1);
     e36:	a1 e2       	ldi	r26, 0x21	; 33
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e2       	ldi	r30, 0x21	; 33
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     e44:	a1 e2       	ldi	r26, 0x21	; 33
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e2       	ldi	r30, 0x21	; 33
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWBR = 12;
     e52:	e0 e2       	ldi	r30, 0x20	; 32
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8c e0       	ldi	r24, 0x0C	; 12
     e58:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     e5a:	a6 e5       	ldi	r26, 0x56	; 86
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 64       	ori	r24, 0x40	; 64
     e66:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     e68:	a6 e5       	ldi	r26, 0x56	; 86
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e5       	ldi	r30, 0x56	; 86
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	8c 93       	st	X, r24
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TWI_u8SlaveInit>:

void   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8ErrorState = STD_TYPES_OK;
	/* Set Slave Adress IN TWAR REG */
	TWAR = Copy_u8SlaveAddress << 1;
     e88:	e2 e2       	ldi	r30, 0x22	; 34
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	88 0f       	add	r24, r24
     e90:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     e92:	a6 e5       	ldi	r26, 0x56	; 86
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e6 e5       	ldi	r30, 0x56	; 86
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 64       	ori	r24, 0x40	; 64
     e9e:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     ea0:	a6 e5       	ldi	r26, 0x56	; 86
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	84 60       	ori	r24, 0x04	; 4
     eac:	8c 93       	st	X, r24
}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     ec4:	a6 e5       	ldi	r26, 0x56	; 86
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e5       	ldi	r30, 0x56	; 86
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     ed2:	a6 e5       	ldi	r26, 0x56	; 86
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e5       	ldi	r30, 0x56	; 86
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     ee0:	e6 e5       	ldi	r30, 0x56	; 86
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	dc f7       	brge	.-10     	; 0xee0 <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x08 )
     eea:	e1 e2       	ldi	r30, 0x21	; 33
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	88 7f       	andi	r24, 0xF8	; 248
     ef6:	90 70       	andi	r25, 0x00	; 0
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	91 05       	cpc	r25, r1
     efc:	11 f0       	breq	.+4      	; 0xf02 <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
}
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     f1a:	a6 e5       	ldi	r26, 0x56	; 86
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e6 e5       	ldi	r30, 0x56	; 86
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 62       	ori	r24, 0x20	; 32
     f26:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     f28:	a6 e5       	ldi	r26, 0x56	; 86
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e5       	ldi	r30, 0x56	; 86
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 68       	ori	r24, 0x80	; 128
     f34:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	dc f7       	brge	.-10     	; 0xf36 <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x10 )
     f40:	e1 e2       	ldi	r30, 0x21	; 33
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 7f       	andi	r24, 0xF8	; 248
     f4c:	90 70       	andi	r25, 0x00	; 0
     f4e:	80 31       	cpi	r24, 0x10	; 16
     f50:	91 05       	cpc	r25, r1
     f52:	11 f0       	breq	.+4      	; 0xf58 <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TWI_enuSendSlaveWithWrite+0x6>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     f72:	e3 e2       	ldi	r30, 0x23	; 35
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 0f       	add	r24, r24
     f7a:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
     f7c:	a3 e2       	ldi	r26, 0x23	; 35
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e3 e2       	ldi	r30, 0x23	; 35
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     f8a:	a6 e5       	ldi	r26, 0x56	; 86
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e6 e5       	ldi	r30, 0x56	; 86
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8f 7d       	andi	r24, 0xDF	; 223
     f96:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     f98:	a6 e5       	ldi	r26, 0x56	; 86
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     fa6:	e6 e5       	ldi	r30, 0x56	; 86
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	dc f7       	brge	.-10     	; 0xfa6 <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x18 )
     fb0:	e1 e2       	ldi	r30, 0x21	; 33
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	90 70       	andi	r25, 0x00	; 0
     fbe:	88 31       	cpi	r24, 0x18	; 24
     fc0:	91 05       	cpc	r25, r1
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <TWI_enuSendSlaveWithRead+0x6>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     fe4:	e3 e2       	ldi	r30, 0x23	; 35
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	88 0f       	add	r24, r24
     fec:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
     fee:	a3 e2       	ldi	r26, 0x23	; 35
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e3 e2       	ldi	r30, 0x23	; 35
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     ffc:	a6 e5       	ldi	r26, 0x56	; 86
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 7d       	andi	r24, 0xDF	; 223
    1008:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    100a:	a6 e5       	ldi	r26, 0x56	; 86
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    1018:	e6 e5       	ldi	r30, 0x56	; 86
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 23       	and	r24, r24
    1020:	dc f7       	brge	.-10     	; 0x1018 <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x40 )
    1022:	e1 e2       	ldi	r30, 0x21	; 33
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	88 7f       	andi	r24, 0xF8	; 248
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	91 05       	cpc	r25, r1
    1034:	11 f0       	breq	.+4      	; 0x103a <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <TWI_enuSendDataByte+0x6>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWDR = Copy_u8Data;
    1056:	e3 e2       	ldi	r30, 0x23	; 35
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWCR,7);
    105e:	a6 e5       	ldi	r26, 0x56	; 86
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e6 e5       	ldi	r30, 0x56	; 86
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 68       	ori	r24, 0x80	; 128
    106a:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    106c:	e6 e5       	ldi	r30, 0x56	; 86
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	dc f7       	brge	.-10     	; 0x106c <TWI_enuSendDataByte+0x26>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x28 )
    1076:	e1 e2       	ldi	r30, 0x21	; 33
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	88 7f       	andi	r24, 0xF8	; 248
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	88 32       	cpi	r24, 0x28	; 40
    1086:	91 05       	cpc	r25, r1
    1088:	11 f0       	breq	.+4      	; 0x108e <TWI_enuSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <TWI_enuReceiveDataByte+0x6>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9b 83       	std	Y+3, r25	; 0x03
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	01 f1       	breq	.+64     	; 0x10f6 <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWCR,7);
    10b6:	a6 e5       	ldi	r26, 0x56	; 86
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e6 e5       	ldi	r30, 0x56	; 86
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 68       	ori	r24, 0x80	; 128
    10c2:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWCR,7)));
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	dc f7       	brge	.-10     	; 0x10c4 <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWSR & 0xF8) != 0x50 )
    10ce:	e1 e2       	ldi	r30, 0x21	; 33
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	88 7f       	andi	r24, 0xF8	; 248
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	80 35       	cpi	r24, 0x50	; 80
    10de:	91 05       	cpc	r25, r1
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
    10e2:	88 e0       	ldi	r24, 0x08	; 8
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWDR;
    10e8:	e3 e2       	ldi	r30, 0x23	; 35
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	ea 81       	ldd	r30, Y+2	; 0x02
    10f0:	fb 81       	ldd	r31, Y+3	; 0x03
    10f2:	80 83       	st	Z, r24
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
    10f6:	87 e0       	ldi	r24, 0x07	; 7
    10f8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWCR,4);
    1110:	a6 e5       	ldi	r26, 0x56	; 86
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e6 e5       	ldi	r30, 0x56	; 86
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 61       	ori	r24, 0x10	; 16
    111c:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    111e:	a6 e5       	ldi	r26, 0x56	; 86
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e6 e5       	ldi	r30, 0x56	; 86
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 68       	ori	r24, 0x80	; 128
    112a:	8c 93       	st	X, r24
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T2)(void)=NULL;
static void (*GPFunc_T1)(void)=NULL;


void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <TIMER0_OV_SetCallBack+0x6>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	90 93 e1 01 	sts	0x01E1, r25
    1148:	80 93 e0 01 	sts	0x01E0, r24
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <TIMER0_CM_SetCallBack+0x6>
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	90 93 e1 01 	sts	0x01E1, r25
    116c:	80 93 e0 01 	sts	0x01E0, r24
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <TIMER1_OV_SetCallBack+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	90 93 e5 01 	sts	0x01E5, r25
    1190:	80 93 e4 01 	sts	0x01E4, r24
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <TIMER1_CM_A_SetCallBack+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	90 93 e5 01 	sts	0x01E5, r25
    11b4:	80 93 e4 01 	sts	0x01E4, r24
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <TIMER1_CM_B_SetCallBack+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	90 93 e5 01 	sts	0x01E5, r25
    11d8:	80 93 e4 01 	sts	0x01E4, r24
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <TIMER2_OV_SetCallBack+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	90 93 e3 01 	sts	0x01E3, r25
    11fc:	80 93 e2 01 	sts	0x01E2, r24
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <TIMER2_CM_SetCallBack+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	90 93 e3 01 	sts	0x01E3, r25
    1220:	80 93 e2 01 	sts	0x01E2, r24
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    1258:	80 91 e0 01 	lds	r24, 0x01E0
    125c:	90 91 e1 01 	lds	r25, 0x01E1
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	29 f0       	breq	.+10     	; 0x126e <__vector_11+0x40>
	{
		GPFunc_T0();
    1264:	e0 91 e0 01 	lds	r30, 0x01E0
    1268:	f0 91 e1 01 	lds	r31, 0x01E1
    126c:	09 95       	icall
	}
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_10>:
ISR_TMR0_Comp()
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    12be:	80 91 e0 01 	lds	r24, 0x01E0
    12c2:	90 91 e1 01 	lds	r25, 0x01E1
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <__vector_10+0x40>
	{
		GPFunc_T0();
    12ca:	e0 91 e0 01 	lds	r30, 0x01E0
    12ce:	f0 91 e1 01 	lds	r31, 0x01E1
    12d2:	09 95       	icall
	}
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1324:	80 91 e4 01 	lds	r24, 0x01E4
    1328:	90 91 e5 01 	lds	r25, 0x01E5
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	29 f0       	breq	.+10     	; 0x133a <__vector_9+0x40>
		{
			GPFunc_T1();
    1330:	e0 91 e4 01 	lds	r30, 0x01E4
    1334:	f0 91 e5 01 	lds	r31, 0x01E5
    1338:	09 95       	icall
		}
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <__vector_7>:
ISR_TMR1_CompA()
{
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	2f 93       	push	r18
    136c:	3f 93       	push	r19
    136e:	4f 93       	push	r20
    1370:	5f 93       	push	r21
    1372:	6f 93       	push	r22
    1374:	7f 93       	push	r23
    1376:	8f 93       	push	r24
    1378:	9f 93       	push	r25
    137a:	af 93       	push	r26
    137c:	bf 93       	push	r27
    137e:	ef 93       	push	r30
    1380:	ff 93       	push	r31
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    138a:	80 91 e4 01 	lds	r24, 0x01E4
    138e:	90 91 e5 01 	lds	r25, 0x01E5
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	29 f0       	breq	.+10     	; 0x13a0 <__vector_7+0x40>
		{
			GPFunc_T1();
    1396:	e0 91 e4 01 	lds	r30, 0x01E4
    139a:	f0 91 e5 01 	lds	r31, 0x01E5
    139e:	09 95       	icall
		}
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_8>:
ISR_TMR1_CompB()
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    13f0:	80 91 e4 01 	lds	r24, 0x01E4
    13f4:	90 91 e5 01 	lds	r25, 0x01E5
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	29 f0       	breq	.+10     	; 0x1406 <__vector_8+0x40>
		{
			GPFunc_T1();
    13fc:	e0 91 e4 01 	lds	r30, 0x01E4
    1400:	f0 91 e5 01 	lds	r31, 0x01E5
    1404:	09 95       	icall
		}
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1456:	80 91 e2 01 	lds	r24, 0x01E2
    145a:	90 91 e3 01 	lds	r25, 0x01E3
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	29 f0       	breq	.+10     	; 0x146c <__vector_5+0x40>
	{
		GPFunc_T2();
    1462:	e0 91 e2 01 	lds	r30, 0x01E2
    1466:	f0 91 e3 01 	lds	r31, 0x01E3
    146a:	09 95       	icall
	}
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	bf 91       	pop	r27
    1476:	af 91       	pop	r26
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	7f 91       	pop	r23
    147e:	6f 91       	pop	r22
    1480:	5f 91       	pop	r21
    1482:	4f 91       	pop	r20
    1484:	3f 91       	pop	r19
    1486:	2f 91       	pop	r18
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <__vector_4>:
ISR_TMR2_Comp()
{
    1492:	1f 92       	push	r1
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	0f 92       	push	r0
    149a:	11 24       	eor	r1, r1
    149c:	2f 93       	push	r18
    149e:	3f 93       	push	r19
    14a0:	4f 93       	push	r20
    14a2:	5f 93       	push	r21
    14a4:	6f 93       	push	r22
    14a6:	7f 93       	push	r23
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
    14ac:	af 93       	push	r26
    14ae:	bf 93       	push	r27
    14b0:	ef 93       	push	r30
    14b2:	ff 93       	push	r31
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    14bc:	80 91 e2 01 	lds	r24, 0x01E2
    14c0:	90 91 e3 01 	lds	r25, 0x01E3
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <__vector_4+0x40>
	{
		GPFunc_T2();
    14c8:	e0 91 e2 01 	lds	r30, 0x01E2
    14cc:	f0 91 e3 01 	lds	r31, 0x01E3
    14d0:	09 95       	icall
	}
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    1500:	a3 e5       	ldi	r26, 0x53	; 83
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e3 e5       	ldi	r30, 0x53	; 83
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	88 60       	ori	r24, 0x08	; 8
    150c:	8c 93       	st	X, r24
    150e:	a3 e5       	ldi	r26, 0x53	; 83
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e3 e5       	ldi	r30, 0x53	; 83
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 64       	ori	r24, 0x40	; 64
    151a:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    151c:	a3 e5       	ldi	r26, 0x53	; 83
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e3 e5       	ldi	r30, 0x53	; 83
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	8c 93       	st	X, r24
    152a:	a3 e5       	ldi	r26, 0x53	; 83
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e3 e5       	ldi	r30, 0x53	; 83
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 7e       	andi	r24, 0xEF	; 239
    1536:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    1538:	a3 e5       	ldi	r26, 0x53	; 83
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e3 e5       	ldi	r30, 0x53	; 83
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	84 60       	ori	r24, 0x04	; 4
    1544:	8c 93       	st	X, r24
    1546:	a3 e5       	ldi	r26, 0x53	; 83
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e3 e5       	ldi	r30, 0x53	; 83
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8d 7f       	andi	r24, 0xFD	; 253
    1552:	8c 93       	st	X, r24
    1554:	a3 e5       	ldi	r26, 0x53	; 83
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e3 e5       	ldi	r30, 0x53	; 83
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8e 7f       	andi	r24, 0xFE	; 254
    1560:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=19999;		// For 50 Hz for servo motor
    1570:	e6 e4       	ldi	r30, 0x46	; 70
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8f e1       	ldi	r24, 0x1F	; 31
    1576:	9e e4       	ldi	r25, 0x4E	; 78
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
	prescaler_clk_8_1;
    157c:	ae e4       	ldi	r26, 0x4E	; 78
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ee e4       	ldi	r30, 0x4E	; 78
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	8b 7f       	andi	r24, 0xFB	; 251
    1588:	8c 93       	st	X, r24
    158a:	ae e4       	ldi	r26, 0x4E	; 78
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ee e4       	ldi	r30, 0x4E	; 78
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	82 60       	ori	r24, 0x02	; 2
    1596:	8c 93       	st	X, r24
    1598:	ae e4       	ldi	r26, 0x4E	; 78
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ee e4       	ldi	r30, 0x4E	; 78
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8e 7f       	andi	r24, 0xFE	; 254
    15a4:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    15a6:	af e4       	ldi	r26, 0x4F	; 79
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ef e4       	ldi	r30, 0x4F	; 79
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8e 7f       	andi	r24, 0xFE	; 254
    15b2:	8c 93       	st	X, r24
    15b4:	af e4       	ldi	r26, 0x4F	; 79
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ef e4       	ldi	r30, 0x4F	; 79
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	82 60       	ori	r24, 0x02	; 2
    15c0:	8c 93       	st	X, r24
    15c2:	ae e4       	ldi	r26, 0x4E	; 78
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ee e4       	ldi	r30, 0x4E	; 78
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 60       	ori	r24, 0x08	; 8
    15ce:	8c 93       	st	X, r24
    15d0:	ae e4       	ldi	r26, 0x4E	; 78
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ee e4       	ldi	r30, 0x4E	; 78
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 61       	ori	r24, 0x10	; 16
    15dc:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    15de:	af e4       	ldi	r26, 0x4F	; 79
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ef e4       	ldi	r30, 0x4F	; 79
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7b       	andi	r24, 0xBF	; 191
    15ea:	8c 93       	st	X, r24
    15ec:	af e4       	ldi	r26, 0x4F	; 79
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e4       	ldi	r30, 0x4F	; 79
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 68       	ori	r24, 0x80	; 128
    15f8:	8c 93       	st	X, r24
    15fa:	af e4       	ldi	r26, 0x4F	; 79
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ef e4       	ldi	r30, 0x4F	; 79
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7e       	andi	r24, 0xEF	; 239
    1606:	8c 93       	st	X, r24
    1608:	af e4       	ldi	r26, 0x4F	; 79
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ef e4       	ldi	r30, 0x4F	; 79
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 62       	ori	r24, 0x20	; 32
    1614:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62

}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1632:	a9 e5       	ldi	r26, 0x59	; 89
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e9 e5       	ldi	r30, 0x59	; 89
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 62       	ori	r24, 0x20	; 32
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <Set_Duty_Cycle_TIMER_0+0xa>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <Set_Duty_Cycle_TIMER_0+0xc>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	69 83       	std	Y+1, r22	; 0x01
    1658:	7a 83       	std	Y+2, r23	; 0x02
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    165e:	69 81       	ldd	r22, Y+1	; 0x01
    1660:	7a 81       	ldd	r23, Y+2	; 0x02
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	48 ec       	ldi	r20, 0xC8	; 200
    166c:	52 e4       	ldi	r21, 0x42	; 66
    166e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	9a 83       	std	Y+2, r25	; 0x02
    167a:	ab 83       	std	Y+3, r26	; 0x03
    167c:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    167e:	0c e5       	ldi	r16, 0x5C	; 92
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	69 81       	ldd	r22, Y+1	; 0x01
    1684:	7a 81       	ldd	r23, Y+2	; 0x02
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	53 e4       	ldi	r21, 0x43	; 67
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	f8 01       	movw	r30, r16
    16bc:	80 83       	st	Z, r24

}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <Set_Duty_Cycle_TIMER_1_A+0xa>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Set_Duty_Cycle_TIMER_1_A+0xc>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	69 83       	std	Y+1, r22	; 0x01
    16e2:	7a 83       	std	Y+2, r23	; 0x02
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    16e8:	69 81       	ldd	r22, Y+1	; 0x01
    16ea:	7a 81       	ldd	r23, Y+2	; 0x02
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	48 ec       	ldi	r20, 0xC8	; 200
    16f6:	52 e4       	ldi	r21, 0x42	; 66
    16f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	ab 83       	std	Y+3, r26	; 0x03
    1706:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    1708:	0a e4       	ldi	r16, 0x4A	; 74
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	e6 e4       	ldi	r30, 0x46	; 70
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	cc 01       	movw	r24, r24
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	29 81       	ldd	r18, Y+1	; 0x01
    172c:	3a 81       	ldd	r19, Y+2	; 0x02
    172e:	4b 81       	ldd	r20, Y+3	; 0x03
    1730:	5c 81       	ldd	r21, Y+4	; 0x04
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	f8 01       	movw	r30, r16
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <Set_Duty_Cycle_TIMER_1_B+0xa>
    177c:	00 d0       	rcall	.+0      	; 0x177e <Set_Duty_Cycle_TIMER_1_B+0xc>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	69 83       	std	Y+1, r22	; 0x01
    1784:	7a 83       	std	Y+2, r23	; 0x02
    1786:	8b 83       	std	Y+3, r24	; 0x03
    1788:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    178a:	69 81       	ldd	r22, Y+1	; 0x01
    178c:	7a 81       	ldd	r23, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	48 ec       	ldi	r20, 0xC8	; 200
    1798:	52 e4       	ldi	r21, 0x42	; 66
    179a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	ab 83       	std	Y+3, r26	; 0x03
    17a8:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    17aa:	08 e4       	ldi	r16, 0x48	; 72
    17ac:	10 e0       	ldi	r17, 0x00	; 0
    17ae:	e6 e4       	ldi	r30, 0x46	; 70
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	cc 01       	movw	r24, r24
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	3a 81       	ldd	r19, Y+2	; 0x02
    17d0:	4b 81       	ldd	r20, Y+3	; 0x03
    17d2:	5c 81       	ldd	r21, Y+4	; 0x04
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <Set_Duty_Cycle_TIMER_2+0xa>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <Set_Duty_Cycle_TIMER_2+0xc>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	69 83       	std	Y+1, r22	; 0x01
    1826:	7a 83       	std	Y+2, r23	; 0x02
    1828:	8b 83       	std	Y+3, r24	; 0x03
    182a:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    182c:	69 81       	ldd	r22, Y+1	; 0x01
    182e:	7a 81       	ldd	r23, Y+2	; 0x02
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	48 ec       	ldi	r20, 0xC8	; 200
    183a:	52 e4       	ldi	r21, 0x42	; 66
    183c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	ab 83       	std	Y+3, r26	; 0x03
    184a:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    184c:	03 e4       	ldi	r16, 0x43	; 67
    184e:	10 e0       	ldi	r17, 0x00	; 0
    1850:	69 81       	ldd	r22, Y+1	; 0x01
    1852:	7a 81       	ldd	r23, Y+2	; 0x02
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	53 e4       	ldi	r21, 0x43	; 67
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	f8 01       	movw	r30, r16
    188a:	80 83       	st	Z, r24

}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    18a6:	af e5       	ldi	r26, 0x5F	; 95
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e5       	ldi	r30, 0x5F	; 95
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 68       	ori	r24, 0x80	; 128
    18b2:	8c 93       	st	X, r24
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    18c2:	af e5       	ldi	r26, 0x5F	; 95
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ef e5       	ldi	r30, 0x5F	; 95
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 77       	andi	r24, 0x7F	; 127
    18ce:	8c 93       	st	X, r24
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <INT0_SetCallBack+0x6>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	90 93 e7 01 	sts	0x01E7, r25
    18ec:	80 93 e6 01 	sts	0x01E6, r24
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <INT1_SetCallBack+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	90 93 e9 01 	sts	0x01E9, r25
    1910:	80 93 e8 01 	sts	0x01E8, r24
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <INT2_SetCallBack+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	90 93 eb 01 	sts	0x01EB, r25
    1934:	80 93 ea 01 	sts	0x01EA, r24
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <__vector_1>:
ISR(__vector_1)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    196c:	80 91 e6 01 	lds	r24, 0x01E6
    1970:	90 91 e7 01 	lds	r25, 0x01E7
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	29 f0       	breq	.+10     	; 0x1982 <__vector_1+0x40>
	{
		GPFunc0();
    1978:	e0 91 e6 01 	lds	r30, 0x01E6
    197c:	f0 91 e7 01 	lds	r31, 0x01E7
    1980:	09 95       	icall
	}
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__vector_2>:
ISR(__vector_2)
{
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	2f 93       	push	r18
    19b4:	3f 93       	push	r19
    19b6:	4f 93       	push	r20
    19b8:	5f 93       	push	r21
    19ba:	6f 93       	push	r22
    19bc:	7f 93       	push	r23
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	af 93       	push	r26
    19c4:	bf 93       	push	r27
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    19d2:	80 91 e8 01 	lds	r24, 0x01E8
    19d6:	90 91 e9 01 	lds	r25, 0x01E9
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <__vector_2+0x40>
	{
		GPFunc1();
    19de:	e0 91 e8 01 	lds	r30, 0x01E8
    19e2:	f0 91 e9 01 	lds	r31, 0x01E9
    19e6:	09 95       	icall
	}
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_3>:
ISR(__vector_3)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    1a38:	80 91 ea 01 	lds	r24, 0x01EA
    1a3c:	90 91 eb 01 	lds	r25, 0x01EB
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	29 f0       	breq	.+10     	; 0x1a4e <__vector_3+0x40>
	{
		GPFunc2();
    1a44:	e0 91 ea 01 	lds	r30, 0x01EA
    1a48:	f0 91 eb 01 	lds	r31, 0x01EB
    1a4c:	09 95       	icall
	}
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1a7c:	ab e5       	ldi	r26, 0x5B	; 91
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	eb e5       	ldi	r30, 0x5B	; 91
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 64       	ori	r24, 0x40	; 64
    1a88:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1a98:	a5 e5       	ldi	r26, 0x55	; 85
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e5       	ldi	r30, 0x55	; 85
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8d 7f       	andi	r24, 0xFD	; 253
    1aa4:	8c 93       	st	X, r24
	#endif
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1ab4:	ab e5       	ldi	r26, 0x5B	; 91
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e5       	ldi	r30, 0x5B	; 91
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 68       	ori	r24, 0x80	; 128
    1ac0:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8b 7f       	andi	r24, 0xFB	; 251
    1ace:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    1ad0:	a5 e5       	ldi	r26, 0x55	; 85
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e5       	ldi	r30, 0x55	; 85
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 60       	ori	r24, 0x08	; 8
    1adc:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1aec:	ab e5       	ldi	r26, 0x5B	; 91
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	eb e5       	ldi	r30, 0x5B	; 91
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	80 62       	ori	r24, 0x20	; 32
    1af8:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1afa:	a4 e5       	ldi	r26, 0x54	; 84
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e4 e5       	ldi	r30, 0x54	; 84
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 7b       	andi	r24, 0xBF	; 191
    1b06:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	27 97       	sbiw	r28, 0x07	; 7
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6a 83       	std	Y+2, r22	; 0x02
    1b26:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <DIO_VidSetPinDirection+0x22>
    1b2e:	6f c0       	rjmp	.+222    	; 0x1c0e <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3f 83       	std	Y+7, r19	; 0x07
    1b38:	2e 83       	std	Y+6, r18	; 0x06
    1b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	49 f1       	breq	.+82     	; 0x1b96 <DIO_VidSetPinDirection+0x88>
    1b44:	2e 81       	ldd	r18, Y+6	; 0x06
    1b46:	3f 81       	ldd	r19, Y+7	; 0x07
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <DIO_VidSetPinDirection+0x4a>
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	9f 81       	ldd	r25, Y+7	; 0x07
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <DIO_VidSetPinDirection+0x60>
    1b56:	d2 c0       	rjmp	.+420    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
    1b58:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	71 f1       	breq	.+92     	; 0x1bbe <DIO_VidSetPinDirection+0xb0>
    1b62:	8e 81       	ldd	r24, Y+6	; 0x06
    1b64:	9f 81       	ldd	r25, Y+7	; 0x07
    1b66:	83 30       	cpi	r24, 0x03	; 3
    1b68:	91 05       	cpc	r25, r1
    1b6a:	e9 f1       	breq	.+122    	; 0x1be6 <DIO_VidSetPinDirection+0xd8>
    1b6c:	c7 c0       	rjmp	.+398    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    1b6e:	aa e3       	ldi	r26, 0x3A	; 58
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ea e3       	ldi	r30, 0x3A	; 58
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_VidSetPinDirection+0x7e>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_VidSetPinDirection+0x7a>
    1b90:	84 2b       	or	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	b3 c0       	rjmp	.+358    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    1b96:	a7 e3       	ldi	r26, 0x37	; 55
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e7 e3       	ldi	r30, 0x37	; 55
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_VidSetPinDirection+0xa6>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <DIO_VidSetPinDirection+0xa2>
    1bb8:	84 2b       	or	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	9f c0       	rjmp	.+318    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    1bbe:	a4 e3       	ldi	r26, 0x34	; 52
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e4 e3       	ldi	r30, 0x34	; 52
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_VidSetPinDirection+0xce>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_VidSetPinDirection+0xca>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	8b c0       	rjmp	.+278    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1be6:	a1 e3       	ldi	r26, 0x31	; 49
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e1 e3       	ldi	r30, 0x31	; 49
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_VidSetPinDirection+0xf6>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_VidSetPinDirection+0xf2>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	77 c0       	rjmp	.+238    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	88 23       	and	r24, r24
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <DIO_VidSetPinDirection+0x108>
    1c14:	73 c0       	rjmp	.+230    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3d 83       	std	Y+5, r19	; 0x05
    1c1e:	2c 83       	std	Y+4, r18	; 0x04
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	59 f1       	breq	.+86     	; 0x1c80 <DIO_VidSetPinDirection+0x172>
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <DIO_VidSetPinDirection+0x130>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	9d 81       	ldd	r25, Y+5	; 0x05
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f0       	breq	.+26     	; 0x1c56 <DIO_VidSetPinDirection+0x148>
    1c3c:	5f c0       	rjmp	.+190    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
    1c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c40:	3d 81       	ldd	r19, Y+5	; 0x05
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	89 f1       	breq	.+98     	; 0x1caa <DIO_VidSetPinDirection+0x19c>
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <DIO_VidSetPinDirection+0x146>
    1c52:	40 c0       	rjmp	.+128    	; 0x1cd4 <DIO_VidSetPinDirection+0x1c6>
    1c54:	53 c0       	rjmp	.+166    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1c56:	aa e3       	ldi	r26, 0x3A	; 58
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ea e3       	ldi	r30, 0x3A	; 58
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_VidSetPinDirection+0x166>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_VidSetPinDirection+0x162>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	3e c0       	rjmp	.+124    	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    1c80:	a7 e3       	ldi	r26, 0x37	; 55
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e7 e3       	ldi	r30, 0x37	; 55
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_VidSetPinDirection+0x190>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_VidSetPinDirection+0x18c>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	29 c0       	rjmp	.+82     	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1caa:	a4 e3       	ldi	r26, 0x34	; 52
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e4 e3       	ldi	r30, 0x34	; 52
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_VidSetPinDirection+0x1ba>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_VidSetPinDirection+0x1b6>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1cd4:	a1 e3       	ldi	r26, 0x31	; 49
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e1 e3       	ldi	r30, 0x31	; 49
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <DIO_VidSetPinDirection+0x1e4>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <DIO_VidSetPinDirection+0x1e0>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1cfc:	27 96       	adiw	r28, 0x07	; 7
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	27 97       	sbiw	r28, 0x07	; 7
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	6a 83       	std	Y+2, r22	; 0x02
    1d26:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <DIO_VidSetPinValue+0x22>
    1d2e:	6f c0       	rjmp	.+222    	; 0x1e0e <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	3f 83       	std	Y+7, r19	; 0x07
    1d38:	2e 83       	std	Y+6, r18	; 0x06
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	91 05       	cpc	r25, r1
    1d42:	49 f1       	breq	.+82     	; 0x1d96 <DIO_VidSetPinValue+0x88>
    1d44:	2e 81       	ldd	r18, Y+6	; 0x06
    1d46:	3f 81       	ldd	r19, Y+7	; 0x07
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <DIO_VidSetPinValue+0x4a>
    1d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d50:	9f 81       	ldd	r25, Y+7	; 0x07
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <DIO_VidSetPinValue+0x60>
    1d56:	d2 c0       	rjmp	.+420    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
    1d58:	2e 81       	ldd	r18, Y+6	; 0x06
    1d5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d5c:	22 30       	cpi	r18, 0x02	; 2
    1d5e:	31 05       	cpc	r19, r1
    1d60:	71 f1       	breq	.+92     	; 0x1dbe <DIO_VidSetPinValue+0xb0>
    1d62:	8e 81       	ldd	r24, Y+6	; 0x06
    1d64:	9f 81       	ldd	r25, Y+7	; 0x07
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	91 05       	cpc	r25, r1
    1d6a:	e9 f1       	breq	.+122    	; 0x1de6 <DIO_VidSetPinValue+0xd8>
    1d6c:	c7 c0       	rjmp	.+398    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1d6e:	ab e3       	ldi	r26, 0x3B	; 59
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	eb e3       	ldi	r30, 0x3B	; 59
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_VidSetPinValue+0x7e>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_VidSetPinValue+0x7a>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	b3 c0       	rjmp	.+358    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1d96:	a8 e3       	ldi	r26, 0x38	; 56
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e8 e3       	ldi	r30, 0x38	; 56
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_VidSetPinValue+0xa6>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_VidSetPinValue+0xa2>
    1db8:	84 2b       	or	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	9f c0       	rjmp	.+318    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    1dbe:	a5 e3       	ldi	r26, 0x35	; 53
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 e3       	ldi	r30, 0x35	; 53
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_VidSetPinValue+0xce>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <DIO_VidSetPinValue+0xca>
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	8b c0       	rjmp	.+278    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1de6:	a2 e3       	ldi	r26, 0x32	; 50
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e2 e3       	ldi	r30, 0x32	; 50
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 2e       	mov	r0, r18
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <DIO_VidSetPinValue+0xf6>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <DIO_VidSetPinValue+0xf2>
    1e08:	84 2b       	or	r24, r20
    1e0a:	8c 93       	st	X, r24
    1e0c:	77 c0       	rjmp	.+238    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	88 23       	and	r24, r24
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <DIO_VidSetPinValue+0x108>
    1e14:	73 c0       	rjmp	.+230    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3d 83       	std	Y+5, r19	; 0x05
    1e1e:	2c 83       	std	Y+4, r18	; 0x04
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	9d 81       	ldd	r25, Y+5	; 0x05
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	91 05       	cpc	r25, r1
    1e28:	59 f1       	breq	.+86     	; 0x1e80 <DIO_VidSetPinValue+0x172>
    1e2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	31 05       	cpc	r19, r1
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <DIO_VidSetPinValue+0x130>
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f0       	breq	.+26     	; 0x1e56 <DIO_VidSetPinValue+0x148>
    1e3c:	5f c0       	rjmp	.+190    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
    1e3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e40:	3d 81       	ldd	r19, Y+5	; 0x05
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	89 f1       	breq	.+98     	; 0x1eaa <DIO_VidSetPinValue+0x19c>
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <DIO_VidSetPinValue+0x146>
    1e52:	40 c0       	rjmp	.+128    	; 0x1ed4 <DIO_VidSetPinValue+0x1c6>
    1e54:	53 c0       	rjmp	.+166    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1e56:	ab e3       	ldi	r26, 0x3B	; 59
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	eb e3       	ldi	r30, 0x3B	; 59
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <DIO_VidSetPinValue+0x166>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <DIO_VidSetPinValue+0x162>
    1e78:	80 95       	com	r24
    1e7a:	84 23       	and	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	3e c0       	rjmp	.+124    	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    1e80:	a8 e3       	ldi	r26, 0x38	; 56
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e8 e3       	ldi	r30, 0x38	; 56
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_VidSetPinValue+0x190>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_VidSetPinValue+0x18c>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	29 c0       	rjmp	.+82     	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1eaa:	a5 e3       	ldi	r26, 0x35	; 53
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e3       	ldi	r30, 0x35	; 53
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <DIO_VidSetPinValue+0x1ba>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <DIO_VidSetPinValue+0x1b6>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_VidSetPinValue+0x1e4>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_VidSetPinValue+0x1e0>
    1ef6:	80 95       	com	r24
    1ef8:	84 23       	and	r24, r20
    1efa:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1efc:	27 96       	adiw	r28, 0x07	; 7
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <DIO_VidSetPortDirection+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <DIO_VidSetPortDirection+0x8>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3c 83       	std	Y+4, r19	; 0x04
    1f26:	2b 83       	std	Y+3, r18	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	d1 f0       	breq	.+52     	; 0x1f66 <DIO_VidSetPortDirection+0x58>
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <DIO_VidSetPortDirection+0x38>
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <DIO_VidSetPortDirection+0x4e>
    1f44:	1e c0       	rjmp	.+60     	; 0x1f82 <DIO_VidSetPortDirection+0x74>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	81 f0       	breq	.+32     	; 0x1f70 <DIO_VidSetPortDirection+0x62>
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	81 f0       	breq	.+32     	; 0x1f7a <DIO_VidSetPortDirection+0x6c>
    1f5a:	13 c0       	rjmp	.+38     	; 0x1f82 <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1f5c:	ea e3       	ldi	r30, 0x3A	; 58
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	80 83       	st	Z, r24
    1f64:	0e c0       	rjmp	.+28     	; 0x1f82 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    1f66:	e7 e3       	ldi	r30, 0x37	; 55
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	80 83       	st	Z, r24
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    1f70:	e4 e3       	ldi	r30, 0x34	; 52
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	80 83       	st	Z, r24
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    1f7a:	e1 e3       	ldi	r30, 0x31	; 49
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	80 83       	st	Z, r24
	}	
	
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <DIO_VidSetPortValue+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <DIO_VidSetPortValue+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3c 83       	std	Y+4, r19	; 0x04
    1fa8:	2b 83       	std	Y+3, r18	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	d1 f0       	breq	.+52     	; 0x1fe8 <DIO_VidSetPortValue+0x58>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	31 05       	cpc	r19, r1
    1fbc:	2c f4       	brge	.+10     	; 0x1fc8 <DIO_VidSetPortValue+0x38>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	61 f0       	breq	.+24     	; 0x1fde <DIO_VidSetPortValue+0x4e>
    1fc6:	1e c0       	rjmp	.+60     	; 0x2004 <DIO_VidSetPortValue+0x74>
    1fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fca:	3c 81       	ldd	r19, Y+4	; 0x04
    1fcc:	22 30       	cpi	r18, 0x02	; 2
    1fce:	31 05       	cpc	r19, r1
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <DIO_VidSetPortValue+0x62>
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	83 30       	cpi	r24, 0x03	; 3
    1fd8:	91 05       	cpc	r25, r1
    1fda:	81 f0       	breq	.+32     	; 0x1ffc <DIO_VidSetPortValue+0x6c>
    1fdc:	13 c0       	rjmp	.+38     	; 0x2004 <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24
    1fe6:	0e c0       	rjmp	.+28     	; 0x2004 <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    1fe8:	e8 e3       	ldi	r30, 0x38	; 56
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	80 83       	st	Z, r24
    1ff0:	09 c0       	rjmp	.+18     	; 0x2004 <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    1ff2:	e5 e3       	ldi	r30, 0x35	; 53
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	80 83       	st	Z, r24
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    1ffc:	e2 e3       	ldi	r30, 0x32	; 50
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	80 83       	st	Z, r24
	}	
}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <DIO_u8GetPinValue+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <DIO_u8GetPinValue+0x8>
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	8a 83       	std	Y+2, r24	; 0x02
    2022:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    2024:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	3d 83       	std	Y+5, r19	; 0x05
    202e:	2c 83       	std	Y+4, r18	; 0x04
    2030:	4c 81       	ldd	r20, Y+4	; 0x04
    2032:	5d 81       	ldd	r21, Y+5	; 0x05
    2034:	41 30       	cpi	r20, 0x01	; 1
    2036:	51 05       	cpc	r21, r1
    2038:	41 f1       	breq	.+80     	; 0x208a <DIO_u8GetPinValue+0x78>
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	9d 81       	ldd	r25, Y+5	; 0x05
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	91 05       	cpc	r25, r1
    2042:	34 f4       	brge	.+12     	; 0x2050 <DIO_u8GetPinValue+0x3e>
    2044:	2c 81       	ldd	r18, Y+4	; 0x04
    2046:	3d 81       	ldd	r19, Y+5	; 0x05
    2048:	21 15       	cp	r18, r1
    204a:	31 05       	cpc	r19, r1
    204c:	61 f0       	breq	.+24     	; 0x2066 <DIO_u8GetPinValue+0x54>
    204e:	52 c0       	rjmp	.+164    	; 0x20f4 <DIO_u8GetPinValue+0xe2>
    2050:	4c 81       	ldd	r20, Y+4	; 0x04
    2052:	5d 81       	ldd	r21, Y+5	; 0x05
    2054:	42 30       	cpi	r20, 0x02	; 2
    2056:	51 05       	cpc	r21, r1
    2058:	51 f1       	breq	.+84     	; 0x20ae <DIO_u8GetPinValue+0x9c>
    205a:	8c 81       	ldd	r24, Y+4	; 0x04
    205c:	9d 81       	ldd	r25, Y+5	; 0x05
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	91 05       	cpc	r25, r1
    2062:	b9 f1       	breq	.+110    	; 0x20d2 <DIO_u8GetPinValue+0xc0>
    2064:	47 c0       	rjmp	.+142    	; 0x20f4 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    2066:	e9 e3       	ldi	r30, 0x39	; 57
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a9 01       	movw	r20, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <DIO_u8GetPinValue+0x6c>
    207a:	55 95       	asr	r21
    207c:	47 95       	ror	r20
    207e:	8a 95       	dec	r24
    2080:	e2 f7       	brpl	.-8      	; 0x207a <DIO_u8GetPinValue+0x68>
    2082:	ca 01       	movw	r24, r20
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	35 c0       	rjmp	.+106    	; 0x20f4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    208a:	e6 e3       	ldi	r30, 0x36	; 54
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_u8GetPinValue+0x90>
    209e:	55 95       	asr	r21
    20a0:	47 95       	ror	r20
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_u8GetPinValue+0x8c>
    20a6:	ca 01       	movw	r24, r20
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	23 c0       	rjmp	.+70     	; 0x20f4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    20ae:	e3 e3       	ldi	r30, 0x33	; 51
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a9 01       	movw	r20, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_u8GetPinValue+0xb4>
    20c2:	55 95       	asr	r21
    20c4:	47 95       	ror	r20
    20c6:	8a 95       	dec	r24
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <DIO_u8GetPinValue+0xb0>
    20ca:	ca 01       	movw	r24, r20
    20cc:	81 70       	andi	r24, 0x01	; 1
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	11 c0       	rjmp	.+34     	; 0x20f4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    20d2:	e0 e3       	ldi	r30, 0x30	; 48
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a9 01       	movw	r20, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_u8GetPinValue+0xd8>
    20e6:	55 95       	asr	r21
    20e8:	47 95       	ror	r20
    20ea:	8a 95       	dec	r24
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_u8GetPinValue+0xd4>
    20ee:	ca 01       	movw	r24, r20
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <DIO_u8TogglePinValue+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <DIO_u8TogglePinValue+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	3c 83       	std	Y+4, r19	; 0x04
    211e:	2b 83       	std	Y+3, r18	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	91 05       	cpc	r25, r1
    2128:	49 f1       	breq	.+82     	; 0x217c <DIO_u8TogglePinValue+0x76>
    212a:	2b 81       	ldd	r18, Y+3	; 0x03
    212c:	3c 81       	ldd	r19, Y+4	; 0x04
    212e:	22 30       	cpi	r18, 0x02	; 2
    2130:	31 05       	cpc	r19, r1
    2132:	2c f4       	brge	.+10     	; 0x213e <DIO_u8TogglePinValue+0x38>
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	61 f0       	breq	.+24     	; 0x2154 <DIO_u8TogglePinValue+0x4e>
    213c:	5a c0       	rjmp	.+180    	; 0x21f2 <DIO_u8TogglePinValue+0xec>
    213e:	2b 81       	ldd	r18, Y+3	; 0x03
    2140:	3c 81       	ldd	r19, Y+4	; 0x04
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	31 05       	cpc	r19, r1
    2146:	71 f1       	breq	.+92     	; 0x21a4 <DIO_u8TogglePinValue+0x9e>
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	91 05       	cpc	r25, r1
    2150:	e9 f1       	breq	.+122    	; 0x21cc <DIO_u8TogglePinValue+0xc6>
    2152:	4f c0       	rjmp	.+158    	; 0x21f2 <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    2154:	ab e3       	ldi	r26, 0x3B	; 59
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	eb e3       	ldi	r30, 0x3B	; 59
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <DIO_u8TogglePinValue+0x6c>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <DIO_u8TogglePinValue+0x68>
    2176:	84 27       	eor	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	3b c0       	rjmp	.+118    	; 0x21f2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    217c:	a8 e3       	ldi	r26, 0x38	; 56
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e8 e3       	ldi	r30, 0x38	; 56
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_u8TogglePinValue+0x94>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <DIO_u8TogglePinValue+0x90>
    219e:	84 27       	eor	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	27 c0       	rjmp	.+78     	; 0x21f2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    21a4:	a5 e3       	ldi	r26, 0x35	; 53
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e5 e3       	ldi	r30, 0x35	; 53
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_u8TogglePinValue+0xbc>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <DIO_u8TogglePinValue+0xb8>
    21c6:	84 27       	eor	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	13 c0       	rjmp	.+38     	; 0x21f2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    21cc:	a2 e3       	ldi	r26, 0x32	; 50
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e2 e3       	ldi	r30, 0x32	; 50
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <DIO_u8TogglePinValue+0xe4>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <DIO_u8TogglePinValue+0xe0>
    21ee:	84 27       	eor	r24, r20
    21f0:	8c 93       	st	X, r24
	}
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <DIO_SetNippleValue>:
void DIO_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <DIO_SetNippleValue+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <DIO_SetNippleValue+0x8>
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	6a 83       	std	Y+2, r22	; 0x02
    2212:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8PinStart<=4)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	85 30       	cpi	r24, 0x05	; 5
    2218:	08 f0       	brcs	.+2      	; 0x221c <DIO_SetNippleValue+0x1c>
    221a:	c6 c0       	rjmp	.+396    	; 0x23a8 <DIO_SetNippleValue+0x1a8>
	{
		switch(Copy_u8PortNumber)
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3d 83       	std	Y+5, r19	; 0x05
    2224:	2c 83       	std	Y+4, r18	; 0x04
    2226:	6c 81       	ldd	r22, Y+4	; 0x04
    2228:	7d 81       	ldd	r23, Y+5	; 0x05
    222a:	61 30       	cpi	r22, 0x01	; 1
    222c:	71 05       	cpc	r23, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <DIO_SetNippleValue+0x32>
    2230:	41 c0       	rjmp	.+130    	; 0x22b4 <DIO_SetNippleValue+0xb4>
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	9d 81       	ldd	r25, Y+5	; 0x05
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	91 05       	cpc	r25, r1
    223a:	34 f4       	brge	.+12     	; 0x2248 <DIO_SetNippleValue+0x48>
    223c:	2c 81       	ldd	r18, Y+4	; 0x04
    223e:	3d 81       	ldd	r19, Y+5	; 0x05
    2240:	21 15       	cp	r18, r1
    2242:	31 05       	cpc	r19, r1
    2244:	71 f0       	breq	.+28     	; 0x2262 <DIO_SetNippleValue+0x62>
    2246:	b0 c0       	rjmp	.+352    	; 0x23a8 <DIO_SetNippleValue+0x1a8>
    2248:	6c 81       	ldd	r22, Y+4	; 0x04
    224a:	7d 81       	ldd	r23, Y+5	; 0x05
    224c:	62 30       	cpi	r22, 0x02	; 2
    224e:	71 05       	cpc	r23, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <DIO_SetNippleValue+0x54>
    2252:	59 c0       	rjmp	.+178    	; 0x2306 <DIO_SetNippleValue+0x106>
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	91 05       	cpc	r25, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <DIO_SetNippleValue+0x60>
    225e:	7c c0       	rjmp	.+248    	; 0x2358 <DIO_SetNippleValue+0x158>
    2260:	a3 c0       	rjmp	.+326    	; 0x23a8 <DIO_SetNippleValue+0x1a8>
		{
		case DIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    2262:	ab e3       	ldi	r26, 0x3B	; 59
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	eb e3       	ldi	r30, 0x3B	; 59
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8f e0       	ldi	r24, 0x0F	; 15
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_SetNippleValue+0x7e>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	2a 95       	dec	r18
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_SetNippleValue+0x7a>
    2282:	80 95       	com	r24
    2284:	84 23       	and	r24, r20
    2286:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    2288:	ab e3       	ldi	r26, 0x3B	; 59
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	48 2f       	mov	r20, r24
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	b9 01       	movw	r22, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <DIO_SetNippleValue+0xa8>
    22a4:	66 0f       	add	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	8a 95       	dec	r24
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <DIO_SetNippleValue+0xa4>
    22ac:	cb 01       	movw	r24, r22
    22ae:	84 2b       	or	r24, r20
    22b0:	8c 93       	st	X, r24
    22b2:	7a c0       	rjmp	.+244    	; 0x23a8 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    22b4:	a8 e3       	ldi	r26, 0x38	; 56
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e3       	ldi	r30, 0x38	; 56
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8f e0       	ldi	r24, 0x0F	; 15
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_SetNippleValue+0xd0>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	2a 95       	dec	r18
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_SetNippleValue+0xcc>
    22d4:	80 95       	com	r24
    22d6:	84 23       	and	r24, r20
    22d8:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    22da:	a8 e3       	ldi	r26, 0x38	; 56
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e8 e3       	ldi	r30, 0x38	; 56
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	b9 01       	movw	r22, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <DIO_SetNippleValue+0xfa>
    22f6:	66 0f       	add	r22, r22
    22f8:	77 1f       	adc	r23, r23
    22fa:	8a 95       	dec	r24
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <DIO_SetNippleValue+0xf6>
    22fe:	cb 01       	movw	r24, r22
    2300:	84 2b       	or	r24, r20
    2302:	8c 93       	st	X, r24
    2304:	51 c0       	rjmp	.+162    	; 0x23a8 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    2306:	a5 e3       	ldi	r26, 0x35	; 53
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e5 e3       	ldi	r30, 0x35	; 53
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	48 2f       	mov	r20, r24
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	8f e0       	ldi	r24, 0x0F	; 15
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_SetNippleValue+0x122>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	2a 95       	dec	r18
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_SetNippleValue+0x11e>
    2326:	80 95       	com	r24
    2328:	84 23       	and	r24, r20
    232a:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    232c:	a5 e3       	ldi	r26, 0x35	; 53
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e5 e3       	ldi	r30, 0x35	; 53
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	b9 01       	movw	r22, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <DIO_SetNippleValue+0x14c>
    2348:	66 0f       	add	r22, r22
    234a:	77 1f       	adc	r23, r23
    234c:	8a 95       	dec	r24
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <DIO_SetNippleValue+0x148>
    2350:	cb 01       	movw	r24, r22
    2352:	84 2b       	or	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	28 c0       	rjmp	.+80     	; 0x23a8 <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    2358:	a2 e3       	ldi	r26, 0x32	; 50
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 e3       	ldi	r30, 0x32	; 50
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8f e0       	ldi	r24, 0x0F	; 15
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <DIO_SetNippleValue+0x174>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	2a 95       	dec	r18
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <DIO_SetNippleValue+0x170>
    2378:	80 95       	com	r24
    237a:	84 23       	and	r24, r20
    237c:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    237e:	a2 e3       	ldi	r26, 0x32	; 50
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e2 e3       	ldi	r30, 0x32	; 50
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	48 2f       	mov	r20, r24
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	b9 01       	movw	r22, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <DIO_SetNippleValue+0x19e>
    239a:	66 0f       	add	r22, r22
    239c:	77 1f       	adc	r23, r23
    239e:	8a 95       	dec	r24
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <DIO_SetNippleValue+0x19a>
    23a2:	cb 01       	movw	r24, r22
    23a4:	84 2b       	or	r24, r20
    23a6:	8c 93       	st	X, r24
			break;

		}
	}

}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <ADC_SetCallBack+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ca:	90 93 ed 01 	sts	0x01ED, r25
    23ce:	80 93 ec 01 	sts	0x01EC, r24
}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    23dc:	1f 92       	push	r1
    23de:	0f 92       	push	r0
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	0f 92       	push	r0
    23e4:	11 24       	eor	r1, r1
    23e6:	2f 93       	push	r18
    23e8:	3f 93       	push	r19
    23ea:	4f 93       	push	r20
    23ec:	5f 93       	push	r21
    23ee:	6f 93       	push	r22
    23f0:	7f 93       	push	r23
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	ef 93       	push	r30
    23fc:	ff 93       	push	r31
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    2406:	80 91 ec 01 	lds	r24, 0x01EC
    240a:	90 91 ed 01 	lds	r25, 0x01ED
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	29 f0       	breq	.+10     	; 0x241c <__vector_16+0x40>
	{
		GPFunc();
    2412:	e0 91 ec 01 	lds	r30, 0x01EC
    2416:	f0 91 ed 01 	lds	r31, 0x01ED
    241a:	09 95       	icall
	}
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	ff 91       	pop	r31
    2422:	ef 91       	pop	r30
    2424:	bf 91       	pop	r27
    2426:	af 91       	pop	r26
    2428:	9f 91       	pop	r25
    242a:	8f 91       	pop	r24
    242c:	7f 91       	pop	r23
    242e:	6f 91       	pop	r22
    2430:	5f 91       	pop	r21
    2432:	4f 91       	pop	r20
    2434:	3f 91       	pop	r19
    2436:	2f 91       	pop	r18
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f 90       	pop	r0
    243e:	1f 90       	pop	r1
    2440:	18 95       	reti

00002442 <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    244a:	a7 e2       	ldi	r26, 0x27	; 39
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e7 e2       	ldi	r30, 0x27	; 39
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	80 64       	ori	r24, 0x40	; 64
    2456:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2458:	a7 e2       	ldi	r26, 0x27	; 39
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e7 e2       	ldi	r30, 0x27	; 39
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 77       	andi	r24, 0x7F	; 127
    2464:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    2466:	a6 e2       	ldi	r26, 0x26	; 38
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e6 e2       	ldi	r30, 0x26	; 38
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8e 7f       	andi	r24, 0xFE	; 254
    2472:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    2474:	a6 e2       	ldi	r26, 0x26	; 38
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e6 e2       	ldi	r30, 0x26	; 38
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	82 60       	ori	r24, 0x02	; 2
    2480:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    2482:	a6 e2       	ldi	r26, 0x26	; 38
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e6 e2       	ldi	r30, 0x26	; 38
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	84 60       	ori	r24, 0x04	; 4
    248e:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    2490:	a7 e2       	ldi	r26, 0x27	; 39
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e7 e2       	ldi	r30, 0x27	; 39
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8f 7d       	andi	r24, 0xDF	; 223
    249c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADLAR);

	#endif
	/***************ADC MODE******************/
	#if	ADC_Mode==ADC_Single_Conversion
		CLR_BIT(ADCSRA,ADATE);
    249e:	a6 e2       	ldi	r26, 0x26	; 38
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e6 e2       	ldi	r30, 0x26	; 38
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 7d       	andi	r24, 0xDF	; 223
    24aa:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    24ac:	a6 e2       	ldi	r26, 0x26	; 38
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e6 e2       	ldi	r30, 0x26	; 38
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	80 68       	ori	r24, 0x80	; 128
    24b8:	8c 93       	st	X, r24
}
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    24c8:	a6 e2       	ldi	r26, 0x26	; 38
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e6 e2       	ldi	r30, 0x26	; 38
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 64       	ori	r24, 0x40	; 64
    24d4:	8c 93       	st	X, r24
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    24e8:	a7 e2       	ldi	r26, 0x27	; 39
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e7 e2       	ldi	r30, 0x27	; 39
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 7e       	andi	r24, 0xE0	; 224
    24f4:	8c 93       	st	X, r24
	ADMUX|=Channal;
    24f6:	a7 e2       	ldi	r26, 0x27	; 39
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e7 e2       	ldi	r30, 0x27	; 39
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	90 81       	ld	r25, Z
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	89 2b       	or	r24, r25
    2504:	8c 93       	st	X, r24
}
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2516:	a6 e2       	ldi	r26, 0x26	; 38
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e6 e2       	ldi	r30, 0x26	; 38
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 60       	ori	r24, 0x08	; 8
    2522:	8c 93       	st	X, r24
}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    2532:	e6 e2       	ldi	r30, 0x26	; 38
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	82 95       	swap	r24
    253a:	8f 70       	andi	r24, 0x0F	; 15
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	81 70       	andi	r24, 0x01	; 1
    2542:	90 70       	andi	r25, 0x00	; 0
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	a9 f3       	breq	.-22     	; 0x2532 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    2548:	a6 e2       	ldi	r26, 0x26	; 38
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e6 e2       	ldi	r30, 0x26	; 38
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	80 61       	ori	r24, 0x10	; 16
    2554:	8c 93       	st	X, r24
}
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <ADC_Get_Result+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    256a:	e4 e2       	ldi	r30, 0x24	; 36
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	e9 81       	ldd	r30, Y+1	; 0x01
    2574:	fa 81       	ldd	r31, Y+2	; 0x02
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
}
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <ADC_Disable>:
void ADC_Disable(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);
    258c:	a6 e2       	ldi	r26, 0x26	; 38
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e6 e2       	ldi	r30, 0x26	; 38
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8f 77       	andi	r24, 0x7F	; 127
    2598:	8c 93       	st	X, r24
}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <Servo_VoidInit>:
#include "../../MCAL/TIMER/TIMER_Interface.h"
#include "../../MCAL/TIMER/TIMER1_Define.h"
#include "util/delay.h"
#include "Servo_Interface.h"
void Servo_VoidInit(void)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	2e 97       	sbiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
	/*select the Pin5 in port D as output for Servo*/
	DIO_VidSetPinDirection(DIO_PORTD,PIN5,OUTPUT);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	/*Timer 1 Initialization*/
	TIMER1_INIT();
    25be:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TIMER1_INIT>
	/*to make sure the door is closed*/
	Set_Duty_Cycle_TIMER_1_A(2.5);
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e4       	ldi	r25, 0x40	; 64
    25ca:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <Set_Duty_Cycle_TIMER_1_A>
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a8 ec       	ldi	r26, 0xC8	; 200
    25d4:	b2 e4       	ldi	r27, 0x42	; 66
    25d6:	8b 87       	std	Y+11, r24	; 0x0b
    25d8:	9c 87       	std	Y+12, r25	; 0x0c
    25da:	ad 87       	std	Y+13, r26	; 0x0d
    25dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a ef       	ldi	r20, 0xFA	; 250
    25ec:	54 e4       	ldi	r21, 0x44	; 68
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8f 83       	std	Y+7, r24	; 0x07
    25f8:	98 87       	std	Y+8, r25	; 0x08
    25fa:	a9 87       	std	Y+9, r26	; 0x09
    25fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2600:	78 85       	ldd	r23, Y+8	; 0x08
    2602:	89 85       	ldd	r24, Y+9	; 0x09
    2604:	9a 85       	ldd	r25, Y+10	; 0x0a
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <Servo_VoidInit+0x80>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	3f c0       	rjmp	.+126    	; 0x269e <Servo_VoidInit+0xfe>
	else if (__tmp > 65535)
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <Servo_VoidInit+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <Servo_VoidInit+0xe0>
    2662:	88 ec       	ldi	r24, 0xC8	; 200
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <Servo_VoidInit+0xce>
    2672:	9c 83       	std	Y+4, r25	; 0x04
    2674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <Servo_VoidInit+0xc2>
    2688:	14 c0       	rjmp	.+40     	; 0x26b2 <Servo_VoidInit+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <Servo_VoidInit+0x10a>
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    26b2:	2e 96       	adiw	r28, 0x0e	; 14
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <Servo_u8DoorState>:
void Servo_u8DoorState(u8 copy_DoorState)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	89 83       	std	Y+1, r24	; 0x01
	if(copy_DoorState==open)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	39 f4       	brne	.+14     	; 0x26e4 <Servo_u8DoorState+0x20>
	{
		Set_Duty_Cycle_TIMER_1_A(7.5);
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 ef       	ldi	r24, 0xF0	; 240
    26dc:	90 e4       	ldi	r25, 0x40	; 64
    26de:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <Set_Duty_Cycle_TIMER_1_A>
    26e2:	09 c0       	rjmp	.+18     	; 0x26f6 <Servo_u8DoorState+0x32>

	}
	else if(copy_DoorState==close)
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	88 23       	and	r24, r24
    26e8:	31 f4       	brne	.+12     	; 0x26f6 <Servo_u8DoorState+0x32>
	{
		Set_Duty_Cycle_TIMER_1_A(2.5);
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	80 e2       	ldi	r24, 0x20	; 32
    26f0:	90 e4       	ldi	r25, 0x40	; 64
    26f2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <Set_Duty_Cycle_TIMER_1_A>
	}

}
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <LM35_u8Init>:
#include "util/delay.h"
#include "LM35_Interface.h"
u8 Flag=0;
u16 LM35_Value=0;
void LM35_u8Init(u8 Copy_u8DIO_Pin,void(*func)(void))
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <LM35_u8Init+0x6>
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	7b 83       	std	Y+3, r23	; 0x03
    270e:	6a 83       	std	Y+2, r22	; 0x02
	GIE_Vid_Enable();
    2710:	0e 94 4f 0c 	call	0x189e	; 0x189e <GIE_Vid_Enable>
	DIO_VidSetPinDirection(DIO_PORTA,Copy_u8DIO_Pin,INPUT);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	69 81       	ldd	r22, Y+1	; 0x01
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	ADC_SetCallBack(func);
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <ADC_SetCallBack>
	ADC_VidINIT();
    2726:	0e 94 21 12 	call	0x2442	; 0x2442 <ADC_VidINIT>
	ADC_Interrupt_Enable();
    272a:	0e 94 87 12 	call	0x250e	; 0x250e <ADC_Interrupt_Enable>
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LM35_u8Channal>:
u16  LM35_u8Channal(u8 Copy_u8Channal)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	89 83       	std	Y+1, r24	; 0x01
	Flag=1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 ee 01 	sts	0x01EE, r24
	ADC_Select_Channal(Copy_u8Channal);
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <ADC_Select_Channal>
	ADC_Start_Conversion();
    2752:	0e 94 60 12 	call	0x24c0	; 0x24c0 <ADC_Start_Conversion>
	LM35_Value=LM35_Value/2;
    2756:	80 91 ef 01 	lds	r24, 0x01EF
    275a:	90 91 f0 01 	lds	r25, 0x01F0
    275e:	96 95       	lsr	r25
    2760:	87 95       	ror	r24
    2762:	90 93 f0 01 	sts	0x01F0, r25
    2766:	80 93 ef 01 	sts	0x01EF, r24

	return LM35_Value;
    276a:	80 91 ef 01 	lds	r24, 0x01EF
    276e:	90 91 f0 01 	lds	r25, 0x01F0
}
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LDR_u8Init>:
#include "LDR_Interface.h"
extern u8 Flag;
u16 LDR_Value=0;

void LDR_u8Init(u8 Copy_u8DIO_Pin,void(*func)(void))
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <LDR_u8Init+0x6>
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	7b 83       	std	Y+3, r23	; 0x03
    278a:	6a 83       	std	Y+2, r22	; 0x02
	GIE_Vid_Enable();
    278c:	0e 94 4f 0c 	call	0x189e	; 0x189e <GIE_Vid_Enable>
	DIO_VidSetPinDirection(DIO_PORTA,Copy_u8DIO_Pin,INPUT);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	69 81       	ldd	r22, Y+1	; 0x01
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	ADC_SetCallBack(func);
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	9b 81       	ldd	r25, Y+3	; 0x03
    279e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <ADC_SetCallBack>
	ADC_VidINIT();
    27a2:	0e 94 21 12 	call	0x2442	; 0x2442 <ADC_VidINIT>
	ADC_Interrupt_Enable();
    27a6:	0e 94 87 12 	call	0x250e	; 0x250e <ADC_Interrupt_Enable>

}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <LDR_u8Channal>:
u16 LDR_u8Channal(u8 Copy_u8Channal)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	0f 92       	push	r0
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	89 83       	std	Y+1, r24	; 0x01

	Flag=2;
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	80 93 ee 01 	sts	0x01EE, r24
	ADC_Select_Channal(Copy_u8Channal);
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	0e 94 6e 12 	call	0x24dc	; 0x24dc <ADC_Select_Channal>

	ADC_Start_Conversion();
    27ce:	0e 94 60 12 	call	0x24c0	; 0x24c0 <ADC_Start_Conversion>
	LDR_Value=LDR_Value/10;
    27d2:	80 91 f1 01 	lds	r24, 0x01F1
    27d6:	90 91 f2 01 	lds	r25, 0x01F2
    27da:	2a e0       	ldi	r18, 0x0A	; 10
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	b9 01       	movw	r22, r18
    27e0:	0e 94 3f 22 	call	0x447e	; 0x447e <__udivmodhi4>
    27e4:	cb 01       	movw	r24, r22
    27e6:	90 93 f2 01 	sts	0x01F2, r25
    27ea:	80 93 f1 01 	sts	0x01F1, r24
	return LDR_Value;
    27ee:	80 91 f1 01 	lds	r24, 0x01F1
    27f2:	90 91 f2 01 	lds	r25, 0x01F2

}
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	6c 97       	sbiw	r28, 0x1c	; 28
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	63 e0       	ldi	r22, 0x03	; 3
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e8       	ldi	r26, 0x80	; 128
    2822:	bf e3       	ldi	r27, 0x3F	; 63
    2824:	89 8f       	std	Y+25, r24	; 0x19
    2826:	9a 8f       	std	Y+26, r25	; 0x1a
    2828:	ab 8f       	std	Y+27, r26	; 0x1b
    282a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	69 8d       	ldd	r22, Y+25	; 0x19
    282e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8d 8b       	std	Y+21, r24	; 0x15
    2846:	9e 8b       	std	Y+22, r25	; 0x16
    2848:	af 8b       	std	Y+23, r26	; 0x17
    284a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284c:	6d 89       	ldd	r22, Y+21	; 0x15
    284e:	7e 89       	ldd	r23, Y+22	; 0x16
    2850:	8f 89       	ldd	r24, Y+23	; 0x17
    2852:	98 8d       	ldd	r25, Y+24	; 0x18
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    286e:	6d 89       	ldd	r22, Y+21	; 0x15
    2870:	7e 89       	ldd	r23, Y+22	; 0x16
    2872:	8f 89       	ldd	r24, Y+23	; 0x17
    2874:	98 8d       	ldd	r25, Y+24	; 0x18
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	69 8d       	ldd	r22, Y+25	; 0x19
    2888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9c 8b       	std	Y+20, r25	; 0x14
    28ac:	8b 8b       	std	Y+19, r24	; 0x13
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <LCD_VidPulseEnable+0xd0>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9a 8b       	std	Y+18, r25	; 0x12
    28b6:	89 8b       	std	Y+17, r24	; 0x11
    28b8:	89 89       	ldd	r24, Y+17	; 0x11
    28ba:	9a 89       	ldd	r25, Y+18	; 0x12
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_VidPulseEnable+0xbe>
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <LCD_VidPulseEnable+0xb2>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	98 8b       	std	Y+16, r25	; 0x10
    28f2:	8f 87       	std	Y+15, r24	; 0x0f
    28f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f6:	98 89       	ldd	r25, Y+16	; 0x10
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_VidPulseEnable+0xfa>
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e8       	ldi	r26, 0x80	; 128
    2910:	bf e3       	ldi	r27, 0x3F	; 63
    2912:	8b 87       	std	Y+11, r24	; 0x0b
    2914:	9c 87       	std	Y+12, r25	; 0x0c
    2916:	ad 87       	std	Y+13, r26	; 0x0d
    2918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a ef       	ldi	r20, 0xFA	; 250
    2928:	54 e4       	ldi	r21, 0x44	; 68
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8f 83       	std	Y+7, r24	; 0x07
    2934:	98 87       	std	Y+8, r25	; 0x08
    2936:	a9 87       	std	Y+9, r26	; 0x09
    2938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	3f c0       	rjmp	.+126    	; 0x29da <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <LCD_VidPulseEnable+0x1be>
    299e:	88 ec       	ldi	r24, 0xC8	; 200
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_VidPulseEnable+0x1ac>
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <LCD_VidPulseEnable+0x1a0>
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_VidPulseEnable+0x1e8>
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    29ee:	6c 96       	adiw	r28, 0x1c	; 28
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <LCD_VidInit>:
void LCD_VidInit(void)
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	e8 97       	sbiw	r28, 0x38	; 56
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a8 e4       	ldi	r26, 0x48	; 72
    2a1a:	b2 e4       	ldi	r27, 0x42	; 66
    2a1c:	8d ab       	std	Y+53, r24	; 0x35
    2a1e:	9e ab       	std	Y+54, r25	; 0x36
    2a20:	af ab       	std	Y+55, r26	; 0x37
    2a22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	6d a9       	ldd	r22, Y+53	; 0x35
    2a26:	7e a9       	ldd	r23, Y+54	; 0x36
    2a28:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a ef       	ldi	r20, 0xFA	; 250
    2a32:	54 e4       	ldi	r21, 0x44	; 68
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	89 ab       	std	Y+49, r24	; 0x31
    2a3e:	9a ab       	std	Y+50, r25	; 0x32
    2a40:	ab ab       	std	Y+51, r26	; 0x33
    2a42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a44:	69 a9       	ldd	r22, Y+49	; 0x31
    2a46:	7a a9       	ldd	r23, Y+50	; 0x32
    2a48:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <LCD_VidInit+0x66>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	98 ab       	std	Y+48, r25	; 0x30
    2a62:	8f a7       	std	Y+47, r24	; 0x2f
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    2a66:	69 a9       	ldd	r22, Y+49	; 0x31
    2a68:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a80:	7e a9       	ldd	r23, Y+54	; 0x36
    2a82:	8f a9       	ldd	r24, Y+55	; 0x37
    2a84:	98 ad       	ldd	r25, Y+56	; 0x38
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	98 ab       	std	Y+48, r25	; 0x30
    2aa4:	8f a7       	std	Y+47, r24	; 0x2f
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <LCD_VidInit+0xc6>
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9e a7       	std	Y+46, r25	; 0x2e
    2aae:	8d a7       	std	Y+45, r24	; 0x2d
    2ab0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_VidInit+0xb4>
    2ab8:	9e a7       	std	Y+46, r25	; 0x2e
    2aba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2abe:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	98 ab       	std	Y+48, r25	; 0x30
    2ac4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <LCD_VidInit+0xa8>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	98 ab       	std	Y+48, r25	; 0x30
    2ae2:	8f a7       	std	Y+47, r24	; 0x2f
    2ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae8:	9c a7       	std	Y+44, r25	; 0x2c
    2aea:	8b a7       	std	Y+43, r24	; 0x2b
    2aec:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aee:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_VidInit+0xf0>
    2af4:	9c a7       	std	Y+44, r25	; 0x2c
    2af6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
#if MODE==4
	//DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);  /* Configure the control pins(E,RS,RW) as output pins */
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RS,OUTPUT);
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RW,OUTPUT);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,EN,OUTPUT);
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	63 e0       	ldi	r22, 0x03	; 3
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	//_delay_ms(1);


		// set only PORT 4~7 pins as outputs
		//DIO_VidSetPortDirection(LCD_DATA_PORT,0xF0);  /* Configure the data port as output port */
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN4,OUTPUT);
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	64 e0       	ldi	r22, 0x04	; 4
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN5,OUTPUT);
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	65 e0       	ldi	r22, 0x05	; 5
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN6,OUTPUT);
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	66 e0       	ldi	r22, 0x06	; 6
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN7,OUTPUT);
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	67 e0       	ldi	r22, 0x07	; 7
    2b38:	41 e0       	ldi	r20, 0x01	; 1
    2b3a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
		/*send function set command*/
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET);
    2b4a:	88 e2       	ldi	r24, 0x28	; 40
    2b4c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	8f a3       	std	Y+39, r24	; 0x27
    2b5a:	98 a7       	std	Y+40, r25	; 0x28
    2b5c:	a9 a7       	std	Y+41, r26	; 0x29
    2b5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	6f a1       	ldd	r22, Y+39	; 0x27
    2b62:	78 a5       	ldd	r23, Y+40	; 0x28
    2b64:	89 a5       	ldd	r24, Y+41	; 0x29
    2b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8b a3       	std	Y+35, r24	; 0x23
    2b7a:	9c a3       	std	Y+36, r25	; 0x24
    2b7c:	ad a3       	std	Y+37, r26	; 0x25
    2b7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b80:	6b a1       	ldd	r22, Y+35	; 0x23
    2b82:	7c a1       	ldd	r23, Y+36	; 0x24
    2b84:	8d a1       	ldd	r24, Y+37	; 0x25
    2b86:	9e a1       	ldd	r25, Y+38	; 0x26
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <LCD_VidInit+0x1a2>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9a a3       	std	Y+34, r25	; 0x22
    2b9e:	89 a3       	std	Y+33, r24	; 0x21
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <LCD_VidInit+0x220>
	else if (__tmp > 65535)
    2ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <LCD_VidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	6f a1       	ldd	r22, Y+39	; 0x27
    2bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <LCD_VidInit+0x202>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	98 a3       	std	Y+32, r25	; 0x20
    2bea:	8f 8f       	std	Y+31, r24	; 0x1f
    2bec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bee:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_VidInit+0x1f0>
    2bf4:	98 a3       	std	Y+32, r25	; 0x20
    2bf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	89 a1       	ldd	r24, Y+33	; 0x21
    2c04:	9a a1       	ldd	r25, Y+34	; 0x22
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <LCD_VidInit+0x1e4>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <LCD_VidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c10:	8d a1       	ldd	r24, Y+37	; 0x25
    2c12:	9e a1       	ldd	r25, Y+38	; 0x26
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9a a3       	std	Y+34, r25	; 0x22
    2c1e:	89 a3       	std	Y+33, r24	; 0x21
    2c20:	89 a1       	ldd	r24, Y+33	; 0x21
    2c22:	9a a1       	ldd	r25, Y+34	; 0x22
    2c24:	9e 8f       	std	Y+30, r25	; 0x1e
    2c26:	8d 8f       	std	Y+29, r24	; 0x1d
    2c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_VidInit+0x22c>
    2c30:	9e 8f       	std	Y+30, r25	; 0x1e
    2c32:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			/*send Display on/off  command*/
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF>>4);
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF);
    2c3a:	8c e0       	ldi	r24, 0x0C	; 12
    2c3c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e8       	ldi	r26, 0x80	; 128
    2c46:	bf e3       	ldi	r27, 0x3F	; 63
    2c48:	89 8f       	std	Y+25, r24	; 0x19
    2c4a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c4c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	69 8d       	ldd	r22, Y+25	; 0x19
    2c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a ef       	ldi	r20, 0xFA	; 250
    2c5e:	54 e4       	ldi	r21, 0x44	; 68
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8d 8b       	std	Y+21, r24	; 0x15
    2c6a:	9e 8b       	std	Y+22, r25	; 0x16
    2c6c:	af 8b       	std	Y+23, r26	; 0x17
    2c6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <LCD_VidInit+0x292>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9c 8b       	std	Y+20, r25	; 0x14
    2c8e:	8b 8b       	std	Y+19, r24	; 0x13
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <LCD_VidInit+0x310>
	else if (__tmp > 65535)
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <LCD_VidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	69 8d       	ldd	r22, Y+25	; 0x19
    2cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <LCD_VidInit+0x2f2>
    2cd4:	88 ec       	ldi	r24, 0xC8	; 200
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9a 8b       	std	Y+18, r25	; 0x12
    2cda:	89 8b       	std	Y+17, r24	; 0x11
    2cdc:	89 89       	ldd	r24, Y+17	; 0x11
    2cde:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_VidInit+0x2e0>
    2ce4:	9a 8b       	std	Y+18, r25	; 0x12
    2ce6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	9c 89       	ldd	r25, Y+20	; 0x14
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <LCD_VidInit+0x2d4>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <LCD_VidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2d00:	8f 89       	ldd	r24, Y+23	; 0x17
    2d02:	98 8d       	ldd	r25, Y+24	; 0x18
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9c 8b       	std	Y+20, r25	; 0x14
    2d0e:	8b 8b       	std	Y+19, r24	; 0x13
    2d10:	8b 89       	ldd	r24, Y+19	; 0x13
    2d12:	9c 89       	ldd	r25, Y+20	; 0x14
    2d14:	98 8b       	std	Y+16, r25	; 0x10
    2d16:	8f 87       	std	Y+15, r24	; 0x0f
    2d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1a:	98 89       	ldd	r25, Y+16	; 0x10
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_VidInit+0x31c>
    2d20:	98 8b       	std	Y+16, r25	; 0x10
    2d22:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			/*send Display Clear  command*/
			LCD_VidWriteCommend(DISPLAY_CLEAR>>4);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(DISPLAY_CLEAR);
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e4       	ldi	r27, 0x40	; 64
    2d38:	8b 87       	std	Y+11, r24	; 0x0b
    2d3a:	9c 87       	std	Y+12, r25	; 0x0c
    2d3c:	ad 87       	std	Y+13, r26	; 0x0d
    2d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a ef       	ldi	r20, 0xFA	; 250
    2d4e:	54 e4       	ldi	r21, 0x44	; 68
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8f 83       	std	Y+7, r24	; 0x07
    2d5a:	98 87       	std	Y+8, r25	; 0x08
    2d5c:	a9 87       	std	Y+9, r26	; 0x09
    2d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_VidInit+0x382>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <LCD_VidInit+0x400>
	else if (__tmp > 65535)
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <LCD_VidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_VidInit+0x3e2>
    2dc4:	88 ec       	ldi	r24, 0xC8	; 200
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_VidInit+0x3d0>
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <LCD_VidInit+0x3c4>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <LCD_VidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6f 81       	ldd	r22, Y+7	; 0x07
    2dee:	78 85       	ldd	r23, Y+8	; 0x08
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_VidInit+0x40c>
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			/*send Entry Mode  set command*/
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);
    2e1a:	86 e0       	ldi	r24, 0x06	; 6
    2e1c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
	    _delay_ms(2);
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2e20:	e8 96       	adiw	r28, 0x38	; 56
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	ab 97       	sbiw	r28, 0x2b	; 43
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	8b a7       	std	Y+43, r24	; 0x2b
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,0); /* Instruction Mode RS=0 */
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	62 e0       	ldi	r22, 0x02	; 2
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e8       	ldi	r26, 0x80	; 128
    2e62:	bf e3       	ldi	r27, 0x3F	; 63
    2e64:	8f a3       	std	Y+39, r24	; 0x27
    2e66:	98 a7       	std	Y+40, r25	; 0x28
    2e68:	a9 a7       	std	Y+41, r26	; 0x29
    2e6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e70:	89 a5       	ldd	r24, Y+41	; 0x29
    2e72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a ef       	ldi	r20, 0xFA	; 250
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8b a3       	std	Y+35, r24	; 0x23
    2e86:	9c a3       	std	Y+36, r25	; 0x24
    2e88:	ad a3       	std	Y+37, r26	; 0x25
    2e8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e90:	8d a1       	ldd	r24, Y+37	; 0x25
    2e92:	9e a1       	ldd	r25, Y+38	; 0x26
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e8       	ldi	r20, 0x80	; 128
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea0:	88 23       	and	r24, r24
    2ea2:	2c f4       	brge	.+10     	; 0x2eae <LCD_VidWriteCommend+0x7c>
		__ticks = 1;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9a a3       	std	Y+34, r25	; 0x22
    2eaa:	89 a3       	std	Y+33, r24	; 0x21
    2eac:	3f c0       	rjmp	.+126    	; 0x2f2c <LCD_VidWriteCommend+0xfa>
	else if (__tmp > 65535)
    2eae:	6b a1       	ldd	r22, Y+35	; 0x23
    2eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	4f e7       	ldi	r20, 0x7F	; 127
    2ebc:	57 e4       	ldi	r21, 0x47	; 71
    2ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec2:	18 16       	cp	r1, r24
    2ec4:	4c f5       	brge	.+82     	; 0x2f18 <LCD_VidWriteCommend+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eca:	89 a5       	ldd	r24, Y+41	; 0x29
    2ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e2       	ldi	r20, 0x20	; 32
    2ed4:	51 e4       	ldi	r21, 0x41	; 65
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	9a a3       	std	Y+34, r25	; 0x22
    2eec:	89 a3       	std	Y+33, r24	; 0x21
    2eee:	0f c0       	rjmp	.+30     	; 0x2f0e <LCD_VidWriteCommend+0xdc>
    2ef0:	88 ec       	ldi	r24, 0xC8	; 200
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	98 a3       	std	Y+32, r25	; 0x20
    2ef6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ef8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2efa:	98 a1       	ldd	r25, Y+32	; 0x20
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_VidWriteCommend+0xca>
    2f00:	98 a3       	std	Y+32, r25	; 0x20
    2f02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f04:	89 a1       	ldd	r24, Y+33	; 0x21
    2f06:	9a a1       	ldd	r25, Y+34	; 0x22
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	9a a3       	std	Y+34, r25	; 0x22
    2f0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f10:	9a a1       	ldd	r25, Y+34	; 0x22
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	69 f7       	brne	.-38     	; 0x2ef0 <LCD_VidWriteCommend+0xbe>
    2f16:	14 c0       	rjmp	.+40     	; 0x2f40 <LCD_VidWriteCommend+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f18:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9a a3       	std	Y+34, r25	; 0x22
    2f2a:	89 a3       	std	Y+33, r24	; 0x21
    2f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f30:	9e 8f       	std	Y+30, r25	; 0x1e
    2f32:	8d 8f       	std	Y+29, r24	; 0x1d
    2f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <LCD_VidWriteCommend+0x106>
    2f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f3e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Commend); /* out the required command to the data bus D0 --> D7 */
    2f40:	84 e0       	ldi	r24, 0x04	; 4
    2f42:	62 e0       	ldi	r22, 0x02	; 2
    2f44:	4b a5       	ldd	r20, Y+43	; 0x2b
    2f46:	0e 94 00 11 	call	0x2200	; 0x2200 <DIO_SetNippleValue>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a0 e8       	ldi	r26, 0x80	; 128
    2f50:	bf e3       	ldi	r27, 0x3F	; 63
    2f52:	89 8f       	std	Y+25, r24	; 0x19
    2f54:	9a 8f       	std	Y+26, r25	; 0x1a
    2f56:	ab 8f       	std	Y+27, r26	; 0x1b
    2f58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a ef       	ldi	r20, 0xFA	; 250
    2f68:	54 e4       	ldi	r21, 0x44	; 68
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	8d 8b       	std	Y+21, r24	; 0x15
    2f74:	9e 8b       	std	Y+22, r25	; 0x16
    2f76:	af 8b       	std	Y+23, r26	; 0x17
    2f78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f80:	98 8d       	ldd	r25, Y+24	; 0x18
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <LCD_VidWriteCommend+0x16a>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9c 8b       	std	Y+20, r25	; 0x14
    2f98:	8b 8b       	std	Y+19, r24	; 0x13
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <LCD_VidWriteCommend+0x1e8>
	else if (__tmp > 65535)
    2f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <LCD_VidWriteCommend+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9c 8b       	std	Y+20, r25	; 0x14
    2fda:	8b 8b       	std	Y+19, r24	; 0x13
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <LCD_VidWriteCommend+0x1ca>
    2fde:	88 ec       	ldi	r24, 0xC8	; 200
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9a 8b       	std	Y+18, r25	; 0x12
    2fe4:	89 8b       	std	Y+17, r24	; 0x11
    2fe6:	89 89       	ldd	r24, Y+17	; 0x11
    2fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_VidWriteCommend+0x1b8>
    2fee:	9a 8b       	std	Y+18, r25	; 0x12
    2ff0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	9c 8b       	std	Y+20, r25	; 0x14
    2ffa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <LCD_VidWriteCommend+0x1ac>
    3004:	14 c0       	rjmp	.+40     	; 0x302e <LCD_VidWriteCommend+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	6d 89       	ldd	r22, Y+21	; 0x15
    3008:	7e 89       	ldd	r23, Y+22	; 0x16
    300a:	8f 89       	ldd	r24, Y+23	; 0x17
    300c:	98 8d       	ldd	r25, Y+24	; 0x18
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9c 8b       	std	Y+20, r25	; 0x14
    3018:	8b 8b       	std	Y+19, r24	; 0x13
    301a:	8b 89       	ldd	r24, Y+19	; 0x13
    301c:	9c 89       	ldd	r25, Y+20	; 0x14
    301e:	98 8b       	std	Y+16, r25	; 0x10
    3020:	8f 87       	std	Y+15, r24	; 0x0f
    3022:	8f 85       	ldd	r24, Y+15	; 0x0f
    3024:	98 89       	ldd	r25, Y+16	; 0x10
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_VidWriteCommend+0x1f4>
    302a:	98 8b       	std	Y+16, r25	; 0x10
    302c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	63 e0       	ldi	r22, 0x03	; 3
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e4       	ldi	r27, 0x40	; 64
    3040:	8b 87       	std	Y+11, r24	; 0x0b
    3042:	9c 87       	std	Y+12, r25	; 0x0c
    3044:	ad 87       	std	Y+13, r26	; 0x0d
    3046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6b 85       	ldd	r22, Y+11	; 0x0b
    304a:	7c 85       	ldd	r23, Y+12	; 0x0c
    304c:	8d 85       	ldd	r24, Y+13	; 0x0d
    304e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
    3064:	a9 87       	std	Y+9, r26	; 0x09
    3066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_VidWriteCommend+0x258>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9e 83       	std	Y+6, r25	; 0x06
    3086:	8d 83       	std	Y+5, r24	; 0x05
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_VidWriteCommend+0x2d6>
	else if (__tmp > 65535)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_VidWriteCommend+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_VidWriteCommend+0x2b8>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_VidWriteCommend+0x2a6>
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_VidWriteCommend+0x29a>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_VidWriteCommend+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_VidWriteCommend+0x2e2>
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	63 e0       	ldi	r22, 0x03	; 3
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    3126:	ab 96       	adiw	r28, 0x2b	; 43
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	6d 97       	sbiw	r28, 0x1d	; 29
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	8d 8f       	std	Y+29, r24	; 0x1d
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1); /* Instruction Mode RS=0 */
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	62 e0       	ldi	r22, 0x02	; 2
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a0 e8       	ldi	r26, 0x80	; 128
    3168:	bf e3       	ldi	r27, 0x3F	; 63
    316a:	89 8f       	std	Y+25, r24	; 0x19
    316c:	9a 8f       	std	Y+26, r25	; 0x1a
    316e:	ab 8f       	std	Y+27, r26	; 0x1b
    3170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	69 8d       	ldd	r22, Y+25	; 0x19
    3174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a ef       	ldi	r20, 0xFA	; 250
    3180:	54 e4       	ldi	r21, 0x44	; 68
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	8d 8b       	std	Y+21, r24	; 0x15
    318c:	9e 8b       	std	Y+22, r25	; 0x16
    318e:	af 8b       	std	Y+23, r26	; 0x17
    3190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3192:	6d 89       	ldd	r22, Y+21	; 0x15
    3194:	7e 89       	ldd	r23, Y+22	; 0x16
    3196:	8f 89       	ldd	r24, Y+23	; 0x17
    3198:	98 8d       	ldd	r25, Y+24	; 0x18
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <LCD_VidWriteData+0x7c>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9c 8b       	std	Y+20, r25	; 0x14
    31b0:	8b 8b       	std	Y+19, r24	; 0x13
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <LCD_VidWriteData+0xfa>
	else if (__tmp > 65535)
    31b4:	6d 89       	ldd	r22, Y+21	; 0x15
    31b6:	7e 89       	ldd	r23, Y+22	; 0x16
    31b8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ba:	98 8d       	ldd	r25, Y+24	; 0x18
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <LCD_VidWriteData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	69 8d       	ldd	r22, Y+25	; 0x19
    31ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9c 8b       	std	Y+20, r25	; 0x14
    31f2:	8b 8b       	std	Y+19, r24	; 0x13
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <LCD_VidWriteData+0xdc>
    31f6:	88 ec       	ldi	r24, 0xC8	; 200
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9a 8b       	std	Y+18, r25	; 0x12
    31fc:	89 8b       	std	Y+17, r24	; 0x11
    31fe:	89 89       	ldd	r24, Y+17	; 0x11
    3200:	9a 89       	ldd	r25, Y+18	; 0x12
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <LCD_VidWriteData+0xca>
    3206:	9a 8b       	std	Y+18, r25	; 0x12
    3208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8b 89       	ldd	r24, Y+19	; 0x13
    320c:	9c 89       	ldd	r25, Y+20	; 0x14
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8b 89       	ldd	r24, Y+19	; 0x13
    3216:	9c 89       	ldd	r25, Y+20	; 0x14
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <LCD_VidWriteData+0xbe>
    321c:	14 c0       	rjmp	.+40     	; 0x3246 <LCD_VidWriteData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	6d 89       	ldd	r22, Y+21	; 0x15
    3220:	7e 89       	ldd	r23, Y+22	; 0x16
    3222:	8f 89       	ldd	r24, Y+23	; 0x17
    3224:	98 8d       	ldd	r25, Y+24	; 0x18
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9c 8b       	std	Y+20, r25	; 0x14
    3230:	8b 8b       	std	Y+19, r24	; 0x13
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	98 8b       	std	Y+16, r25	; 0x10
    3238:	8f 87       	std	Y+15, r24	; 0x0f
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	98 89       	ldd	r25, Y+16	; 0x10
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <LCD_VidWriteData+0x106>
    3242:	98 8b       	std	Y+16, r25	; 0x10
    3244:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Data);
    3246:	84 e0       	ldi	r24, 0x04	; 4
    3248:	62 e0       	ldi	r22, 0x02	; 2
    324a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    324c:	0e 94 00 11 	call	0x2200	; 0x2200 <DIO_SetNippleValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	63 e0       	ldi	r22, 0x03	; 3
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	a0 e0       	ldi	r26, 0x00	; 0
    3260:	b0 e4       	ldi	r27, 0x40	; 64
    3262:	8b 87       	std	Y+11, r24	; 0x0b
    3264:	9c 87       	std	Y+12, r25	; 0x0c
    3266:	ad 87       	std	Y+13, r26	; 0x0d
    3268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326a:	6b 85       	ldd	r22, Y+11	; 0x0b
    326c:	7c 85       	ldd	r23, Y+12	; 0x0c
    326e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3270:	9e 85       	ldd	r25, Y+14	; 0x0e
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	4a ef       	ldi	r20, 0xFA	; 250
    3278:	54 e4       	ldi	r21, 0x44	; 68
    327a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	8f 83       	std	Y+7, r24	; 0x07
    3284:	98 87       	std	Y+8, r25	; 0x08
    3286:	a9 87       	std	Y+9, r26	; 0x09
    3288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e8       	ldi	r20, 0x80	; 128
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329e:	88 23       	and	r24, r24
    32a0:	2c f4       	brge	.+10     	; 0x32ac <LCD_VidWriteData+0x174>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9e 83       	std	Y+6, r25	; 0x06
    32a8:	8d 83       	std	Y+5, r24	; 0x05
    32aa:	3f c0       	rjmp	.+126    	; 0x332a <LCD_VidWriteData+0x1f2>
	else if (__tmp > 65535)
    32ac:	6f 81       	ldd	r22, Y+7	; 0x07
    32ae:	78 85       	ldd	r23, Y+8	; 0x08
    32b0:	89 85       	ldd	r24, Y+9	; 0x09
    32b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	3f ef       	ldi	r19, 0xFF	; 255
    32b8:	4f e7       	ldi	r20, 0x7F	; 127
    32ba:	57 e4       	ldi	r21, 0x47	; 71
    32bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c0:	18 16       	cp	r1, r24
    32c2:	4c f5       	brge	.+82     	; 0x3316 <LCD_VidWriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e2       	ldi	r20, 0x20	; 32
    32d2:	51 e4       	ldi	r21, 0x41	; 65
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <LCD_VidWriteData+0x1d4>
    32ee:	88 ec       	ldi	r24, 0xC8	; 200
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9c 83       	std	Y+4, r25	; 0x04
    32f4:	8b 83       	std	Y+3, r24	; 0x03
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	9c 81       	ldd	r25, Y+4	; 0x04
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <LCD_VidWriteData+0x1c2>
    32fe:	9c 83       	std	Y+4, r25	; 0x04
    3300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	9e 83       	std	Y+6, r25	; 0x06
    330a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330c:	8d 81       	ldd	r24, Y+5	; 0x05
    330e:	9e 81       	ldd	r25, Y+6	; 0x06
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	69 f7       	brne	.-38     	; 0x32ee <LCD_VidWriteData+0x1b6>
    3314:	14 c0       	rjmp	.+40     	; 0x333e <LCD_VidWriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	9e 81       	ldd	r25, Y+6	; 0x06
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	9a 81       	ldd	r25, Y+2	; 0x02
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <LCD_VidWriteData+0x1fe>
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	63 e0       	ldi	r22, 0x03	; 3
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    3348:	6d 96       	adiw	r28, 0x1d	; 29
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <LCD_4Bits_VoidClearDisplay>:
void LCD_4Bits_VoidClearDisplay(void)
{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	2e 97       	sbiw	r28, 0x0e	; 14
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommend(0x01>>4);
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
	LCD_VidWriteCommend(0x01);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	a0 ea       	ldi	r26, 0xA0	; 160
    3380:	b1 e4       	ldi	r27, 0x41	; 65
    3382:	8b 87       	std	Y+11, r24	; 0x0b
    3384:	9c 87       	std	Y+12, r25	; 0x0c
    3386:	ad 87       	std	Y+13, r26	; 0x0d
    3388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a ef       	ldi	r20, 0xFA	; 250
    3398:	54 e4       	ldi	r21, 0x44	; 68
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8f 83       	std	Y+7, r24	; 0x07
    33a4:	98 87       	std	Y+8, r25	; 0x08
    33a6:	a9 87       	std	Y+9, r26	; 0x09
    33a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	2c f4       	brge	.+10     	; 0x33cc <LCD_4Bits_VoidClearDisplay+0x72>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	3f c0       	rjmp	.+126    	; 0x344a <LCD_4Bits_VoidClearDisplay+0xf0>
	else if (__tmp > 65535)
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	57 e4       	ldi	r21, 0x47	; 71
    33dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e0:	18 16       	cp	r1, r24
    33e2:	4c f5       	brge	.+82     	; 0x3436 <LCD_4Bits_VoidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	0f c0       	rjmp	.+30     	; 0x342c <LCD_4Bits_VoidClearDisplay+0xd2>
    340e:	88 ec       	ldi	r24, 0xC8	; 200
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	8b 83       	std	Y+3, r24	; 0x03
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_4Bits_VoidClearDisplay+0xc0>
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	69 f7       	brne	.-38     	; 0x340e <LCD_4Bits_VoidClearDisplay+0xb4>
    3434:	14 c0       	rjmp	.+40     	; 0x345e <LCD_4Bits_VoidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	6f 81       	ldd	r22, Y+7	; 0x07
    3438:	78 85       	ldd	r23, Y+8	; 0x08
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	9a 85       	ldd	r25, Y+10	; 0x0a
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <LCD_4Bits_VoidClearDisplay+0xfc>
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    345e:	2e 96       	adiw	r28, 0x0e	; 14
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <LCD_4Bits_DisplayCharacter>:
void LCD_4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	0f 92       	push	r0
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data>>4);
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	82 95       	swap	r24
    3480:	8f 70       	andi	r24, 0x0F	; 15
    3482:	0e 94 9c 18 	call	0x3138	; 0x3138 <LCD_VidWriteData>
	LCD_VidWriteData(Copy_u8Data);
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	0e 94 9c 18 	call	0x3138	; 0x3138 <LCD_VidWriteData>
}
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <LCD_4Bits_DisplayString>:
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	00 d0       	rcall	.+0      	; 0x349a <LCD_4Bits_DisplayString+0x6>
    349a:	0f 92       	push	r0
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	9b 83       	std	Y+3, r25	; 0x03
    34a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    34a4:	19 82       	std	Y+1, r1	; 0x01
    34a6:	0e c0       	rjmp	.+28     	; 0x34c4 <LCD_4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	8a 81       	ldd	r24, Y+2	; 0x02
    34b0:	9b 81       	ldd	r25, Y+3	; 0x03
    34b2:	fc 01       	movw	r30, r24
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	80 81       	ld	r24, Z
    34ba:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_4Bits_DisplayCharacter>
		Loc_u8Count++;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	8f 5f       	subi	r24, 0xFF	; 255
    34c2:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data);
}
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	9b 81       	ldd	r25, Y+3	; 0x03
    34ce:	fc 01       	movw	r30, r24
    34d0:	e2 0f       	add	r30, r18
    34d2:	f3 1f       	adc	r31, r19
    34d4:	80 81       	ld	r24, Z
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	29 f7       	brne	.-54     	; 0x34a8 <LCD_4Bits_DisplayString+0x14>
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	08 95       	ret

000034ea <LCD_4Bits_VidWriteNumber>:
	{

	}
}*/
void LCD_4Bits_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	2c 97       	sbiw	r28, 0x0c	; 12
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	69 87       	std	Y+9, r22	; 0x09
    3508:	7a 87       	std	Y+10, r23	; 0x0a
    350a:	8b 87       	std	Y+11, r24	; 0x0b
    350c:	9c 87       	std	Y+12, r25	; 0x0c
    350e:	1d 82       	std	Y+5, r1	; 0x05
    3510:	1e 82       	std	Y+6, r1	; 0x06
    3512:	1f 82       	std	Y+7, r1	; 0x07
    3514:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    3516:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    3518:	89 85       	ldd	r24, Y+9	; 0x09
    351a:	9a 85       	ldd	r25, Y+10	; 0x0a
    351c:	ab 85       	ldd	r26, Y+11	; 0x0b
    351e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	a1 05       	cpc	r26, r1
    3524:	b1 05       	cpc	r27, r1
    3526:	09 f0       	breq	.+2      	; 0x352a <LCD_4Bits_VidWriteNumber+0x40>
    3528:	46 c0       	rjmp	.+140    	; 0x35b6 <LCD_4Bits_VidWriteNumber+0xcc>
{
	LCD_4Bits_DisplayCharacter(48);
    352a:	80 e3       	ldi	r24, 0x30	; 48
    352c:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_4Bits_DisplayCharacter>
    3530:	42 c0       	rjmp	.+132    	; 0x35b6 <LCD_4Bits_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	af 81       	ldd	r26, Y+7	; 0x07
    3538:	b8 85       	ldd	r27, Y+8	; 0x08
    353a:	2a e0       	ldi	r18, 0x0A	; 10
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e0       	ldi	r20, 0x00	; 0
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	bc 01       	movw	r22, r24
    3544:	cd 01       	movw	r24, r26
    3546:	0e 94 20 22 	call	0x4440	; 0x4440 <__mulsi3>
    354a:	7b 01       	movw	r14, r22
    354c:	8c 01       	movw	r16, r24
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	ab 85       	ldd	r26, Y+11	; 0x0b
    3554:	bc 85       	ldd	r27, Y+12	; 0x0c
    3556:	2a e0       	ldi	r18, 0x0A	; 10
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__udivmodsi4>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8e 0d       	add	r24, r14
    356c:	9f 1d       	adc	r25, r15
    356e:	a0 1f       	adc	r26, r16
    3570:	b1 1f       	adc	r27, r17
    3572:	8d 83       	std	Y+5, r24	; 0x05
    3574:	9e 83       	std	Y+6, r25	; 0x06
    3576:	af 83       	std	Y+7, r26	; 0x07
    3578:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	af 81       	ldd	r26, Y+7	; 0x07
    3580:	b8 85       	ldd	r27, Y+8	; 0x08
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	a1 05       	cpc	r26, r1
    3586:	b1 05       	cpc	r27, r1
    3588:	21 f4       	brne	.+8      	; 0x3592 <LCD_4Bits_VidWriteNumber+0xa8>
	{
		 y=0;
    358a:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	ab 85       	ldd	r26, Y+11	; 0x0b
    3598:	bc 85       	ldd	r27, Y+12	; 0x0c
    359a:	2a e0       	ldi	r18, 0x0A	; 10
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e0       	ldi	r20, 0x00	; 0
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__udivmodsi4>
    35aa:	da 01       	movw	r26, r20
    35ac:	c9 01       	movw	r24, r18
    35ae:	89 87       	std	Y+9, r24	; 0x09
    35b0:	9a 87       	std	Y+10, r25	; 0x0a
    35b2:	ab 87       	std	Y+11, r26	; 0x0b
    35b4:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_4Bits_DisplayCharacter(48);
}
while(LOC_u32num>0)
    35b6:	89 85       	ldd	r24, Y+9	; 0x09
    35b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    35bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	a1 05       	cpc	r26, r1
    35c2:	b1 05       	cpc	r27, r1
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <LCD_4Bits_VidWriteNumber+0xde>
    35c6:	b5 cf       	rjmp	.-150    	; 0x3532 <LCD_4Bits_VidWriteNumber+0x48>
    35c8:	25 c0       	rjmp	.+74     	; 0x3614 <LCD_4Bits_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	af 81       	ldd	r26, Y+7	; 0x07
    35d0:	b8 85       	ldd	r27, Y+8	; 0x08
    35d2:	2a e0       	ldi	r18, 0x0A	; 10
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__udivmodsi4>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_4Bits_DisplayCharacter(res+48);
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	80 5d       	subi	r24, 0xD0	; 208
    35ec:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_4Bits_DisplayCharacter>
	revrese=revrese/10;
    35f0:	8d 81       	ldd	r24, Y+5	; 0x05
    35f2:	9e 81       	ldd	r25, Y+6	; 0x06
    35f4:	af 81       	ldd	r26, Y+7	; 0x07
    35f6:	b8 85       	ldd	r27, Y+8	; 0x08
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 53 22 	call	0x44a6	; 0x44a6 <__udivmodsi4>
    3608:	da 01       	movw	r26, r20
    360a:	c9 01       	movw	r24, r18
    360c:	8d 83       	std	Y+5, r24	; 0x05
    360e:	9e 83       	std	Y+6, r25	; 0x06
    3610:	af 83       	std	Y+7, r26	; 0x07
    3612:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	af 81       	ldd	r26, Y+7	; 0x07
    361a:	b8 85       	ldd	r27, Y+8	; 0x08
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	a1 05       	cpc	r26, r1
    3620:	b1 05       	cpc	r27, r1
    3622:	99 f6       	brne	.-90     	; 0x35ca <LCD_4Bits_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    3624:	8c 81       	ldd	r24, Y+4	; 0x04
    3626:	88 23       	and	r24, r24
    3628:	61 f4       	brne	.+24     	; 0x3642 <LCD_4Bits_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    362a:	19 82       	std	Y+1, r1	; 0x01
    362c:	06 c0       	rjmp	.+12     	; 0x363a <LCD_4Bits_VidWriteNumber+0x150>
	{
		LCD_4Bits_DisplayCharacter(48);
    362e:	80 e3       	ldi	r24, 0x30	; 48
    3630:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_4Bits_DisplayCharacter>
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	8f 5f       	subi	r24, 0xFF	; 255
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	99 81       	ldd	r25, Y+1	; 0x01
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	98 17       	cp	r25, r24
    3640:	b0 f3       	brcs	.-20     	; 0x362e <LCD_4Bits_VidWriteNumber+0x144>
	{
		LCD_4Bits_DisplayCharacter(48);
	}
}
}
    3642:	2c 96       	adiw	r28, 0x0c	; 12
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	08 95       	ret

0000365c <LCD_4Bits_SetPosition>:
void LCD_4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	00 d0       	rcall	.+0      	; 0x3662 <LCD_4Bits_SetPosition+0x6>
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==0)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	88 23       	and	r24, r24
    366e:	b9 f4       	brne	.+46     	; 0x369e <LCD_4Bits_SetPosition+0x42>
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	80 31       	cpi	r24, 0x10	; 16
    3674:	a0 f4       	brcc	.+40     	; 0x369e <LCD_4Bits_SetPosition+0x42>
	{
		LCD_VidWriteCommend((128+Copy_u8PositionNumber)>>4);
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	80 58       	subi	r24, 0x80	; 128
    367e:	9f 4f       	sbci	r25, 0xFF	; 255
    3680:	95 95       	asr	r25
    3682:	87 95       	ror	r24
    3684:	95 95       	asr	r25
    3686:	87 95       	ror	r24
    3688:	95 95       	asr	r25
    368a:	87 95       	ror	r24
    368c:	95 95       	asr	r25
    368e:	87 95       	ror	r24
    3690:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
		LCD_VidWriteCommend((128+Copy_u8PositionNumber));
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	80 58       	subi	r24, 0x80	; 128
    3698:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
    369c:	19 c0       	rjmp	.+50     	; 0x36d0 <LCD_4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	b1 f4       	brne	.+44     	; 0x36d0 <LCD_4Bits_SetPosition+0x74>
    36a4:	8a 81       	ldd	r24, Y+2	; 0x02
    36a6:	80 31       	cpi	r24, 0x10	; 16
    36a8:	98 f4       	brcc	.+38     	; 0x36d0 <LCD_4Bits_SetPosition+0x74>
	{
		LCD_VidWriteCommend((192+Copy_u8PositionNumber)>>4);
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	80 54       	subi	r24, 0x40	; 64
    36b2:	9f 4f       	sbci	r25, 0xFF	; 255
    36b4:	95 95       	asr	r25
    36b6:	87 95       	ror	r24
    36b8:	95 95       	asr	r25
    36ba:	87 95       	ror	r24
    36bc:	95 95       	asr	r25
    36be:	87 95       	ror	r24
    36c0:	95 95       	asr	r25
    36c2:	87 95       	ror	r24
    36c4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
		LCD_VidWriteCommend((192+Copy_u8PositionNumber));
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	80 54       	subi	r24, 0x40	; 64
    36cc:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_VidWriteCommend>
	}
	else
	{
	}
}
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <KEYPAD_VidInit>:
#include "Keypad_Interface.h"



void KEYPAD_VidInit(void)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
	/*we will set the first 4-pins as output by set 1 in direction*/
	DIO_VidSetPinDirection(DIO_Keypad_Columns,Colum_0,OUTPUT);
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	64 e0       	ldi	r22, 0x04	; 4
    36e6:	41 e0       	ldi	r20, 0x01	; 1
    36e8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Columns,Colum_1,OUTPUT);
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	65 e0       	ldi	r22, 0x05	; 5
    36f0:	41 e0       	ldi	r20, 0x01	; 1
    36f2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Columns,Colum_2,OUTPUT);
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	66 e0       	ldi	r22, 0x06	; 6
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Columns,Colum_3,OUTPUT);
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	67 e0       	ldi	r22, 0x07	; 7
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	 /*and set the second 4-pins as input by set 0 in direction*/
	DIO_VidSetPinDirection(DIO_Keypad_Rows,Row_0,INPUT);
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	64 e0       	ldi	r22, 0x04	; 4
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Rows,Row_1,INPUT);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	65 e0       	ldi	r22, 0x05	; 5
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Rows,Row_2,INPUT);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	66 e0       	ldi	r22, 0x06	; 6
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_Keypad_Rows,Row_3,INPUT);
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	67 e0       	ldi	r22, 0x07	; 7
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	/*the 4 input pins we will activate pull up resistor */
	DIO_VidSetPinValue(DIO_Keypad_Rows,Row_0,HIGH);
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	64 e0       	ldi	r22, 0x04	; 4
    3736:	41 e0       	ldi	r20, 0x01	; 1
    3738:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Rows,Row_1,HIGH);
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	65 e0       	ldi	r22, 0x05	; 5
    3740:	41 e0       	ldi	r20, 0x01	; 1
    3742:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Rows,Row_2,HIGH);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	66 e0       	ldi	r22, 0x06	; 6
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Rows,Row_3,HIGH);
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	67 e0       	ldi	r22, 0x07	; 7
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	/*the 4 output pins we will set value as 1*/
	DIO_VidSetPinValue(DIO_Keypad_Columns,Colum_0,HIGH);
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	64 e0       	ldi	r22, 0x04	; 4
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Columns,Colum_1,HIGH);
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	65 e0       	ldi	r22, 0x05	; 5
    3768:	41 e0       	ldi	r20, 0x01	; 1
    376a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Columns,Colum_2,HIGH);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	66 e0       	ldi	r22, 0x06	; 6
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DIO_Keypad_Columns,Colum_3,HIGH);
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	67 e0       	ldi	r22, 0x07	; 7
    377c:	41 e0       	ldi	r20, 0x01	; 1
    377e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>

}
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <KEYPAD_GET_PressedKey>:
u8 KEYPAD_GET_PressedKey(void)
{   u8 keypad_array[4][4]={{ 1, 2, 3, 4},
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	a7 97       	sbiw	r28, 0x27	; 39
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
		                   { 5, 6, 7, 8},
						   { 9,10,11,12},
						   {13,14,15,16}};
    379c:	ce 01       	movw	r24, r28
    379e:	42 96       	adiw	r24, 0x12	; 18
    37a0:	9c a3       	std	Y+36, r25	; 0x24
    37a2:	8b a3       	std	Y+35, r24	; 0x23
    37a4:	ef ec       	ldi	r30, 0xCF	; 207
    37a6:	f1 e0       	ldi	r31, 0x01	; 1
    37a8:	fe a3       	std	Y+38, r31	; 0x26
    37aa:	ed a3       	std	Y+37, r30	; 0x25
    37ac:	f0 e1       	ldi	r31, 0x10	; 16
    37ae:	ff a3       	std	Y+39, r31	; 0x27
    37b0:	ed a1       	ldd	r30, Y+37	; 0x25
    37b2:	fe a1       	ldd	r31, Y+38	; 0x26
    37b4:	00 80       	ld	r0, Z
    37b6:	8d a1       	ldd	r24, Y+37	; 0x25
    37b8:	9e a1       	ldd	r25, Y+38	; 0x26
    37ba:	01 96       	adiw	r24, 0x01	; 1
    37bc:	9e a3       	std	Y+38, r25	; 0x26
    37be:	8d a3       	std	Y+37, r24	; 0x25
    37c0:	eb a1       	ldd	r30, Y+35	; 0x23
    37c2:	fc a1       	ldd	r31, Y+36	; 0x24
    37c4:	00 82       	st	Z, r0
    37c6:	8b a1       	ldd	r24, Y+35	; 0x23
    37c8:	9c a1       	ldd	r25, Y+36	; 0x24
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	9c a3       	std	Y+36, r25	; 0x24
    37ce:	8b a3       	std	Y+35, r24	; 0x23
    37d0:	9f a1       	ldd	r25, Y+39	; 0x27
    37d2:	91 50       	subi	r25, 0x01	; 1
    37d4:	9f a3       	std	Y+39, r25	; 0x27
    37d6:	ef a1       	ldd	r30, Y+39	; 0x27
    37d8:	ee 23       	and	r30, r30
    37da:	51 f7       	brne	.-44     	; 0x37b0 <KEYPAD_GET_PressedKey+0x28>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0xff;
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	8f 87       	std	Y+15, r24	; 0x0f
	for(col=4;col<8;col++)
    37e0:	84 e0       	ldi	r24, 0x04	; 4
    37e2:	89 8b       	std	Y+17, r24	; 0x11
    37e4:	b3 c0       	rjmp	.+358    	; 0x394c <KEYPAD_GET_PressedKey+0x1c4>
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad_Columns, col, 0);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	69 89       	ldd	r22, Y+17	; 0x11
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    37f0:	84 e0       	ldi	r24, 0x04	; 4
    37f2:	88 8b       	std	Y+16, r24	; 0x10
    37f4:	9f c0       	rjmp	.+318    	; 0x3934 <KEYPAD_GET_PressedKey+0x1ac>
		{
			/*every time you change the column value */
			     /*you will check all Rows */
			/*if any Row his value changed that mean*/
				/*there is key is pressed*/
			if(DIO_u8GetPinValue(DIO_Keypad_Rows,row)==0)
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	68 89       	ldd	r22, Y+16	; 0x10
    37fa:	0e 94 09 10 	call	0x2012	; 0x2012 <DIO_u8GetPinValue>
    37fe:	88 23       	and	r24, r24
    3800:	09 f0       	breq	.+2      	; 0x3804 <KEYPAD_GET_PressedKey+0x7c>
    3802:	95 c0       	rjmp	.+298    	; 0x392e <KEYPAD_GET_PressedKey+0x1a6>
			{
				/*we will mapping between the pressed key*/
					/*and the value in keypad array*/
				keypad_out= keypad_array[row-4][col-4];
    3804:	88 89       	ldd	r24, Y+16	; 0x10
    3806:	88 2f       	mov	r24, r24
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9c 01       	movw	r18, r24
    380c:	24 50       	subi	r18, 0x04	; 4
    380e:	30 40       	sbci	r19, 0x00	; 0
    3810:	89 89       	ldd	r24, Y+17	; 0x11
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	ac 01       	movw	r20, r24
    3818:	44 50       	subi	r20, 0x04	; 4
    381a:	50 40       	sbci	r21, 0x00	; 0
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	22 0f       	add	r18, r18
    3822:	33 1f       	adc	r19, r19
    3824:	ce 01       	movw	r24, r28
    3826:	01 96       	adiw	r24, 0x01	; 1
    3828:	82 0f       	add	r24, r18
    382a:	93 1f       	adc	r25, r19
    382c:	84 0f       	add	r24, r20
    382e:	95 1f       	adc	r25, r21
    3830:	fc 01       	movw	r30, r24
    3832:	71 96       	adiw	r30, 0x11	; 17
    3834:	80 81       	ld	r24, Z
    3836:	8f 87       	std	Y+15, r24	; 0x0f
				/* if the key is still pressed you will not  */
				      /* go to for the next instruction*/
				while(DIO_u8GetPinValue(DIO_Keypad_Rows,row)==0);
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	68 89       	ldd	r22, Y+16	; 0x10
    383c:	0e 94 09 10 	call	0x2012	; 0x2012 <DIO_u8GetPinValue>
    3840:	88 23       	and	r24, r24
    3842:	d1 f3       	breq	.-12     	; 0x3838 <KEYPAD_GET_PressedKey+0xb0>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a8 e4       	ldi	r26, 0x48	; 72
    384a:	b2 e4       	ldi	r27, 0x42	; 66
    384c:	8b 87       	std	Y+11, r24	; 0x0b
    384e:	9c 87       	std	Y+12, r25	; 0x0c
    3850:	ad 87       	std	Y+13, r26	; 0x0d
    3852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	6b 85       	ldd	r22, Y+11	; 0x0b
    3856:	7c 85       	ldd	r23, Y+12	; 0x0c
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8f 83       	std	Y+7, r24	; 0x07
    386e:	98 87       	std	Y+8, r25	; 0x08
    3870:	a9 87       	std	Y+9, r26	; 0x09
    3872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3874:	6f 81       	ldd	r22, Y+7	; 0x07
    3876:	78 85       	ldd	r23, Y+8	; 0x08
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <KEYPAD_GET_PressedKey+0x10e>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <KEYPAD_GET_PressedKey+0x18c>
	else if (__tmp > 65535)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <KEYPAD_GET_PressedKey+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9e 83       	std	Y+6, r25	; 0x06
    38d4:	8d 83       	std	Y+5, r24	; 0x05
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <KEYPAD_GET_PressedKey+0x16e>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	8b 81       	ldd	r24, Y+3	; 0x03
    38e2:	9c 81       	ldd	r25, Y+4	; 0x04
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <KEYPAD_GET_PressedKey+0x15c>
    38e8:	9c 83       	std	Y+4, r25	; 0x04
    38ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	9e 81       	ldd	r25, Y+6	; 0x06
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <KEYPAD_GET_PressedKey+0x150>
    38fe:	14 c0       	rjmp	.+40     	; 0x3928 <KEYPAD_GET_PressedKey+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9e 83       	std	Y+6, r25	; 0x06
    3912:	8d 83       	std	Y+5, r24	; 0x05
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	9a 81       	ldd	r25, Y+2	; 0x02
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <KEYPAD_GET_PressedKey+0x198>
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(50);
				return keypad_out;
    3928:	ff 85       	ldd	r31, Y+15	; 0x0f
    392a:	fa a3       	std	Y+34, r31	; 0x22
    392c:	15 c0       	rjmp	.+42     	; 0x3958 <KEYPAD_GET_PressedKey+0x1d0>
	for(col=4;col<8;col++)
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad_Columns, col, 0);
		for(row=4;row<8;row++)
    392e:	88 89       	ldd	r24, Y+16	; 0x10
    3930:	8f 5f       	subi	r24, 0xFF	; 255
    3932:	88 8b       	std	Y+16, r24	; 0x10
    3934:	88 89       	ldd	r24, Y+16	; 0x10
    3936:	88 30       	cpi	r24, 0x08	; 8
    3938:	08 f4       	brcc	.+2      	; 0x393c <KEYPAD_GET_PressedKey+0x1b4>
    393a:	5d cf       	rjmp	.-326    	; 0x37f6 <KEYPAD_GET_PressedKey+0x6e>


		}
			  /*if you check in all rows in this column*/
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad_Columns, col, 1);
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	69 89       	ldd	r22, Y+17	; 0x11
    3940:	41 e0       	ldi	r20, 0x01	; 1
    3942:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0xff;
	for(col=4;col<8;col++)
    3946:	89 89       	ldd	r24, Y+17	; 0x11
    3948:	8f 5f       	subi	r24, 0xFF	; 255
    394a:	89 8b       	std	Y+17, r24	; 0x11
    394c:	89 89       	ldd	r24, Y+17	; 0x11
    394e:	88 30       	cpi	r24, 0x08	; 8
    3950:	08 f4       	brcc	.+2      	; 0x3954 <KEYPAD_GET_PressedKey+0x1cc>
    3952:	49 cf       	rjmp	.-366    	; 0x37e6 <KEYPAD_GET_PressedKey+0x5e>
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad_Columns, col, 1);
	}
/*if there is any switch is pressed the value of keypad_out variable*/
	/*will change from 0 to the mapping value in keypad_array*/
return keypad_out;
    3954:	8f 85       	ldd	r24, Y+15	; 0x0f
    3956:	8a a3       	std	Y+34, r24	; 0x22
    3958:	8a a1       	ldd	r24, Y+34	; 0x22
}
    395a:	a7 96       	adiw	r28, 0x27	; 39
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <EEPROM_voidInit>:
#include "EEPROM_private.h"
#include "EERPROM_interface.h"


void EEPROM_voidInit(void)
{
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    3974:	0e 94 17 07 	call	0xe2e	; 0xe2e <TWI_voidMasterInit>
}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <EEPROM_u8WriteDataByte>:

u8   EEPROM_u8WriteDataByte(u8 Copy_u8Data,u16 Copy_u16ByteAddress)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	63 97       	sbiw	r28, 0x13	; 19
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	89 8b       	std	Y+17, r24	; 0x11
    3994:	7b 8b       	std	Y+19, r23	; 0x13
    3996:	6a 8b       	std	Y+18, r22	; 0x12
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	8f 87       	std	Y+15, r24	; 0x0f
	/* Start Condition */
	Local_enuTWIErrorState = TWI_enuSendStartCondition();
    39a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TWI_enuSendStartCondition>
    39a4:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    39a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a8:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    39ac:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Slave Address with Write Bit */
	Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite((EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8)));
    39ae:	8a 89       	ldd	r24, Y+18	; 0x12
    39b0:	9b 89       	ldd	r25, Y+19	; 0x13
    39b2:	89 2f       	mov	r24, r25
    39b4:	99 27       	eor	r25, r25
    39b6:	84 65       	ori	r24, 0x54	; 84
    39b8:	0e 94 b1 07 	call	0xf62	; 0xf62 <TWI_enuSendSlaveWithWrite>
    39bc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    39be:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    39c4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Rest Of The Byte Address */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    39c6:	8a 89       	ldd	r24, Y+18	; 0x12
    39c8:	0e 94 23 08 	call	0x1046	; 0x1046 <TWI_enuSendDataByte>
    39cc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    39ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    39d4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Data Byte */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u8Data);
    39d6:	89 89       	ldd	r24, Y+17	; 0x11
    39d8:	0e 94 23 08 	call	0x1046	; 0x1046 <TWI_enuSendDataByte>
    39dc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    39de:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    39e4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Stop Condition */
	TWI_voidSendStopCondition();
    39e6:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_voidSendStopCondition>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	a0 ea       	ldi	r26, 0xA0	; 160
    39f0:	b0 e4       	ldi	r27, 0x40	; 64
    39f2:	8b 87       	std	Y+11, r24	; 0x0b
    39f4:	9c 87       	std	Y+12, r25	; 0x0c
    39f6:	ad 87       	std	Y+13, r26	; 0x0d
    39f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a ef       	ldi	r20, 0xFA	; 250
    3a08:	54 e4       	ldi	r21, 0x44	; 68
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	8f 83       	std	Y+7, r24	; 0x07
    3a14:	98 87       	std	Y+8, r25	; 0x08
    3a16:	a9 87       	std	Y+9, r26	; 0x09
    3a18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e8       	ldi	r20, 0x80	; 128
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	2c f4       	brge	.+10     	; 0x3a3c <EEPROM_u8WriteDataByte+0xbe>
		__ticks = 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <EEPROM_u8WriteDataByte+0x13c>
	else if (__tmp > 65535)
    3a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3e:	78 85       	ldd	r23, Y+8	; 0x08
    3a40:	89 85       	ldd	r24, Y+9	; 0x09
    3a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	57 e4       	ldi	r21, 0x47	; 71
    3a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a50:	18 16       	cp	r1, r24
    3a52:	4c f5       	brge	.+82     	; 0x3aa6 <EEPROM_u8WriteDataByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <EEPROM_u8WriteDataByte+0x11e>
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9c 83       	std	Y+4, r25	; 0x04
    3a84:	8b 83       	std	Y+3, r24	; 0x03
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <EEPROM_u8WriteDataByte+0x10c>
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
    3a90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a92:	8d 81       	ldd	r24, Y+5	; 0x05
    3a94:	9e 81       	ldd	r25, Y+6	; 0x06
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	9e 83       	std	Y+6, r25	; 0x06
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	69 f7       	brne	.-38     	; 0x3a7e <EEPROM_u8WriteDataByte+0x100>
    3aa4:	14 c0       	rjmp	.+40     	; 0x3ace <EEPROM_u8WriteDataByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa8:	78 85       	ldd	r23, Y+8	; 0x08
    3aaa:	89 85       	ldd	r24, Y+9	; 0x09
    3aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	9a 83       	std	Y+2, r25	; 0x02
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <EEPROM_u8WriteDataByte+0x148>
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_u8ErrorState;
    3ace:	88 89       	ldd	r24, Y+16	; 0x10
}
    3ad0:	63 96       	adiw	r28, 0x13	; 19
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <EEPROM_u8ReadDataByte>:

u8   EEPROM_u8ReadDataByte(u8 * Copy_pu8ReceivedData ,u16 Copy_u16ByteAddress )
{
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	65 97       	sbiw	r28, 0x15	; 21
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	9b 8b       	std	Y+19, r25	; 0x13
    3af8:	8a 8b       	std	Y+18, r24	; 0x12
    3afa:	7d 8b       	std	Y+21, r23	; 0x15
    3afc:	6c 8b       	std	Y+20, r22	; 0x14
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	88 8b       	std	Y+16, r24	; 0x10
	if(Copy_pu8ReceivedData != NULL)
    3b06:	8a 89       	ldd	r24, Y+18	; 0x12
    3b08:	9b 89       	ldd	r25, Y+19	; 0x13
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <EEPROM_u8ReadDataByte+0x2e>
    3b0e:	aa c0       	rjmp	.+340    	; 0x3c64 <EEPROM_u8ReadDataByte+0x182>
	{
		u8 Local_u8EEPROMAddress = (EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8));
    3b10:	8c 89       	ldd	r24, Y+20	; 0x14
    3b12:	9d 89       	ldd	r25, Y+21	; 0x15
    3b14:	89 2f       	mov	r24, r25
    3b16:	99 27       	eor	r25, r25
    3b18:	84 65       	ori	r24, 0x54	; 84
    3b1a:	8f 87       	std	Y+15, r24	; 0x0f
		/* Send Start Condition */
		Local_enuTWIErrorState = TWI_enuSendStartCondition();
    3b1c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TWI_enuSendStartCondition>
    3b20:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b22:	88 89       	ldd	r24, Y+16	; 0x10
    3b24:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b28:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Write Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    3b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2c:	0e 94 b1 07 	call	0xf62	; 0xf62 <TWI_enuSendSlaveWithWrite>
    3b30:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b32:	88 89       	ldd	r24, Y+16	; 0x10
    3b34:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b38:	89 8b       	std	Y+17, r24	; 0x11

		/* Send The Rest Of The Byte Address */
		Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    3b3a:	8c 89       	ldd	r24, Y+20	; 0x14
    3b3c:	0e 94 23 08 	call	0x1046	; 0x1046 <TWI_enuSendDataByte>
    3b40:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b42:	88 89       	ldd	r24, Y+16	; 0x10
    3b44:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b48:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Repeated Start Condition */
		Local_enuTWIErrorState = TWI_enuSendRepeatedStartCondition();
    3b4a:	0e 94 86 07 	call	0xf0c	; 0xf0c <TWI_enuSendRepeatedStartCondition>
    3b4e:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b50:	88 89       	ldd	r24, Y+16	; 0x10
    3b52:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b56:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Read Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithRead(Local_u8EEPROMAddress);
    3b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b5a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <TWI_enuSendSlaveWithRead>
    3b5e:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b60:	88 89       	ldd	r24, Y+16	; 0x10
    3b62:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b66:	89 8b       	std	Y+17, r24	; 0x11

		/* Read Data */
		Local_enuTWIErrorState = TWI_enuReceiveDataByte(Copy_pu8ReceivedData);
    3b68:	8a 89       	ldd	r24, Y+18	; 0x12
    3b6a:	9b 89       	ldd	r25, Y+19	; 0x13
    3b6c:	0e 94 4d 08 	call	0x109a	; 0x109a <TWI_enuReceiveDataByte>
    3b70:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3b72:	88 89       	ldd	r24, Y+16	; 0x10
    3b74:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Private_u8ErrorStateCheck>
    3b78:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Stop Condition */
		TWI_voidSendStopCondition();
    3b7a:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_voidSendStopCondition>
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	a0 ea       	ldi	r26, 0xA0	; 160
    3b84:	b0 e4       	ldi	r27, 0x40	; 64
    3b86:	8b 87       	std	Y+11, r24	; 0x0b
    3b88:	9c 87       	std	Y+12, r25	; 0x0c
    3b8a:	ad 87       	std	Y+13, r26	; 0x0d
    3b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	4a ef       	ldi	r20, 0xFA	; 250
    3b9c:	54 e4       	ldi	r21, 0x44	; 68
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	8f 83       	std	Y+7, r24	; 0x07
    3ba8:	98 87       	std	Y+8, r25	; 0x08
    3baa:	a9 87       	std	Y+9, r26	; 0x09
    3bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e8       	ldi	r20, 0x80	; 128
    3bbc:	5f e3       	ldi	r21, 0x3F	; 63
    3bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc2:	88 23       	and	r24, r24
    3bc4:	2c f4       	brge	.+10     	; 0x3bd0 <EEPROM_u8ReadDataByte+0xee>
		__ticks = 1;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	9e 83       	std	Y+6, r25	; 0x06
    3bcc:	8d 83       	std	Y+5, r24	; 0x05
    3bce:	3f c0       	rjmp	.+126    	; 0x3c4e <EEPROM_u8ReadDataByte+0x16c>
	else if (__tmp > 65535)
    3bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd2:	78 85       	ldd	r23, Y+8	; 0x08
    3bd4:	89 85       	ldd	r24, Y+9	; 0x09
    3bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	3f ef       	ldi	r19, 0xFF	; 255
    3bdc:	4f e7       	ldi	r20, 0x7F	; 127
    3bde:	57 e4       	ldi	r21, 0x47	; 71
    3be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3be4:	18 16       	cp	r1, r24
    3be6:	4c f5       	brge	.+82     	; 0x3c3a <EEPROM_u8ReadDataByte+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	40 e2       	ldi	r20, 0x20	; 32
    3bf6:	51 e4       	ldi	r21, 0x41	; 65
    3bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	bc 01       	movw	r22, r24
    3c02:	cd 01       	movw	r24, r26
    3c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	9e 83       	std	Y+6, r25	; 0x06
    3c0e:	8d 83       	std	Y+5, r24	; 0x05
    3c10:	0f c0       	rjmp	.+30     	; 0x3c30 <EEPROM_u8ReadDataByte+0x14e>
    3c12:	88 ec       	ldi	r24, 0xC8	; 200
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	9c 83       	std	Y+4, r25	; 0x04
    3c18:	8b 83       	std	Y+3, r24	; 0x03
    3c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1e:	01 97       	sbiw	r24, 0x01	; 1
    3c20:	f1 f7       	brne	.-4      	; 0x3c1e <EEPROM_u8ReadDataByte+0x13c>
    3c22:	9c 83       	std	Y+4, r25	; 0x04
    3c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c26:	8d 81       	ldd	r24, Y+5	; 0x05
    3c28:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	9e 83       	std	Y+6, r25	; 0x06
    3c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
    3c34:	00 97       	sbiw	r24, 0x00	; 0
    3c36:	69 f7       	brne	.-38     	; 0x3c12 <EEPROM_u8ReadDataByte+0x130>
    3c38:	16 c0       	rjmp	.+44     	; 0x3c66 <EEPROM_u8ReadDataByte+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3c:	78 85       	ldd	r23, Y+8	; 0x08
    3c3e:	89 85       	ldd	r24, Y+9	; 0x09
    3c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
    3c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c50:	9e 81       	ldd	r25, Y+6	; 0x06
    3c52:	9a 83       	std	Y+2, r25	; 0x02
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <EEPROM_u8ReadDataByte+0x178>
    3c5e:	9a 83       	std	Y+2, r25	; 0x02
    3c60:	89 83       	std	Y+1, r24	; 0x01
    3c62:	01 c0       	rjmp	.+2      	; 0x3c66 <EEPROM_u8ReadDataByte+0x184>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3c64:	19 8a       	std	Y+17, r1	; 0x11
	}
	return Local_u8ErrorState;
    3c66:	89 89       	ldd	r24, Y+17	; 0x11

}
    3c68:	65 96       	adiw	r28, 0x15	; 21
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <Private_u8ErrorStateCheck>:

static u8   Private_u8ErrorStateCheck(TWI_ErrorState Copy_enuErrorState)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <Private_u8ErrorStateCheck+0x6>
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuErrorState != TWI_OK)
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	09 f0       	breq	.+2      	; 0x3c92 <Private_u8ErrorStateCheck+0x18>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3c90:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	cf 91       	pop	r28
    3c9a:	df 91       	pop	r29
    3c9c:	08 95       	ret

00003c9e <DC_Motor_VoidInit>:
		/*MCAL*/
#include "../../MCAL/DIO/DIO_INT.h"
#include "../../MCAL/DIO/DIO_config.h"
#include "DC_Motor.h"
void DC_Motor_VoidInit(void)
{
    3c9e:	df 93       	push	r29
    3ca0:	cf 93       	push	r28
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTA,PIN3,OUTPUT);
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	63 e0       	ldi	r22, 0x03	; 3
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTA,PIN3,LOW);
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	63 e0       	ldi	r22, 0x03	; 3
    3cb4:	40 e0       	ldi	r20, 0x00	; 0
    3cb6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
}
    3cba:	cf 91       	pop	r28
    3cbc:	df 91       	pop	r29
    3cbe:	08 95       	ret

00003cc0 <DC_Motor_On_Off>:
void DC_Motor_On_Off(u8 Copy_DC_State)
{
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	0f 92       	push	r0
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_DC_State==ON)
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	81 30       	cpi	r24, 0x01	; 1
    3cd0:	31 f4       	brne	.+12     	; 0x3cde <DC_Motor_On_Off+0x1e>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN3,HIGH);
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	63 e0       	ldi	r22, 0x03	; 3
    3cd6:	41 e0       	ldi	r20, 0x01	; 1
    3cd8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    3cdc:	08 c0       	rjmp	.+16     	; 0x3cee <DC_Motor_On_Off+0x2e>
	}
	else if(Copy_DC_State==OFF)
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	88 23       	and	r24, r24
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <DC_Motor_On_Off+0x2e>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN3,LOW);
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	63 e0       	ldi	r22, 0x03	; 3
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	}
}
    3cee:	0f 90       	pop	r0
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <Buzzer_VoidInit>:
		/*MCAL*/
#include "../../MCAL/DIO/DIO_INT.h"
#include "../../MCAL/DIO/DIO_config.h"
#include "Buzzer.h"
void Buzzer_VoidInit(void)
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(DIO_PORTA,PIN0,OUTPUT);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(DIO_PORTA,PIN0,LOW);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
}
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <Buzzer_On_Off>:
void Buzzer_On_Off(u8 Copy_Buzzer_State)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	0f 92       	push	r0
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62
    3d22:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Buzzer_State==ON)
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	81 30       	cpi	r24, 0x01	; 1
    3d28:	31 f4       	brne	.+12     	; 0x3d36 <Buzzer_On_Off+0x1e>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN0,HIGH);
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	41 e0       	ldi	r20, 0x01	; 1
    3d30:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
    3d34:	08 c0       	rjmp	.+16     	; 0x3d46 <Buzzer_On_Off+0x2e>
	}
	else if(Copy_Buzzer_State==OFF)
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	88 23       	and	r24, r24
    3d3a:	29 f4       	brne	.+10     	; 0x3d46 <Buzzer_On_Off+0x2e>
	{
		DIO_VidSetPinValue(DIO_PORTA,PIN0,LOW);
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	60 e0       	ldi	r22, 0x00	; 0
    3d40:	40 e0       	ldi	r20, 0x00	; 0
    3d42:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	}
}
    3d46:	0f 90       	pop	r0
    3d48:	cf 91       	pop	r28
    3d4a:	df 91       	pop	r29
    3d4c:	08 95       	ret

00003d4e <main>:
extern u8 Flag;
extern u16 LM35_Value;
extern u16 LDR_Value;
u8 Keypad_out=0xff;
int main(void)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	a0 97       	sbiw	r28, 0x20	; 32
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
	/*Variable Definition*/
	u16 LDR_Result=0;
    3d62:	18 a2       	std	Y+32, r1	; 0x20
    3d64:	1f 8e       	std	Y+31, r1	; 0x1f
	u16 LM35_Result=0;
    3d66:	1e 8e       	std	Y+30, r1	; 0x1e
    3d68:	1d 8e       	std	Y+29, r1	; 0x1d

	//set direction of D2 in  portD as input
		DIO_VidSetPinDirection(DIO_PORTD,PIN2,INPUT);
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	62 e0       	ldi	r22, 0x02	; 2
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_VidSetPinDirection>
	//activity pull up resistor
		DIO_VidSetPinValue(DIO_PORTD,PIN2,HIGH);
    3d74:	83 e0       	ldi	r24, 0x03	; 3
    3d76:	62 e0       	ldi	r22, 0x02	; 2
    3d78:	41 e0       	ldi	r20, 0x01	; 1
    3d7a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <DIO_VidSetPinValue>
	GIE_Vid_Enable();
    3d7e:	0e 94 4f 0c 	call	0x189e	; 0x189e <GIE_Vid_Enable>
	/*LCD initialization*/
	LCD_VidInit();
    3d82:	0e 94 00 15 	call	0x2a00	; 0x2a00 <LCD_VidInit>
	/*Keypad Initialization*/
	KEYPAD_VidInit();
    3d86:	0e 94 6d 1b 	call	0x36da	; 0x36da <KEYPAD_VidInit>
	/*Servo Initialization*/
	Servo_VoidInit();
    3d8a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <Servo_VoidInit>
	/*Buzzer Initialization*/
	Buzzer_VoidInit();
    3d8e:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <Buzzer_VoidInit>
	/*DC Motor Initialization*/
	DC_Motor_VoidInit();
    3d92:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <DC_Motor_VoidInit>
	/*External Interrupt zero*/
	EX_INT0_INIT();
    3d96:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <EX_INT0_INIT>
	INT0_SetCallBack(INT0_InterruptFunction);
    3d9a:	88 e2       	ldi	r24, 0x28	; 40
    3d9c:	90 e2       	ldi	r25, 0x20	; 32
    3d9e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <INT0_SetCallBack>
	/*LDR Function */
	LDR_u8Init(PIN1,ADC_InterruptFunction);
    3da2:	21 e1       	ldi	r18, 0x11	; 17
    3da4:	30 e2       	ldi	r19, 0x20	; 32
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	b9 01       	movw	r22, r18
    3daa:	0e 94 bd 13 	call	0x277a	; 0x277a <LDR_u8Init>
	/*LM35 function*/
	LM35_u8Init(PIN2,ADC_InterruptFunction);
    3dae:	21 e1       	ldi	r18, 0x11	; 17
    3db0:	30 e2       	ldi	r19, 0x20	; 32
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	b9 01       	movw	r22, r18
    3db6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <LM35_u8Init>
	/*the Intro*/
	LCD_4Bits_DisplayString("WELCOME BACK");
    3dba:	80 e6       	ldi	r24, 0x60	; 96
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	aa e7       	ldi	r26, 0x7A	; 122
    3dc8:	b4 e4       	ldi	r27, 0x44	; 68
    3dca:	89 8f       	std	Y+25, r24	; 0x19
    3dcc:	9a 8f       	std	Y+26, r25	; 0x1a
    3dce:	ab 8f       	std	Y+27, r26	; 0x1b
    3dd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	4a ef       	ldi	r20, 0xFA	; 250
    3de0:	54 e4       	ldi	r21, 0x44	; 68
    3de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	8d 8b       	std	Y+21, r24	; 0x15
    3dec:	9e 8b       	std	Y+22, r25	; 0x16
    3dee:	af 8b       	std	Y+23, r26	; 0x17
    3df0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3df2:	6d 89       	ldd	r22, Y+21	; 0x15
    3df4:	7e 89       	ldd	r23, Y+22	; 0x16
    3df6:	8f 89       	ldd	r24, Y+23	; 0x17
    3df8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	2c f4       	brge	.+10     	; 0x3e14 <main+0xc6>
		__ticks = 1;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	9c 8b       	std	Y+20, r25	; 0x14
    3e10:	8b 8b       	std	Y+19, r24	; 0x13
    3e12:	3f c0       	rjmp	.+126    	; 0x3e92 <main+0x144>
	else if (__tmp > 65535)
    3e14:	6d 89       	ldd	r22, Y+21	; 0x15
    3e16:	7e 89       	ldd	r23, Y+22	; 0x16
    3e18:	8f 89       	ldd	r24, Y+23	; 0x17
    3e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	3f ef       	ldi	r19, 0xFF	; 255
    3e20:	4f e7       	ldi	r20, 0x7F	; 127
    3e22:	57 e4       	ldi	r21, 0x47	; 71
    3e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e28:	18 16       	cp	r1, r24
    3e2a:	4c f5       	brge	.+82     	; 0x3e7e <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	40 e2       	ldi	r20, 0x20	; 32
    3e3a:	51 e4       	ldi	r21, 0x41	; 65
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	bc 01       	movw	r22, r24
    3e46:	cd 01       	movw	r24, r26
    3e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	9c 8b       	std	Y+20, r25	; 0x14
    3e52:	8b 8b       	std	Y+19, r24	; 0x13
    3e54:	0f c0       	rjmp	.+30     	; 0x3e74 <main+0x126>
    3e56:	88 ec       	ldi	r24, 0xC8	; 200
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	9a 8b       	std	Y+18, r25	; 0x12
    3e5c:	89 8b       	std	Y+17, r24	; 0x11
    3e5e:	89 89       	ldd	r24, Y+17	; 0x11
    3e60:	9a 89       	ldd	r25, Y+18	; 0x12
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <main+0x114>
    3e66:	9a 8b       	std	Y+18, r25	; 0x12
    3e68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	9c 8b       	std	Y+20, r25	; 0x14
    3e72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	00 97       	sbiw	r24, 0x00	; 0
    3e7a:	69 f7       	brne	.-38     	; 0x3e56 <main+0x108>
    3e7c:	14 c0       	rjmp	.+40     	; 0x3ea6 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e80:	7e 89       	ldd	r23, Y+22	; 0x16
    3e82:	8f 89       	ldd	r24, Y+23	; 0x17
    3e84:	98 8d       	ldd	r25, Y+24	; 0x18
    3e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	9c 8b       	std	Y+20, r25	; 0x14
    3e90:	8b 8b       	std	Y+19, r24	; 0x13
    3e92:	8b 89       	ldd	r24, Y+19	; 0x13
    3e94:	9c 89       	ldd	r25, Y+20	; 0x14
    3e96:	98 8b       	std	Y+16, r25	; 0x10
    3e98:	8f 87       	std	Y+15, r24	; 0x0f
    3e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9c:	98 89       	ldd	r25, Y+16	; 0x10
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	f1 f7       	brne	.-4      	; 0x3e9e <main+0x150>
    3ea2:	98 8b       	std	Y+16, r25	; 0x10
    3ea4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_4Bits_VoidClearDisplay();
    3ea6:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
	while(1)
	{

		/*the functional of LDR function*/
		LDR_Result=LDR_u8Channal(1);
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LDR_u8Channal>
    3eb0:	98 a3       	std	Y+32, r25	; 0x20
    3eb2:	8f 8f       	std	Y+31, r24	; 0x1f
		LCD_4Bits_SetPosition(0,0);
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	60 e0       	ldi	r22, 0x00	; 0
    3eb8:	0e 94 2e 1b 	call	0x365c	; 0x365c <LCD_4Bits_SetPosition>
		LCD_4Bits_DisplayString("Brightness =");
    3ebc:	8d e6       	ldi	r24, 0x6D	; 109
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
		LCD_4Bits_VidWriteNumber(LDR_Result);
    3ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ec8:	cc 01       	movw	r24, r24
    3eca:	a0 e0       	ldi	r26, 0x00	; 0
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	bc 01       	movw	r22, r24
    3ed0:	cd 01       	movw	r24, r26
    3ed2:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_4Bits_VidWriteNumber>
		/*the functional of LM35 function*/
		LM35_Result=LM35_u8Channal(2);
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	0e 94 9d 13 	call	0x273a	; 0x273a <LM35_u8Channal>
    3edc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ede:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_4Bits_SetPosition(1,0);
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	60 e0       	ldi	r22, 0x00	; 0
    3ee4:	0e 94 2e 1b 	call	0x365c	; 0x365c <LCD_4Bits_SetPosition>
		LCD_4Bits_DisplayString("Temperature =");
    3ee8:	8a e7       	ldi	r24, 0x7A	; 122
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
		LCD_4Bits_VidWriteNumber(LM35_Result);
    3ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ef4:	cc 01       	movw	r24, r24
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	bc 01       	movw	r22, r24
    3efc:	cd 01       	movw	r24, r26
    3efe:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_4Bits_VidWriteNumber>
		if(LM35_Result>35)
    3f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f06:	84 32       	cpi	r24, 0x24	; 36
    3f08:	91 05       	cpc	r25, r1
    3f0a:	18 f0       	brcs	.+6      	; 0x3f12 <main+0x1c4>
		{
			DC_Motor_On_Off(ON);
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <DC_Motor_On_Off>


		}
	     if(LM35_Result>40)
    3f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f16:	89 32       	cpi	r24, 0x29	; 41
    3f18:	91 05       	cpc	r25, r1
    3f1a:	18 f0       	brcs	.+6      	; 0x3f22 <main+0x1d4>
		{
			Buzzer_On_Off(ON);
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <Buzzer_On_Off>
		}
		if(LM35_Result<35)
    3f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f26:	83 32       	cpi	r24, 0x23	; 35
    3f28:	91 05       	cpc	r25, r1
    3f2a:	30 f4       	brcc	.+12     	; 0x3f38 <main+0x1ea>
		{
			DC_Motor_On_Off(OFF);
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <DC_Motor_On_Off>
			Buzzer_On_Off(OFF);
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <Buzzer_On_Off>
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	aa ef       	ldi	r26, 0xFA	; 250
    3f3e:	b3 e4       	ldi	r27, 0x43	; 67
    3f40:	8b 87       	std	Y+11, r24	; 0x0b
    3f42:	9c 87       	std	Y+12, r25	; 0x0c
    3f44:	ad 87       	std	Y+13, r26	; 0x0d
    3f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	4a ef       	ldi	r20, 0xFA	; 250
    3f56:	54 e4       	ldi	r21, 0x44	; 68
    3f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	8f 83       	std	Y+7, r24	; 0x07
    3f62:	98 87       	std	Y+8, r25	; 0x08
    3f64:	a9 87       	std	Y+9, r26	; 0x09
    3f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f68:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6a:	78 85       	ldd	r23, Y+8	; 0x08
    3f6c:	89 85       	ldd	r24, Y+9	; 0x09
    3f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e8       	ldi	r20, 0x80	; 128
    3f76:	5f e3       	ldi	r21, 0x3F	; 63
    3f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f7c:	88 23       	and	r24, r24
    3f7e:	2c f4       	brge	.+10     	; 0x3f8a <main+0x23c>
		__ticks = 1;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05
    3f88:	3f c0       	rjmp	.+126    	; 0x4008 <main+0x2ba>
	else if (__tmp > 65535)
    3f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8c:	78 85       	ldd	r23, Y+8	; 0x08
    3f8e:	89 85       	ldd	r24, Y+9	; 0x09
    3f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	3f ef       	ldi	r19, 0xFF	; 255
    3f96:	4f e7       	ldi	r20, 0x7F	; 127
    3f98:	57 e4       	ldi	r21, 0x47	; 71
    3f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f9e:	18 16       	cp	r1, r24
    3fa0:	4c f5       	brge	.+82     	; 0x3ff4 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 e2       	ldi	r20, 0x20	; 32
    3fb0:	51 e4       	ldi	r21, 0x41	; 65
    3fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	bc 01       	movw	r22, r24
    3fbc:	cd 01       	movw	r24, r26
    3fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	9e 83       	std	Y+6, r25	; 0x06
    3fc8:	8d 83       	std	Y+5, r24	; 0x05
    3fca:	0f c0       	rjmp	.+30     	; 0x3fea <main+0x29c>
    3fcc:	88 ec       	ldi	r24, 0xC8	; 200
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	9c 83       	std	Y+4, r25	; 0x04
    3fd2:	8b 83       	std	Y+3, r24	; 0x03
    3fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <main+0x28a>
    3fdc:	9c 83       	std	Y+4, r25	; 0x04
    3fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	9e 83       	std	Y+6, r25	; 0x06
    3fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fea:	8d 81       	ldd	r24, Y+5	; 0x05
    3fec:	9e 81       	ldd	r25, Y+6	; 0x06
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	69 f7       	brne	.-38     	; 0x3fcc <main+0x27e>
    3ff2:	14 c0       	rjmp	.+40     	; 0x401c <main+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff6:	78 85       	ldd	r23, Y+8	; 0x08
    3ff8:	89 85       	ldd	r24, Y+9	; 0x09
    3ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	9e 83       	std	Y+6, r25	; 0x06
    4006:	8d 83       	std	Y+5, r24	; 0x05
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	9e 81       	ldd	r25, Y+6	; 0x06
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <main+0x2c6>
    4018:	9a 83       	std	Y+2, r25	; 0x02
    401a:	89 83       	std	Y+1, r24	; 0x01
		}
		/*Waiting for 500 ms*/
		_delay_ms(500);
		/*clear Display*/
		LCD_4Bits_VoidClearDisplay();
    401c:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
    4020:	44 cf       	rjmp	.-376    	; 0x3eaa <main+0x15c>

00004022 <ADC_InterruptFunction>:


	return 0;
}
void ADC_InterruptFunction(void)
{
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
	if(Flag==1)
    402a:	80 91 ee 01 	lds	r24, 0x01EE
    402e:	81 30       	cpi	r24, 0x01	; 1
    4030:	21 f4       	brne	.+8      	; 0x403a <ADC_InterruptFunction+0x18>
	{
		ADC_Get_Result(&LM35_Value);
    4032:	8f ee       	ldi	r24, 0xEF	; 239
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	0e 94 ae 12 	call	0x255c	; 0x255c <ADC_Get_Result>
	}
	if(Flag==2)
    403a:	80 91 ee 01 	lds	r24, 0x01EE
    403e:	82 30       	cpi	r24, 0x02	; 2
    4040:	21 f4       	brne	.+8      	; 0x404a <ADC_InterruptFunction+0x28>
	{
		ADC_Get_Result(&LDR_Value);
    4042:	81 ef       	ldi	r24, 0xF1	; 241
    4044:	91 e0       	ldi	r25, 0x01	; 1
    4046:	0e 94 ae 12 	call	0x255c	; 0x255c <ADC_Get_Result>
	}
}
    404a:	cf 91       	pop	r28
    404c:	df 91       	pop	r29
    404e:	08 95       	ret

00004050 <INT0_InterruptFunction>:
void INT0_InterruptFunction(void)
{
    4050:	df 93       	push	r29
    4052:	cf 93       	push	r28
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
    4058:	ad 97       	sbiw	r28, 0x2d	; 45
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	f8 94       	cli
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	cd bf       	out	0x3d, r28	; 61
	LCD_4Bits_VoidClearDisplay();
    4064:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
	u8 count=0;
    4068:	1d a6       	std	Y+45, r1	; 0x2d
	u16 Password=Enter_Password();
    406a:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <Enter_Password>
    406e:	9c a7       	std	Y+44, r25	; 0x2c
    4070:	8b a7       	std	Y+43, r24	; 0x2b
    4072:	13 c1       	rjmp	.+550    	; 0x429a <INT0_InterruptFunction+0x24a>
	while(count<3)
	{
		if(Password==1111)
    4074:	8b a5       	ldd	r24, Y+43	; 0x2b
    4076:	9c a5       	ldd	r25, Y+44	; 0x2c
    4078:	24 e0       	ldi	r18, 0x04	; 4
    407a:	87 35       	cpi	r24, 0x57	; 87
    407c:	92 07       	cpc	r25, r18
    407e:	09 f0       	breq	.+2      	; 0x4082 <INT0_InterruptFunction+0x32>
    4080:	ff c0       	rjmp	.+510    	; 0x4280 <INT0_InterruptFunction+0x230>
		{
			LCD_4Bits_VoidClearDisplay();
    4082:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
			Servo_u8DoorState(open);
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	0e 94 62 13 	call	0x26c4	; 0x26c4 <Servo_u8DoorState>
			LCD_4Bits_SetPosition(0,0);
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	0e 94 2e 1b 	call	0x365c	; 0x365c <LCD_4Bits_SetPosition>
			LCD_4Bits_DisplayString("The Door is open>>>>");
    4094:	88 e8       	ldi	r24, 0x88	; 136
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	a6 e9       	ldi	r26, 0x96	; 150
    40a2:	b3 e4       	ldi	r27, 0x43	; 67
    40a4:	8f a3       	std	Y+39, r24	; 0x27
    40a6:	98 a7       	std	Y+40, r25	; 0x28
    40a8:	a9 a7       	std	Y+41, r26	; 0x29
    40aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ac:	6f a1       	ldd	r22, Y+39	; 0x27
    40ae:	78 a5       	ldd	r23, Y+40	; 0x28
    40b0:	89 a5       	ldd	r24, Y+41	; 0x29
    40b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	4a ef       	ldi	r20, 0xFA	; 250
    40ba:	54 e4       	ldi	r21, 0x44	; 68
    40bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	8b a3       	std	Y+35, r24	; 0x23
    40c6:	9c a3       	std	Y+36, r25	; 0x24
    40c8:	ad a3       	std	Y+37, r26	; 0x25
    40ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40cc:	6b a1       	ldd	r22, Y+35	; 0x23
    40ce:	7c a1       	ldd	r23, Y+36	; 0x24
    40d0:	8d a1       	ldd	r24, Y+37	; 0x25
    40d2:	9e a1       	ldd	r25, Y+38	; 0x26
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e8       	ldi	r20, 0x80	; 128
    40da:	5f e3       	ldi	r21, 0x3F	; 63
    40dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40e0:	88 23       	and	r24, r24
    40e2:	2c f4       	brge	.+10     	; 0x40ee <INT0_InterruptFunction+0x9e>
		__ticks = 1;
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	9a a3       	std	Y+34, r25	; 0x22
    40ea:	89 a3       	std	Y+33, r24	; 0x21
    40ec:	3f c0       	rjmp	.+126    	; 0x416c <INT0_InterruptFunction+0x11c>
	else if (__tmp > 65535)
    40ee:	6b a1       	ldd	r22, Y+35	; 0x23
    40f0:	7c a1       	ldd	r23, Y+36	; 0x24
    40f2:	8d a1       	ldd	r24, Y+37	; 0x25
    40f4:	9e a1       	ldd	r25, Y+38	; 0x26
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	3f ef       	ldi	r19, 0xFF	; 255
    40fa:	4f e7       	ldi	r20, 0x7F	; 127
    40fc:	57 e4       	ldi	r21, 0x47	; 71
    40fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4102:	18 16       	cp	r1, r24
    4104:	4c f5       	brge	.+82     	; 0x4158 <INT0_InterruptFunction+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4106:	6f a1       	ldd	r22, Y+39	; 0x27
    4108:	78 a5       	ldd	r23, Y+40	; 0x28
    410a:	89 a5       	ldd	r24, Y+41	; 0x29
    410c:	9a a5       	ldd	r25, Y+42	; 0x2a
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e2       	ldi	r20, 0x20	; 32
    4114:	51 e4       	ldi	r21, 0x41	; 65
    4116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	bc 01       	movw	r22, r24
    4120:	cd 01       	movw	r24, r26
    4122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	9a a3       	std	Y+34, r25	; 0x22
    412c:	89 a3       	std	Y+33, r24	; 0x21
    412e:	0f c0       	rjmp	.+30     	; 0x414e <INT0_InterruptFunction+0xfe>
    4130:	88 ec       	ldi	r24, 0xC8	; 200
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	98 a3       	std	Y+32, r25	; 0x20
    4136:	8f 8f       	std	Y+31, r24	; 0x1f
    4138:	8f 8d       	ldd	r24, Y+31	; 0x1f
    413a:	98 a1       	ldd	r25, Y+32	; 0x20
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	f1 f7       	brne	.-4      	; 0x413c <INT0_InterruptFunction+0xec>
    4140:	98 a3       	std	Y+32, r25	; 0x20
    4142:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4144:	89 a1       	ldd	r24, Y+33	; 0x21
    4146:	9a a1       	ldd	r25, Y+34	; 0x22
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	9a a3       	std	Y+34, r25	; 0x22
    414c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414e:	89 a1       	ldd	r24, Y+33	; 0x21
    4150:	9a a1       	ldd	r25, Y+34	; 0x22
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	69 f7       	brne	.-38     	; 0x4130 <INT0_InterruptFunction+0xe0>
    4156:	14 c0       	rjmp	.+40     	; 0x4180 <INT0_InterruptFunction+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4158:	6b a1       	ldd	r22, Y+35	; 0x23
    415a:	7c a1       	ldd	r23, Y+36	; 0x24
    415c:	8d a1       	ldd	r24, Y+37	; 0x25
    415e:	9e a1       	ldd	r25, Y+38	; 0x26
    4160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	9a a3       	std	Y+34, r25	; 0x22
    416a:	89 a3       	std	Y+33, r24	; 0x21
    416c:	89 a1       	ldd	r24, Y+33	; 0x21
    416e:	9a a1       	ldd	r25, Y+34	; 0x22
    4170:	9e 8f       	std	Y+30, r25	; 0x1e
    4172:	8d 8f       	std	Y+29, r24	; 0x1d
    4174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	f1 f7       	brne	.-4      	; 0x4178 <INT0_InterruptFunction+0x128>
    417c:	9e 8f       	std	Y+30, r25	; 0x1e
    417e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			LCD_4Bits_VoidClearDisplay();
    4180:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
			Servo_u8DoorState(close);
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	0e 94 62 13 	call	0x26c4	; 0x26c4 <Servo_u8DoorState>
			LCD_4Bits_SetPosition(0,0);
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	0e 94 2e 1b 	call	0x365c	; 0x365c <LCD_4Bits_SetPosition>
			LCD_4Bits_DisplayString("The Door is Close<<<<<");
    4192:	8d e9       	ldi	r24, 0x9D	; 157
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	a6 e9       	ldi	r26, 0x96	; 150
    41a0:	b3 e4       	ldi	r27, 0x43	; 67
    41a2:	89 8f       	std	Y+25, r24	; 0x19
    41a4:	9a 8f       	std	Y+26, r25	; 0x1a
    41a6:	ab 8f       	std	Y+27, r26	; 0x1b
    41a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41aa:	69 8d       	ldd	r22, Y+25	; 0x19
    41ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	4a ef       	ldi	r20, 0xFA	; 250
    41b8:	54 e4       	ldi	r21, 0x44	; 68
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	8d 8b       	std	Y+21, r24	; 0x15
    41c4:	9e 8b       	std	Y+22, r25	; 0x16
    41c6:	af 8b       	std	Y+23, r26	; 0x17
    41c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41ca:	6d 89       	ldd	r22, Y+21	; 0x15
    41cc:	7e 89       	ldd	r23, Y+22	; 0x16
    41ce:	8f 89       	ldd	r24, Y+23	; 0x17
    41d0:	98 8d       	ldd	r25, Y+24	; 0x18
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e8       	ldi	r20, 0x80	; 128
    41d8:	5f e3       	ldi	r21, 0x3F	; 63
    41da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41de:	88 23       	and	r24, r24
    41e0:	2c f4       	brge	.+10     	; 0x41ec <INT0_InterruptFunction+0x19c>
		__ticks = 1;
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	9c 8b       	std	Y+20, r25	; 0x14
    41e8:	8b 8b       	std	Y+19, r24	; 0x13
    41ea:	3f c0       	rjmp	.+126    	; 0x426a <INT0_InterruptFunction+0x21a>
	else if (__tmp > 65535)
    41ec:	6d 89       	ldd	r22, Y+21	; 0x15
    41ee:	7e 89       	ldd	r23, Y+22	; 0x16
    41f0:	8f 89       	ldd	r24, Y+23	; 0x17
    41f2:	98 8d       	ldd	r25, Y+24	; 0x18
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	3f ef       	ldi	r19, 0xFF	; 255
    41f8:	4f e7       	ldi	r20, 0x7F	; 127
    41fa:	57 e4       	ldi	r21, 0x47	; 71
    41fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4200:	18 16       	cp	r1, r24
    4202:	4c f5       	brge	.+82     	; 0x4256 <INT0_InterruptFunction+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4204:	69 8d       	ldd	r22, Y+25	; 0x19
    4206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    420a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	40 e2       	ldi	r20, 0x20	; 32
    4212:	51 e4       	ldi	r21, 0x41	; 65
    4214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	bc 01       	movw	r22, r24
    421e:	cd 01       	movw	r24, r26
    4220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	9c 8b       	std	Y+20, r25	; 0x14
    422a:	8b 8b       	std	Y+19, r24	; 0x13
    422c:	0f c0       	rjmp	.+30     	; 0x424c <INT0_InterruptFunction+0x1fc>
    422e:	88 ec       	ldi	r24, 0xC8	; 200
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	9a 8b       	std	Y+18, r25	; 0x12
    4234:	89 8b       	std	Y+17, r24	; 0x11
    4236:	89 89       	ldd	r24, Y+17	; 0x11
    4238:	9a 89       	ldd	r25, Y+18	; 0x12
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	f1 f7       	brne	.-4      	; 0x423a <INT0_InterruptFunction+0x1ea>
    423e:	9a 8b       	std	Y+18, r25	; 0x12
    4240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4242:	8b 89       	ldd	r24, Y+19	; 0x13
    4244:	9c 89       	ldd	r25, Y+20	; 0x14
    4246:	01 97       	sbiw	r24, 0x01	; 1
    4248:	9c 8b       	std	Y+20, r25	; 0x14
    424a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424c:	8b 89       	ldd	r24, Y+19	; 0x13
    424e:	9c 89       	ldd	r25, Y+20	; 0x14
    4250:	00 97       	sbiw	r24, 0x00	; 0
    4252:	69 f7       	brne	.-38     	; 0x422e <INT0_InterruptFunction+0x1de>
    4254:	26 c0       	rjmp	.+76     	; 0x42a2 <INT0_InterruptFunction+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4256:	6d 89       	ldd	r22, Y+21	; 0x15
    4258:	7e 89       	ldd	r23, Y+22	; 0x16
    425a:	8f 89       	ldd	r24, Y+23	; 0x17
    425c:	98 8d       	ldd	r25, Y+24	; 0x18
    425e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	9c 8b       	std	Y+20, r25	; 0x14
    4268:	8b 8b       	std	Y+19, r24	; 0x13
    426a:	8b 89       	ldd	r24, Y+19	; 0x13
    426c:	9c 89       	ldd	r25, Y+20	; 0x14
    426e:	98 8b       	std	Y+16, r25	; 0x10
    4270:	8f 87       	std	Y+15, r24	; 0x0f
    4272:	8f 85       	ldd	r24, Y+15	; 0x0f
    4274:	98 89       	ldd	r25, Y+16	; 0x10
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	f1 f7       	brne	.-4      	; 0x4276 <INT0_InterruptFunction+0x226>
    427a:	98 8b       	std	Y+16, r25	; 0x10
    427c:	8f 87       	std	Y+15, r24	; 0x0f
    427e:	11 c0       	rjmp	.+34     	; 0x42a2 <INT0_InterruptFunction+0x252>
			_delay_ms(300);
			break;
		}
		if(Password!=1111)
    4280:	8b a5       	ldd	r24, Y+43	; 0x2b
    4282:	9c a5       	ldd	r25, Y+44	; 0x2c
    4284:	24 e0       	ldi	r18, 0x04	; 4
    4286:	87 35       	cpi	r24, 0x57	; 87
    4288:	92 07       	cpc	r25, r18
    428a:	39 f0       	breq	.+14     	; 0x429a <INT0_InterruptFunction+0x24a>
		{
			Password=Enter_Password();
    428c:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <Enter_Password>
    4290:	9c a7       	std	Y+44, r25	; 0x2c
    4292:	8b a7       	std	Y+43, r24	; 0x2b
			count++;
    4294:	8d a5       	ldd	r24, Y+45	; 0x2d
    4296:	8f 5f       	subi	r24, 0xFF	; 255
    4298:	8d a7       	std	Y+45, r24	; 0x2d
void INT0_InterruptFunction(void)
{
	LCD_4Bits_VoidClearDisplay();
	u8 count=0;
	u16 Password=Enter_Password();
	while(count<3)
    429a:	8d a5       	ldd	r24, Y+45	; 0x2d
    429c:	83 30       	cpi	r24, 0x03	; 3
    429e:	08 f4       	brcc	.+2      	; 0x42a2 <INT0_InterruptFunction+0x252>
    42a0:	e9 ce       	rjmp	.-558    	; 0x4074 <INT0_InterruptFunction+0x24>
			count++;
		}


	}
	if(count==3)
    42a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    42a4:	83 30       	cpi	r24, 0x03	; 3
    42a6:	09 f0       	breq	.+2      	; 0x42aa <INT0_InterruptFunction+0x25a>
    42a8:	82 c0       	rjmp	.+260    	; 0x43ae <INT0_InterruptFunction+0x35e>
	{
		LCD_4Bits_VoidClearDisplay();
    42aa:	0e 94 ad 19 	call	0x335a	; 0x335a <LCD_4Bits_VoidClearDisplay>
		LCD_4Bits_SetPosition(0,0);
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	0e 94 2e 1b 	call	0x365c	; 0x365c <LCD_4Bits_SetPosition>
		LCD_4Bits_DisplayString("YOU CAN'T ENTERED");
    42b6:	84 eb       	ldi	r24, 0xB4	; 180
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 4a 1a 	call	0x3494	; 0x3494 <LCD_4Bits_DisplayString>
		Buzzer_On_Off(ON);
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <Buzzer_On_Off>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	a6 e9       	ldi	r26, 0x96	; 150
    42ca:	b3 e4       	ldi	r27, 0x43	; 67
    42cc:	8b 87       	std	Y+11, r24	; 0x0b
    42ce:	9c 87       	std	Y+12, r25	; 0x0c
    42d0:	ad 87       	std	Y+13, r26	; 0x0d
    42d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42da:	9e 85       	ldd	r25, Y+14	; 0x0e
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a ef       	ldi	r20, 0xFA	; 250
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	8f 83       	std	Y+7, r24	; 0x07
    42ee:	98 87       	std	Y+8, r25	; 0x08
    42f0:	a9 87       	std	Y+9, r26	; 0x09
    42f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42f4:	6f 81       	ldd	r22, Y+7	; 0x07
    42f6:	78 85       	ldd	r23, Y+8	; 0x08
    42f8:	89 85       	ldd	r24, Y+9	; 0x09
    42fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <INT0_InterruptFunction+0x2c6>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9e 83       	std	Y+6, r25	; 0x06
    4312:	8d 83       	std	Y+5, r24	; 0x05
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <INT0_InterruptFunction+0x344>
	else if (__tmp > 65535)
    4316:	6f 81       	ldd	r22, Y+7	; 0x07
    4318:	78 85       	ldd	r23, Y+8	; 0x08
    431a:	89 85       	ldd	r24, Y+9	; 0x09
    431c:	9a 85       	ldd	r25, Y+10	; 0x0a
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <INT0_InterruptFunction+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4330:	7c 85       	ldd	r23, Y+12	; 0x0c
    4332:	8d 85       	ldd	r24, Y+13	; 0x0d
    4334:	9e 85       	ldd	r25, Y+14	; 0x0e
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9e 83       	std	Y+6, r25	; 0x06
    4354:	8d 83       	std	Y+5, r24	; 0x05
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <INT0_InterruptFunction+0x326>
    4358:	88 ec       	ldi	r24, 0xC8	; 200
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	9c 83       	std	Y+4, r25	; 0x04
    435e:	8b 83       	std	Y+3, r24	; 0x03
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	9c 81       	ldd	r25, Y+4	; 0x04
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <INT0_InterruptFunction+0x314>
    4368:	9c 83       	std	Y+4, r25	; 0x04
    436a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	9e 83       	std	Y+6, r25	; 0x06
    4374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	9e 81       	ldd	r25, Y+6	; 0x06
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <INT0_InterruptFunction+0x308>
    437e:	14 c0       	rjmp	.+40     	; 0x43a8 <INT0_InterruptFunction+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	6f 81       	ldd	r22, Y+7	; 0x07
    4382:	78 85       	ldd	r23, Y+8	; 0x08
    4384:	89 85       	ldd	r24, Y+9	; 0x09
    4386:	9a 85       	ldd	r25, Y+10	; 0x0a
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9e 83       	std	Y+6, r25	; 0x06
    4392:	8d 83       	std	Y+5, r24	; 0x05
    4394:	8d 81       	ldd	r24, Y+5	; 0x05
    4396:	9e 81       	ldd	r25, Y+6	; 0x06
    4398:	9a 83       	std	Y+2, r25	; 0x02
    439a:	89 83       	std	Y+1, r24	; 0x01
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	9a 81       	ldd	r25, Y+2	; 0x02
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <INT0_InterruptFunction+0x350>
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		Buzzer_On_Off(OFF);
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <Buzzer_On_Off>
	}

}
    43ae:	ad 96       	adiw	r28, 0x2d	; 45
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	f8 94       	cli
    43b4:	de bf       	out	0x3e, r29	; 62
    43b6:	0f be       	out	0x3f, r0	; 63
    43b8:	cd bf       	out	0x3d, r28	; 61
    43ba:	cf 91       	pop	r28
    43bc:	df 91       	pop	r29
    43be:	08 95       	ret

000043c0 <Enter_Password>:
u16 Enter_Password(void)
{
    43c0:	df 93       	push	r29
    43c2:	cf 93       	push	r28
    43c4:	00 d0       	rcall	.+0      	; 0x43c6 <Enter_Password+0x6>
    43c6:	0f 92       	push	r0
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
	u16 Pass=0;
    43cc:	1b 82       	std	Y+3, r1	; 0x03
    43ce:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter=0;
    43d0:	19 82       	std	Y+1, r1	; 0x01
    43d2:	2b c0       	rjmp	.+86     	; 0x442a <Enter_Password+0x6a>
	while(counter<4)
	{
		Keypad_out=0;
    43d4:	10 92 ce 01 	sts	0x01CE, r1
		Keypad_out=KEYPAD_GET_PressedKey();
    43d8:	0e 94 c4 1b 	call	0x3788	; 0x3788 <KEYPAD_GET_PressedKey>
    43dc:	80 93 ce 01 	sts	0x01CE, r24
		if(Keypad_out!=0)
    43e0:	80 91 ce 01 	lds	r24, 0x01CE
    43e4:	88 23       	and	r24, r24
    43e6:	09 f1       	breq	.+66     	; 0x442a <Enter_Password+0x6a>
		{
			LCD_4Bits_VidWriteNumber(Keypad_out);
    43e8:	80 91 ce 01 	lds	r24, 0x01CE
    43ec:	88 2f       	mov	r24, r24
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	a0 e0       	ldi	r26, 0x00	; 0
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	bc 01       	movw	r22, r24
    43f6:	cd 01       	movw	r24, r26
    43f8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_4Bits_VidWriteNumber>
			Pass=Pass*10+Keypad_out;
    43fc:	8a 81       	ldd	r24, Y+2	; 0x02
    43fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4400:	9c 01       	movw	r18, r24
    4402:	22 0f       	add	r18, r18
    4404:	33 1f       	adc	r19, r19
    4406:	c9 01       	movw	r24, r18
    4408:	88 0f       	add	r24, r24
    440a:	99 1f       	adc	r25, r25
    440c:	88 0f       	add	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	28 0f       	add	r18, r24
    4412:	39 1f       	adc	r19, r25
    4414:	80 91 ce 01 	lds	r24, 0x01CE
    4418:	88 2f       	mov	r24, r24
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	82 0f       	add	r24, r18
    441e:	93 1f       	adc	r25, r19
    4420:	9b 83       	std	Y+3, r25	; 0x03
    4422:	8a 83       	std	Y+2, r24	; 0x02
			counter++;
    4424:	89 81       	ldd	r24, Y+1	; 0x01
    4426:	8f 5f       	subi	r24, 0xFF	; 255
    4428:	89 83       	std	Y+1, r24	; 0x01
}
u16 Enter_Password(void)
{
	u16 Pass=0;
	u8 counter=0;
	while(counter<4)
    442a:	89 81       	ldd	r24, Y+1	; 0x01
    442c:	84 30       	cpi	r24, 0x04	; 4
    442e:	90 f2       	brcs	.-92     	; 0x43d4 <Enter_Password+0x14>
			Pass=Pass*10+Keypad_out;
			counter++;
		}

	}
return Pass;
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	cf 91       	pop	r28
    443c:	df 91       	pop	r29
    443e:	08 95       	ret

00004440 <__mulsi3>:
    4440:	62 9f       	mul	r22, r18
    4442:	d0 01       	movw	r26, r0
    4444:	73 9f       	mul	r23, r19
    4446:	f0 01       	movw	r30, r0
    4448:	82 9f       	mul	r24, r18
    444a:	e0 0d       	add	r30, r0
    444c:	f1 1d       	adc	r31, r1
    444e:	64 9f       	mul	r22, r20
    4450:	e0 0d       	add	r30, r0
    4452:	f1 1d       	adc	r31, r1
    4454:	92 9f       	mul	r25, r18
    4456:	f0 0d       	add	r31, r0
    4458:	83 9f       	mul	r24, r19
    445a:	f0 0d       	add	r31, r0
    445c:	74 9f       	mul	r23, r20
    445e:	f0 0d       	add	r31, r0
    4460:	65 9f       	mul	r22, r21
    4462:	f0 0d       	add	r31, r0
    4464:	99 27       	eor	r25, r25
    4466:	72 9f       	mul	r23, r18
    4468:	b0 0d       	add	r27, r0
    446a:	e1 1d       	adc	r30, r1
    446c:	f9 1f       	adc	r31, r25
    446e:	63 9f       	mul	r22, r19
    4470:	b0 0d       	add	r27, r0
    4472:	e1 1d       	adc	r30, r1
    4474:	f9 1f       	adc	r31, r25
    4476:	bd 01       	movw	r22, r26
    4478:	cf 01       	movw	r24, r30
    447a:	11 24       	eor	r1, r1
    447c:	08 95       	ret

0000447e <__udivmodhi4>:
    447e:	aa 1b       	sub	r26, r26
    4480:	bb 1b       	sub	r27, r27
    4482:	51 e1       	ldi	r21, 0x11	; 17
    4484:	07 c0       	rjmp	.+14     	; 0x4494 <__udivmodhi4_ep>

00004486 <__udivmodhi4_loop>:
    4486:	aa 1f       	adc	r26, r26
    4488:	bb 1f       	adc	r27, r27
    448a:	a6 17       	cp	r26, r22
    448c:	b7 07       	cpc	r27, r23
    448e:	10 f0       	brcs	.+4      	; 0x4494 <__udivmodhi4_ep>
    4490:	a6 1b       	sub	r26, r22
    4492:	b7 0b       	sbc	r27, r23

00004494 <__udivmodhi4_ep>:
    4494:	88 1f       	adc	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	5a 95       	dec	r21
    449a:	a9 f7       	brne	.-22     	; 0x4486 <__udivmodhi4_loop>
    449c:	80 95       	com	r24
    449e:	90 95       	com	r25
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	08 95       	ret

000044a6 <__udivmodsi4>:
    44a6:	a1 e2       	ldi	r26, 0x21	; 33
    44a8:	1a 2e       	mov	r1, r26
    44aa:	aa 1b       	sub	r26, r26
    44ac:	bb 1b       	sub	r27, r27
    44ae:	fd 01       	movw	r30, r26
    44b0:	0d c0       	rjmp	.+26     	; 0x44cc <__udivmodsi4_ep>

000044b2 <__udivmodsi4_loop>:
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	ee 1f       	adc	r30, r30
    44b8:	ff 1f       	adc	r31, r31
    44ba:	a2 17       	cp	r26, r18
    44bc:	b3 07       	cpc	r27, r19
    44be:	e4 07       	cpc	r30, r20
    44c0:	f5 07       	cpc	r31, r21
    44c2:	20 f0       	brcs	.+8      	; 0x44cc <__udivmodsi4_ep>
    44c4:	a2 1b       	sub	r26, r18
    44c6:	b3 0b       	sbc	r27, r19
    44c8:	e4 0b       	sbc	r30, r20
    44ca:	f5 0b       	sbc	r31, r21

000044cc <__udivmodsi4_ep>:
    44cc:	66 1f       	adc	r22, r22
    44ce:	77 1f       	adc	r23, r23
    44d0:	88 1f       	adc	r24, r24
    44d2:	99 1f       	adc	r25, r25
    44d4:	1a 94       	dec	r1
    44d6:	69 f7       	brne	.-38     	; 0x44b2 <__udivmodsi4_loop>
    44d8:	60 95       	com	r22
    44da:	70 95       	com	r23
    44dc:	80 95       	com	r24
    44de:	90 95       	com	r25
    44e0:	9b 01       	movw	r18, r22
    44e2:	ac 01       	movw	r20, r24
    44e4:	bd 01       	movw	r22, r26
    44e6:	cf 01       	movw	r24, r30
    44e8:	08 95       	ret

000044ea <__prologue_saves__>:
    44ea:	2f 92       	push	r2
    44ec:	3f 92       	push	r3
    44ee:	4f 92       	push	r4
    44f0:	5f 92       	push	r5
    44f2:	6f 92       	push	r6
    44f4:	7f 92       	push	r7
    44f6:	8f 92       	push	r8
    44f8:	9f 92       	push	r9
    44fa:	af 92       	push	r10
    44fc:	bf 92       	push	r11
    44fe:	cf 92       	push	r12
    4500:	df 92       	push	r13
    4502:	ef 92       	push	r14
    4504:	ff 92       	push	r15
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
    450a:	cf 93       	push	r28
    450c:	df 93       	push	r29
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62
    4512:	ca 1b       	sub	r28, r26
    4514:	db 0b       	sbc	r29, r27
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	09 94       	ijmp

00004522 <__epilogue_restores__>:
    4522:	2a 88       	ldd	r2, Y+18	; 0x12
    4524:	39 88       	ldd	r3, Y+17	; 0x11
    4526:	48 88       	ldd	r4, Y+16	; 0x10
    4528:	5f 84       	ldd	r5, Y+15	; 0x0f
    452a:	6e 84       	ldd	r6, Y+14	; 0x0e
    452c:	7d 84       	ldd	r7, Y+13	; 0x0d
    452e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4530:	9b 84       	ldd	r9, Y+11	; 0x0b
    4532:	aa 84       	ldd	r10, Y+10	; 0x0a
    4534:	b9 84       	ldd	r11, Y+9	; 0x09
    4536:	c8 84       	ldd	r12, Y+8	; 0x08
    4538:	df 80       	ldd	r13, Y+7	; 0x07
    453a:	ee 80       	ldd	r14, Y+6	; 0x06
    453c:	fd 80       	ldd	r15, Y+5	; 0x05
    453e:	0c 81       	ldd	r16, Y+4	; 0x04
    4540:	1b 81       	ldd	r17, Y+3	; 0x03
    4542:	aa 81       	ldd	r26, Y+2	; 0x02
    4544:	b9 81       	ldd	r27, Y+1	; 0x01
    4546:	ce 0f       	add	r28, r30
    4548:	d1 1d       	adc	r29, r1
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	ed 01       	movw	r28, r26
    4556:	08 95       	ret

00004558 <_exit>:
    4558:	f8 94       	cli

0000455a <__stop_program>:
    455a:	ff cf       	rjmp	.-2      	; 0x455a <__stop_program>
