
READ_PWM_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003234  000032c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080018a  0080018a  000033f2  2**0
                  ALLOC
  3 .stab         00002a24  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121a  00000000  00000000  00005e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007032  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000071d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000073c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000097cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ab55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bd2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000beec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <__vector_1>
       8:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_2>
       c:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_3>
      10:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_4>
      14:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_7>
      20:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_8>
      24:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_9>
      28:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_10>
      2c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <main>
      8a:	0c 94 18 19 	jmp	0x3230	; 0x3230 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 05 19 	jmp	0x320a	; 0x320a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 05 19 	jmp	0x320a	; 0x320a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T2)(void)=NULL;
static void (*GPFunc_T1)(void)=NULL;


void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER0_OV_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 8b 01 	sts	0x018B, r25
     e44:	80 93 8a 01 	sts	0x018A, r24
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <TIMER0_CM_SetCallBack+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	90 93 8b 01 	sts	0x018B, r25
     e68:	80 93 8a 01 	sts	0x018A, r24
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <TIMER1_OV_SetCallBack+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	90 93 8f 01 	sts	0x018F, r25
     e8c:	80 93 8e 01 	sts	0x018E, r24
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <TIMER1_CM_A_SetCallBack+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 8f 01 	sts	0x018F, r25
     eb0:	80 93 8e 01 	sts	0x018E, r24
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <TIMER1_CM_B_SetCallBack+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 8f 01 	sts	0x018F, r25
     ed4:	80 93 8e 01 	sts	0x018E, r24
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <TIMER2_OV_SetCallBack+0x6>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	90 93 8d 01 	sts	0x018D, r25
     ef8:	80 93 8c 01 	sts	0x018C, r24
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <TIMER2_CM_SetCallBack+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	90 93 8d 01 	sts	0x018D, r25
     f1c:	80 93 8c 01 	sts	0x018C, r24
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     f54:	80 91 8a 01 	lds	r24, 0x018A
     f58:	90 91 8b 01 	lds	r25, 0x018B
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	29 f0       	breq	.+10     	; 0xf6a <__vector_11+0x40>
	{
		GPFunc_T0();
     f60:	e0 91 8a 01 	lds	r30, 0x018A
     f64:	f0 91 8b 01 	lds	r31, 0x018B
     f68:	09 95       	icall
	}
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_10>:
ISR_TMR0_Comp()
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     fba:	80 91 8a 01 	lds	r24, 0x018A
     fbe:	90 91 8b 01 	lds	r25, 0x018B
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <__vector_10+0x40>
	{
		GPFunc_T0();
     fc6:	e0 91 8a 01 	lds	r30, 0x018A
     fca:	f0 91 8b 01 	lds	r31, 0x018B
     fce:	09 95       	icall
	}
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1020:	80 91 8e 01 	lds	r24, 0x018E
    1024:	90 91 8f 01 	lds	r25, 0x018F
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_9+0x40>
		{
			GPFunc_T1();
    102c:	e0 91 8e 01 	lds	r30, 0x018E
    1030:	f0 91 8f 01 	lds	r31, 0x018F
    1034:	09 95       	icall
		}
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_7>:
ISR_TMR1_CompA()
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1086:	80 91 8e 01 	lds	r24, 0x018E
    108a:	90 91 8f 01 	lds	r25, 0x018F
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	29 f0       	breq	.+10     	; 0x109c <__vector_7+0x40>
		{
			GPFunc_T1();
    1092:	e0 91 8e 01 	lds	r30, 0x018E
    1096:	f0 91 8f 01 	lds	r31, 0x018F
    109a:	09 95       	icall
		}
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <__vector_8>:
ISR_TMR1_CompB()
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    10ec:	80 91 8e 01 	lds	r24, 0x018E
    10f0:	90 91 8f 01 	lds	r25, 0x018F
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	29 f0       	breq	.+10     	; 0x1102 <__vector_8+0x40>
		{
			GPFunc_T1();
    10f8:	e0 91 8e 01 	lds	r30, 0x018E
    10fc:	f0 91 8f 01 	lds	r31, 0x018F
    1100:	09 95       	icall
		}
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1152:	80 91 8c 01 	lds	r24, 0x018C
    1156:	90 91 8d 01 	lds	r25, 0x018D
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	29 f0       	breq	.+10     	; 0x1168 <__vector_5+0x40>
	{
		GPFunc_T2();
    115e:	e0 91 8c 01 	lds	r30, 0x018C
    1162:	f0 91 8d 01 	lds	r31, 0x018D
    1166:	09 95       	icall
	}
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_4>:
ISR_TMR2_Comp()
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    11b8:	80 91 8c 01 	lds	r24, 0x018C
    11bc:	90 91 8d 01 	lds	r25, 0x018D
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	29 f0       	breq	.+10     	; 0x11ce <__vector_4+0x40>
	{
		GPFunc_T2();
    11c4:	e0 91 8c 01 	lds	r30, 0x018C
    11c8:	f0 91 8d 01 	lds	r31, 0x018D
    11cc:	09 95       	icall
	}
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	8c 93       	st	X, r24
    120a:	a3 e5       	ldi	r26, 0x53	; 83
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    1218:	a3 e5       	ldi	r26, 0x53	; 83
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e3 e5       	ldi	r30, 0x53	; 83
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 62       	ori	r24, 0x20	; 32
    1224:	8c 93       	st	X, r24
    1226:	a3 e5       	ldi	r26, 0x53	; 83
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e3 e5       	ldi	r30, 0x53	; 83
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 7e       	andi	r24, 0xEF	; 239
    1232:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    1234:	a3 e5       	ldi	r26, 0x53	; 83
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e3 e5       	ldi	r30, 0x53	; 83
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	8c 93       	st	X, r24
    1242:	a3 e5       	ldi	r26, 0x53	; 83
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e3 e5       	ldi	r30, 0x53	; 83
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	8c 93       	st	X, r24
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=625;		// For 50 Hz for servo motor
    126c:	e6 e4       	ldi	r30, 0x46	; 70
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	81 e7       	ldi	r24, 0x71	; 113
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
	prescaler_clk_256_1;
    1278:	ae e4       	ldi	r26, 0x4E	; 78
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ee e4       	ldi	r30, 0x4E	; 78
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	8c 93       	st	X, r24
    1286:	ae e4       	ldi	r26, 0x4E	; 78
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ee e4       	ldi	r30, 0x4E	; 78
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	8c 93       	st	X, r24
    1294:	ae e4       	ldi	r26, 0x4E	; 78
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ee e4       	ldi	r30, 0x4E	; 78
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8e 7f       	andi	r24, 0xFE	; 254
    12a0:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    12a2:	af e4       	ldi	r26, 0x4F	; 79
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ef e4       	ldi	r30, 0x4F	; 79
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	8c 93       	st	X, r24
    12b0:	af e4       	ldi	r26, 0x4F	; 79
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e4       	ldi	r30, 0x4F	; 79
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8c 93       	st	X, r24
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	8c 93       	st	X, r24
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 61       	ori	r24, 0x10	; 16
    12d8:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    12da:	af e4       	ldi	r26, 0x4F	; 79
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ef e4       	ldi	r30, 0x4F	; 79
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	8c 93       	st	X, r24
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 7e       	andi	r24, 0xEF	; 239
    1302:	8c 93       	st	X, r24
    1304:	af e4       	ldi	r26, 0x4F	; 79
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e4       	ldi	r30, 0x4F	; 79
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 62       	ori	r24, 0x20	; 32
    1310:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
#if Timer2_Mode==Normal_Timer2_Mode
	TCNT2=0;                              //YOU SHOULD CHANGE THIS BIT
    1320:	e4 e4       	ldi	r30, 0x44	; 68
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	10 82       	st	Z, r1
	Normal_2;
    1326:	a5 e4       	ldi	r26, 0x45	; 69
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e4       	ldi	r30, 0x45	; 69
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	87 7f       	andi	r24, 0xF7	; 247
    1332:	8c 93       	st	X, r24
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	8c 93       	st	X, r24
	No_prescaling_2;
    1342:	a5 e4       	ldi	r26, 0x45	; 69
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e4       	ldi	r30, 0x45	; 69
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	8c 93       	st	X, r24
    1350:	a5 e4       	ldi	r26, 0x45	; 69
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e4       	ldi	r30, 0x45	; 69
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8d 7f       	andi	r24, 0xFD	; 253
    135c:	8c 93       	st	X, r24
    135e:	a5 e4       	ldi	r26, 0x45	; 69
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e4       	ldi	r30, 0x45	; 69
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	8c 93       	st	X, r24
	Non_PWM_Normal_OC0_disconnected_2;
    136c:	a5 e4       	ldi	r26, 0x45	; 69
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e5 e4       	ldi	r30, 0x45	; 69
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	8c 93       	st	X, r24
    137a:	a5 e4       	ldi	r26, 0x45	; 69
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e4       	ldi	r30, 0x45	; 69
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8f 7e       	andi	r24, 0xEF	; 239
    1386:	8c 93       	st	X, r24
	Overflow_Interrupt_Enable_2;
    1388:	a9 e5       	ldi	r26, 0x59	; 89
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e9 e5       	ldi	r30, 0x59	; 89
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 77       	andi	r24, 0x7F	; 127
    1394:	8c 93       	st	X, r24
    1396:	a9 e5       	ldi	r26, 0x59	; 89
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e9 e5       	ldi	r30, 0x59	; 89
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    13b2:	a9 e5       	ldi	r26, 0x59	; 89
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e9 e5       	ldi	r30, 0x59	; 89
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 62       	ori	r24, 0x20	; 32
    13be:	8c 93       	st	X, r24
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Set_Duty_Cycle_TIMER_0+0xa>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <Set_Duty_Cycle_TIMER_0+0xc>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	69 83       	std	Y+1, r22	; 0x01
    13d8:	7a 83       	std	Y+2, r23	; 0x02
    13da:	8b 83       	std	Y+3, r24	; 0x03
    13dc:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    13de:	69 81       	ldd	r22, Y+1	; 0x01
    13e0:	7a 81       	ldd	r23, Y+2	; 0x02
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	48 ec       	ldi	r20, 0xC8	; 200
    13ec:	52 e4       	ldi	r21, 0x42	; 66
    13ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	ab 83       	std	Y+3, r26	; 0x03
    13fc:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    13fe:	0c e5       	ldi	r16, 0x5C	; 92
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	7a 81       	ldd	r23, Y+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	53 e4       	ldi	r21, 0x43	; 67
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	80 83       	st	Z, r24

}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <Set_Duty_Cycle_TIMER_1_A+0xa>
    145a:	00 d0       	rcall	.+0      	; 0x145c <Set_Duty_Cycle_TIMER_1_A+0xc>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	69 83       	std	Y+1, r22	; 0x01
    1462:	7a 83       	std	Y+2, r23	; 0x02
    1464:	8b 83       	std	Y+3, r24	; 0x03
    1466:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1468:	69 81       	ldd	r22, Y+1	; 0x01
    146a:	7a 81       	ldd	r23, Y+2	; 0x02
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	48 ec       	ldi	r20, 0xC8	; 200
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	ab 83       	std	Y+3, r26	; 0x03
    1486:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    1488:	0a e4       	ldi	r16, 0x4A	; 74
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	e6 e4       	ldi	r30, 0x46	; 70
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	cc 01       	movw	r24, r24
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	29 81       	ldd	r18, Y+1	; 0x01
    14ac:	3a 81       	ldd	r19, Y+2	; 0x02
    14ae:	4b 81       	ldd	r20, Y+3	; 0x03
    14b0:	5c 81       	ldd	r21, Y+4	; 0x04
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	f8 01       	movw	r30, r16
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <Set_Duty_Cycle_TIMER_1_B+0xa>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <Set_Duty_Cycle_TIMER_1_B+0xc>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	69 83       	std	Y+1, r22	; 0x01
    1504:	7a 83       	std	Y+2, r23	; 0x02
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    150a:	69 81       	ldd	r22, Y+1	; 0x01
    150c:	7a 81       	ldd	r23, Y+2	; 0x02
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	48 ec       	ldi	r20, 0xC8	; 200
    1518:	52 e4       	ldi	r21, 0x42	; 66
    151a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	ab 83       	std	Y+3, r26	; 0x03
    1528:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    152a:	08 e4       	ldi	r16, 0x48	; 72
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	e6 e4       	ldi	r30, 0x46	; 70
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	cc 01       	movw	r24, r24
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	3a 81       	ldd	r19, Y+2	; 0x02
    1550:	4b 81       	ldd	r20, Y+3	; 0x03
    1552:	5c 81       	ldd	r21, Y+4	; 0x04
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	f8 01       	movw	r30, r16
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <Set_Duty_Cycle_TIMER_2+0xa>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <Set_Duty_Cycle_TIMER_2+0xc>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	69 83       	std	Y+1, r22	; 0x01
    15a6:	7a 83       	std	Y+2, r23	; 0x02
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    15ac:	69 81       	ldd	r22, Y+1	; 0x01
    15ae:	7a 81       	ldd	r23, Y+2	; 0x02
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	48 ec       	ldi	r20, 0xC8	; 200
    15ba:	52 e4       	ldi	r21, 0x42	; 66
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	ab 83       	std	Y+3, r26	; 0x03
    15ca:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    15cc:	03 e4       	ldi	r16, 0x43	; 67
    15ce:	10 e0       	ldi	r17, 0x00	; 0
    15d0:	69 81       	ldd	r22, Y+1	; 0x01
    15d2:	7a 81       	ldd	r23, Y+2	; 0x02
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	53 e4       	ldi	r21, 0x43	; 67
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	80 83       	st	Z, r24

}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <Set_Get_TCNT_2>:
u8 Set_Get_TCNT_2(void)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	0f 92       	push	r0
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	u8 value_TCNT2=TCNT2;
    1628:	e4 e4       	ldi	r30, 0x44	; 68
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=0;
    1630:	e4 e4       	ldi	r30, 0x44	; 68
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	10 82       	st	Z, r1
	return value_TCNT2;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1648:	af e5       	ldi	r26, 0x5F	; 95
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ef e5       	ldi	r30, 0x5F	; 95
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	8c 93       	st	X, r24
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    1664:	af e5       	ldi	r26, 0x5F	; 95
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ef e5       	ldi	r30, 0x5F	; 95
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 77       	andi	r24, 0x7F	; 127
    1670:	8c 93       	st	X, r24
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <INT0_SetCallBack+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	90 93 91 01 	sts	0x0191, r25
    168e:	80 93 90 01 	sts	0x0190, r24
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <INT1_SetCallBack+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	90 93 93 01 	sts	0x0193, r25
    16b2:	80 93 92 01 	sts	0x0192, r24
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <INT2_SetCallBack+0x6>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	90 93 95 01 	sts	0x0195, r25
    16d6:	80 93 94 01 	sts	0x0194, r24
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <__vector_1>:
ISR(__vector_1)
{
    16e4:	1f 92       	push	r1
    16e6:	0f 92       	push	r0
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	0f 92       	push	r0
    16ec:	11 24       	eor	r1, r1
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    170e:	80 91 90 01 	lds	r24, 0x0190
    1712:	90 91 91 01 	lds	r25, 0x0191
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	29 f0       	breq	.+10     	; 0x1724 <__vector_1+0x40>
	{
		GPFunc0();
    171a:	e0 91 90 01 	lds	r30, 0x0190
    171e:	f0 91 91 01 	lds	r31, 0x0191
    1722:	09 95       	icall
	}
}
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	7f 91       	pop	r23
    1736:	6f 91       	pop	r22
    1738:	5f 91       	pop	r21
    173a:	4f 91       	pop	r20
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_2>:
ISR(__vector_2)
{
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    1774:	80 91 92 01 	lds	r24, 0x0192
    1778:	90 91 93 01 	lds	r25, 0x0193
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	29 f0       	breq	.+10     	; 0x178a <__vector_2+0x40>
	{
		GPFunc1();
    1780:	e0 91 92 01 	lds	r30, 0x0192
    1784:	f0 91 93 01 	lds	r31, 0x0193
    1788:	09 95       	icall
	}
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	ff 91       	pop	r31
    1790:	ef 91       	pop	r30
    1792:	bf 91       	pop	r27
    1794:	af 91       	pop	r26
    1796:	9f 91       	pop	r25
    1798:	8f 91       	pop	r24
    179a:	7f 91       	pop	r23
    179c:	6f 91       	pop	r22
    179e:	5f 91       	pop	r21
    17a0:	4f 91       	pop	r20
    17a2:	3f 91       	pop	r19
    17a4:	2f 91       	pop	r18
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__vector_3>:
ISR(__vector_3)
{
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    17da:	80 91 94 01 	lds	r24, 0x0194
    17de:	90 91 95 01 	lds	r25, 0x0195
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	29 f0       	breq	.+10     	; 0x17f0 <__vector_3+0x40>
	{
		GPFunc2();
    17e6:	e0 91 94 01 	lds	r30, 0x0194
    17ea:	f0 91 95 01 	lds	r31, 0x0195
    17ee:	09 95       	icall
	}
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	ff 91       	pop	r31
    17f6:	ef 91       	pop	r30
    17f8:	bf 91       	pop	r27
    17fa:	af 91       	pop	r26
    17fc:	9f 91       	pop	r25
    17fe:	8f 91       	pop	r24
    1800:	7f 91       	pop	r23
    1802:	6f 91       	pop	r22
    1804:	5f 91       	pop	r21
    1806:	4f 91       	pop	r20
    1808:	3f 91       	pop	r19
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <EX_INT0_INIT_Test>:
void EX_INT0_INIT_Test(u8 Choose_adge)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	89 83       	std	Y+1, r24	; 0x01
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1822:	ab e5       	ldi	r26, 0x5B	; 91
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	eb e5       	ldi	r30, 0x5B	; 91
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 64       	ori	r24, 0x40	; 64
    182e:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	if   (Choose_adge==Falling_Adge)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	88 23       	and	r24, r24
    1834:	79 f4       	brne	.+30     	; 0x1854 <EX_INT0_INIT_Test+0x3e>
	{
		CLR_BIT(MCUCR ,ISC00);
    1836:	a5 e5       	ldi	r26, 0x55	; 85
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e5       	ldi	r30, 0x55	; 85
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8e 7f       	andi	r24, 0xFE	; 254
    1842:	8c 93       	st	X, r24
		SET_BIT(MCUCR ,ISC01);
    1844:	a5 e5       	ldi	r26, 0x55	; 85
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e5 e5       	ldi	r30, 0x55	; 85
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	82 60       	ori	r24, 0x02	; 2
    1850:	8c 93       	st	X, r24
    1852:	35 c0       	rjmp	.+106    	; 0x18be <EX_INT0_INIT_Test+0xa8>
	}

	else if (Choose_adge==Rising_Adge)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	79 f4       	brne	.+30     	; 0x1878 <EX_INT0_INIT_Test+0x62>
	{
		SET_BIT(MCUCR ,ISC00);
    185a:	a5 e5       	ldi	r26, 0x55	; 85
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e5       	ldi	r30, 0x55	; 85
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	8c 93       	st	X, r24
		SET_BIT(MCUCR ,ISC01);
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	82 60       	ori	r24, 0x02	; 2
    1874:	8c 93       	st	X, r24
    1876:	23 c0       	rjmp	.+70     	; 0x18be <EX_INT0_INIT_Test+0xa8>
	}

	else if (Choose_adge==Low_Level)
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	79 f4       	brne	.+30     	; 0x189c <EX_INT0_INIT_Test+0x86>
	{
		CLR_BIT(MCUCR ,ISC00);
    187e:	a5 e5       	ldi	r26, 0x55	; 85
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e5 e5       	ldi	r30, 0x55	; 85
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8e 7f       	andi	r24, 0xFE	; 254
    188a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR ,ISC01);
    188c:	a5 e5       	ldi	r26, 0x55	; 85
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e5       	ldi	r30, 0x55	; 85
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	8c 93       	st	X, r24
    189a:	11 c0       	rjmp	.+34     	; 0x18be <EX_INT0_INIT_Test+0xa8>
	}

	else if (Choose_adge==Any_Change)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	71 f4       	brne	.+28     	; 0x18be <EX_INT0_INIT_Test+0xa8>
	{
		SET_BIT(MCUCR ,ISC00);
    18a2:	a5 e5       	ldi	r26, 0x55	; 85
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e5       	ldi	r30, 0x55	; 85
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	81 60       	ori	r24, 0x01	; 1
    18ae:	8c 93       	st	X, r24
		CLR_BIT(MCUCR ,ISC01);
    18b0:	a5 e5       	ldi	r26, 0x55	; 85
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e5       	ldi	r30, 0x55	; 85
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8d 7f       	andi	r24, 0xFD	; 253
    18bc:	8c 93       	st	X, r24
	}


}
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <EX_INT0_INIT>:

void EX_INT0_INIT(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	81 60       	ori	r24, 0x01	; 1
    18e8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    18ea:	a5 e5       	ldi	r26, 0x55	; 85
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e5       	ldi	r30, 0x55	; 85
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8d 7f       	andi	r24, 0xFD	; 253
    18f6:	8c 93       	st	X, r24
	#endif
}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1906:	ab e5       	ldi	r26, 0x5B	; 91
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e5       	ldi	r30, 0x5B	; 91
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 68       	ori	r24, 0x80	; 128
    1912:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1914:	a5 e5       	ldi	r26, 0x55	; 85
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e5 e5       	ldi	r30, 0x55	; 85
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8b 7f       	andi	r24, 0xFB	; 251
    1920:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    1922:	a5 e5       	ldi	r26, 0x55	; 85
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e5       	ldi	r30, 0x55	; 85
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 60       	ori	r24, 0x08	; 8
    192e:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    193e:	ab e5       	ldi	r26, 0x5B	; 91
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	eb e5       	ldi	r30, 0x5B	; 91
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 62       	ori	r24, 0x20	; 32
    194a:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    194c:	a4 e5       	ldi	r26, 0x54	; 84
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e4 e5       	ldi	r30, 0x54	; 84
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8f 7b       	andi	r24, 0xBF	; 191
    1958:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	27 97       	sbiw	r28, 0x07	; 7
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	6a 83       	std	Y+2, r22	; 0x02
    1978:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	09 f0       	breq	.+2      	; 0x1982 <DIO_VidSetPinDirection+0x22>
    1980:	6f c0       	rjmp	.+222    	; 0x1a60 <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3f 83       	std	Y+7, r19	; 0x07
    198a:	2e 83       	std	Y+6, r18	; 0x06
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	9f 81       	ldd	r25, Y+7	; 0x07
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	49 f1       	breq	.+82     	; 0x19e8 <DIO_VidSetPinDirection+0x88>
    1996:	2e 81       	ldd	r18, Y+6	; 0x06
    1998:	3f 81       	ldd	r19, Y+7	; 0x07
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	2c f4       	brge	.+10     	; 0x19aa <DIO_VidSetPinDirection+0x4a>
    19a0:	8e 81       	ldd	r24, Y+6	; 0x06
    19a2:	9f 81       	ldd	r25, Y+7	; 0x07
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <DIO_VidSetPinDirection+0x60>
    19a8:	d2 c0       	rjmp	.+420    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
    19aa:	2e 81       	ldd	r18, Y+6	; 0x06
    19ac:	3f 81       	ldd	r19, Y+7	; 0x07
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	71 f1       	breq	.+92     	; 0x1a10 <DIO_VidSetPinDirection+0xb0>
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	e9 f1       	breq	.+122    	; 0x1a38 <DIO_VidSetPinDirection+0xd8>
    19be:	c7 c0       	rjmp	.+398    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    19c0:	aa e3       	ldi	r26, 0x3A	; 58
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ea e3       	ldi	r30, 0x3A	; 58
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_VidSetPinDirection+0x7e>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_VidSetPinDirection+0x7a>
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	b3 c0       	rjmp	.+358    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    19e8:	a7 e3       	ldi	r26, 0x37	; 55
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e7 e3       	ldi	r30, 0x37	; 55
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_VidSetPinDirection+0xa6>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_VidSetPinDirection+0xa2>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	9f c0       	rjmp	.+318    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    1a10:	a4 e3       	ldi	r26, 0x34	; 52
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e4 e3       	ldi	r30, 0x34	; 52
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_VidSetPinDirection+0xce>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_VidSetPinDirection+0xca>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	8b c0       	rjmp	.+278    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1a38:	a1 e3       	ldi	r26, 0x31	; 49
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e1 e3       	ldi	r30, 0x31	; 49
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_VidSetPinDirection+0xf6>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_VidSetPinDirection+0xf2>
    1a5a:	84 2b       	or	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	77 c0       	rjmp	.+238    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	88 23       	and	r24, r24
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <DIO_VidSetPinDirection+0x108>
    1a66:	73 c0       	rjmp	.+230    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3d 83       	std	Y+5, r19	; 0x05
    1a70:	2c 83       	std	Y+4, r18	; 0x04
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9d 81       	ldd	r25, Y+5	; 0x05
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 05       	cpc	r25, r1
    1a7a:	59 f1       	breq	.+86     	; 0x1ad2 <DIO_VidSetPinDirection+0x172>
    1a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a80:	22 30       	cpi	r18, 0x02	; 2
    1a82:	31 05       	cpc	r19, r1
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <DIO_VidSetPinDirection+0x130>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <DIO_VidSetPinDirection+0x148>
    1a8e:	5f c0       	rjmp	.+190    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	89 f1       	breq	.+98     	; 0x1afc <DIO_VidSetPinDirection+0x19c>
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <DIO_VidSetPinDirection+0x146>
    1aa4:	40 c0       	rjmp	.+128    	; 0x1b26 <DIO_VidSetPinDirection+0x1c6>
    1aa6:	53 c0       	rjmp	.+166    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1aa8:	aa e3       	ldi	r26, 0x3A	; 58
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e3       	ldi	r30, 0x3A	; 58
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_VidSetPinDirection+0x166>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_VidSetPinDirection+0x162>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	3e c0       	rjmp	.+124    	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    1ad2:	a7 e3       	ldi	r26, 0x37	; 55
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_VidSetPinDirection+0x190>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_VidSetPinDirection+0x18c>
    1af4:	80 95       	com	r24
    1af6:	84 23       	and	r24, r20
    1af8:	8c 93       	st	X, r24
    1afa:	29 c0       	rjmp	.+82     	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1afc:	a4 e3       	ldi	r26, 0x34	; 52
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e4 e3       	ldi	r30, 0x34	; 52
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_VidSetPinDirection+0x1ba>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_VidSetPinDirection+0x1b6>
    1b1e:	80 95       	com	r24
    1b20:	84 23       	and	r24, r20
    1b22:	8c 93       	st	X, r24
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1b26:	a1 e3       	ldi	r26, 0x31	; 49
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e1 e3       	ldi	r30, 0x31	; 49
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_VidSetPinDirection+0x1e4>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_VidSetPinDirection+0x1e0>
    1b48:	80 95       	com	r24
    1b4a:	84 23       	and	r24, r20
    1b4c:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1b4e:	27 96       	adiw	r28, 0x07	; 7
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	27 97       	sbiw	r28, 0x07	; 7
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	6a 83       	std	Y+2, r22	; 0x02
    1b78:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <DIO_VidSetPinValue+0x22>
    1b80:	6f c0       	rjmp	.+222    	; 0x1c60 <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3f 83       	std	Y+7, r19	; 0x07
    1b8a:	2e 83       	std	Y+6, r18	; 0x06
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	91 05       	cpc	r25, r1
    1b94:	49 f1       	breq	.+82     	; 0x1be8 <DIO_VidSetPinValue+0x88>
    1b96:	2e 81       	ldd	r18, Y+6	; 0x06
    1b98:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <DIO_VidSetPinValue+0x4a>
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <DIO_VidSetPinValue+0x60>
    1ba8:	d2 c0       	rjmp	.+420    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
    1baa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bac:	3f 81       	ldd	r19, Y+7	; 0x07
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	71 f1       	breq	.+92     	; 0x1c10 <DIO_VidSetPinValue+0xb0>
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	e9 f1       	breq	.+122    	; 0x1c38 <DIO_VidSetPinValue+0xd8>
    1bbe:	c7 c0       	rjmp	.+398    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1bc0:	ab e3       	ldi	r26, 0x3B	; 59
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	eb e3       	ldi	r30, 0x3B	; 59
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_VidSetPinValue+0x7e>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_VidSetPinValue+0x7a>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	b3 c0       	rjmp	.+358    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1be8:	a8 e3       	ldi	r26, 0x38	; 56
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e8 e3       	ldi	r30, 0x38	; 56
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_VidSetPinValue+0xa6>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_VidSetPinValue+0xa2>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	9f c0       	rjmp	.+318    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    1c10:	a5 e3       	ldi	r26, 0x35	; 53
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e5 e3       	ldi	r30, 0x35	; 53
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_VidSetPinValue+0xce>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_VidSetPinValue+0xca>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	8b c0       	rjmp	.+278    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1c38:	a2 e3       	ldi	r26, 0x32	; 50
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e2 e3       	ldi	r30, 0x32	; 50
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_VidSetPinValue+0xf6>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_VidSetPinValue+0xf2>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	77 c0       	rjmp	.+238    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	88 23       	and	r24, r24
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <DIO_VidSetPinValue+0x108>
    1c66:	73 c0       	rjmp	.+230    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3d 83       	std	Y+5, r19	; 0x05
    1c70:	2c 83       	std	Y+4, r18	; 0x04
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	59 f1       	breq	.+86     	; 0x1cd2 <DIO_VidSetPinValue+0x172>
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <DIO_VidSetPinValue+0x130>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f0       	breq	.+26     	; 0x1ca8 <DIO_VidSetPinValue+0x148>
    1c8e:	5f c0       	rjmp	.+190    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	89 f1       	breq	.+98     	; 0x1cfc <DIO_VidSetPinValue+0x19c>
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <DIO_VidSetPinValue+0x146>
    1ca4:	40 c0       	rjmp	.+128    	; 0x1d26 <DIO_VidSetPinValue+0x1c6>
    1ca6:	53 c0       	rjmp	.+166    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1ca8:	ab e3       	ldi	r26, 0x3B	; 59
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e3       	ldi	r30, 0x3B	; 59
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_VidSetPinValue+0x166>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_VidSetPinValue+0x162>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	3e c0       	rjmp	.+124    	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    1cd2:	a8 e3       	ldi	r26, 0x38	; 56
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e8 e3       	ldi	r30, 0x38	; 56
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_VidSetPinValue+0x190>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_VidSetPinValue+0x18c>
    1cf4:	80 95       	com	r24
    1cf6:	84 23       	and	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	29 c0       	rjmp	.+82     	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1cfc:	a5 e3       	ldi	r26, 0x35	; 53
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e5 e3       	ldi	r30, 0x35	; 53
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_VidSetPinValue+0x1ba>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_VidSetPinValue+0x1b6>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1d26:	a2 e3       	ldi	r26, 0x32	; 50
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e2 e3       	ldi	r30, 0x32	; 50
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_VidSetPinValue+0x1e4>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_VidSetPinValue+0x1e0>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1d4e:	27 96       	adiw	r28, 0x07	; 7
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <DIO_VidSetPortDirection+0x6>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <DIO_VidSetPortDirection+0x8>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3c 83       	std	Y+4, r19	; 0x04
    1d78:	2b 83       	std	Y+3, r18	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	d1 f0       	breq	.+52     	; 0x1db8 <DIO_VidSetPortDirection+0x58>
    1d84:	2b 81       	ldd	r18, Y+3	; 0x03
    1d86:	3c 81       	ldd	r19, Y+4	; 0x04
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <DIO_VidSetPortDirection+0x38>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <DIO_VidSetPortDirection+0x4e>
    1d96:	1e c0       	rjmp	.+60     	; 0x1dd4 <DIO_VidSetPortDirection+0x74>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	81 f0       	breq	.+32     	; 0x1dc2 <DIO_VidSetPortDirection+0x62>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	81 f0       	breq	.+32     	; 0x1dcc <DIO_VidSetPortDirection+0x6c>
    1dac:	13 c0       	rjmp	.+38     	; 0x1dd4 <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1dae:	ea e3       	ldi	r30, 0x3A	; 58
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	80 83       	st	Z, r24
    1db6:	0e c0       	rjmp	.+28     	; 0x1dd4 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    1db8:	e7 e3       	ldi	r30, 0x37	; 55
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	80 83       	st	Z, r24
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    1dc2:	e4 e3       	ldi	r30, 0x34	; 52
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	80 83       	st	Z, r24
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    1dcc:	e1 e3       	ldi	r30, 0x31	; 49
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	80 83       	st	Z, r24
	}	
	
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <DIO_VidSetPortValue+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DIO_VidSetPortValue+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3c 83       	std	Y+4, r19	; 0x04
    1dfa:	2b 83       	std	Y+3, r18	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	d1 f0       	breq	.+52     	; 0x1e3a <DIO_VidSetPortValue+0x58>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <DIO_VidSetPortValue+0x38>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_VidSetPortValue+0x4e>
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <DIO_VidSetPortValue+0x74>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	81 f0       	breq	.+32     	; 0x1e44 <DIO_VidSetPortValue+0x62>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	81 f0       	breq	.+32     	; 0x1e4e <DIO_VidSetPortValue+0x6c>
    1e2e:	13 c0       	rjmp	.+38     	; 0x1e56 <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    1e3a:	e8 e3       	ldi	r30, 0x38	; 56
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	80 83       	st	Z, r24
	}	
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_u8GetPinValue+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_u8GetPinValue+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    1e76:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	3d 83       	std	Y+5, r19	; 0x05
    1e80:	2c 83       	std	Y+4, r18	; 0x04
    1e82:	4c 81       	ldd	r20, Y+4	; 0x04
    1e84:	5d 81       	ldd	r21, Y+5	; 0x05
    1e86:	41 30       	cpi	r20, 0x01	; 1
    1e88:	51 05       	cpc	r21, r1
    1e8a:	41 f1       	breq	.+80     	; 0x1edc <DIO_u8GetPinValue+0x78>
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	91 05       	cpc	r25, r1
    1e94:	34 f4       	brge	.+12     	; 0x1ea2 <DIO_u8GetPinValue+0x3e>
    1e96:	2c 81       	ldd	r18, Y+4	; 0x04
    1e98:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9a:	21 15       	cp	r18, r1
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	61 f0       	breq	.+24     	; 0x1eb8 <DIO_u8GetPinValue+0x54>
    1ea0:	52 c0       	rjmp	.+164    	; 0x1f46 <DIO_u8GetPinValue+0xe2>
    1ea2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ea6:	42 30       	cpi	r20, 0x02	; 2
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	51 f1       	breq	.+84     	; 0x1f00 <DIO_u8GetPinValue+0x9c>
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	b9 f1       	breq	.+110    	; 0x1f24 <DIO_u8GetPinValue+0xc0>
    1eb6:	47 c0       	rjmp	.+142    	; 0x1f46 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    1eb8:	e9 e3       	ldi	r30, 0x39	; 57
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8GetPinValue+0x6c>
    1ecc:	55 95       	asr	r21
    1ece:	47 95       	ror	r20
    1ed0:	8a 95       	dec	r24
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8GetPinValue+0x68>
    1ed4:	ca 01       	movw	r24, r20
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	35 c0       	rjmp	.+106    	; 0x1f46 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    1edc:	e6 e3       	ldi	r30, 0x36	; 54
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a9 01       	movw	r20, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_u8GetPinValue+0x90>
    1ef0:	55 95       	asr	r21
    1ef2:	47 95       	ror	r20
    1ef4:	8a 95       	dec	r24
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_u8GetPinValue+0x8c>
    1ef8:	ca 01       	movw	r24, r20
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	23 c0       	rjmp	.+70     	; 0x1f46 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    1f00:	e3 e3       	ldi	r30, 0x33	; 51
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a9 01       	movw	r20, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_u8GetPinValue+0xb4>
    1f14:	55 95       	asr	r21
    1f16:	47 95       	ror	r20
    1f18:	8a 95       	dec	r24
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_u8GetPinValue+0xb0>
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    1f24:	e0 e3       	ldi	r30, 0x30	; 48
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_u8GetPinValue+0xd8>
    1f38:	55 95       	asr	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_u8GetPinValue+0xd4>
    1f40:	ca 01       	movw	r24, r20
    1f42:	81 70       	andi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <DIO_u8TogglePinValue+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <DIO_u8TogglePinValue+0x8>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	3c 83       	std	Y+4, r19	; 0x04
    1f70:	2b 83       	std	Y+3, r18	; 0x03
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	49 f1       	breq	.+82     	; 0x1fce <DIO_u8TogglePinValue+0x76>
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <DIO_u8TogglePinValue+0x38>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <DIO_u8TogglePinValue+0x4e>
    1f8e:	5a c0       	rjmp	.+180    	; 0x2044 <DIO_u8TogglePinValue+0xec>
    1f90:	2b 81       	ldd	r18, Y+3	; 0x03
    1f92:	3c 81       	ldd	r19, Y+4	; 0x04
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	71 f1       	breq	.+92     	; 0x1ff6 <DIO_u8TogglePinValue+0x9e>
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	e9 f1       	breq	.+122    	; 0x201e <DIO_u8TogglePinValue+0xc6>
    1fa4:	4f c0       	rjmp	.+158    	; 0x2044 <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    1fa6:	ab e3       	ldi	r26, 0x3B	; 59
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	eb e3       	ldi	r30, 0x3B	; 59
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 2e       	mov	r0, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_u8TogglePinValue+0x6c>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_u8TogglePinValue+0x68>
    1fc8:	84 27       	eor	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	3b c0       	rjmp	.+118    	; 0x2044 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    1fce:	a8 e3       	ldi	r26, 0x38	; 56
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e8 e3       	ldi	r30, 0x38	; 56
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 2e       	mov	r0, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <DIO_u8TogglePinValue+0x94>
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	0a 94       	dec	r0
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <DIO_u8TogglePinValue+0x90>
    1ff0:	84 27       	eor	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	27 c0       	rjmp	.+78     	; 0x2044 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    1ff6:	a5 e3       	ldi	r26, 0x35	; 53
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e5 e3       	ldi	r30, 0x35	; 53
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <DIO_u8TogglePinValue+0xbc>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <DIO_u8TogglePinValue+0xb8>
    2018:	84 27       	eor	r24, r20
    201a:	8c 93       	st	X, r24
    201c:	13 c0       	rjmp	.+38     	; 0x2044 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    201e:	a2 e3       	ldi	r26, 0x32	; 50
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_u8TogglePinValue+0xe4>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_u8TogglePinValue+0xe0>
    2040:	84 27       	eor	r24, r20
    2042:	8c 93       	st	X, r24
	}
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <ADC_SetCallBack+0x6>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	90 93 97 01 	sts	0x0197, r25
    2068:	80 93 96 01 	sts	0x0196, r24
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	2f 93       	push	r18
    2082:	3f 93       	push	r19
    2084:	4f 93       	push	r20
    2086:	5f 93       	push	r21
    2088:	6f 93       	push	r22
    208a:	7f 93       	push	r23
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	af 93       	push	r26
    2092:	bf 93       	push	r27
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    20a0:	80 91 96 01 	lds	r24, 0x0196
    20a4:	90 91 97 01 	lds	r25, 0x0197
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <__vector_16+0x40>
	{
		GPFunc();
    20ac:	e0 91 96 01 	lds	r30, 0x0196
    20b0:	f0 91 97 01 	lds	r31, 0x0197
    20b4:	09 95       	icall
	}
}
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	ff 91       	pop	r31
    20bc:	ef 91       	pop	r30
    20be:	bf 91       	pop	r27
    20c0:	af 91       	pop	r26
    20c2:	9f 91       	pop	r25
    20c4:	8f 91       	pop	r24
    20c6:	7f 91       	pop	r23
    20c8:	6f 91       	pop	r22
    20ca:	5f 91       	pop	r21
    20cc:	4f 91       	pop	r20
    20ce:	3f 91       	pop	r19
    20d0:	2f 91       	pop	r18
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    20e4:	a7 e2       	ldi	r26, 0x27	; 39
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e7 e2       	ldi	r30, 0x27	; 39
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 64       	ori	r24, 0x40	; 64
    20f0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    20f2:	a7 e2       	ldi	r26, 0x27	; 39
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e7 e2       	ldi	r30, 0x27	; 39
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 77       	andi	r24, 0x7F	; 127
    20fe:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    2100:	a6 e2       	ldi	r26, 0x26	; 38
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e2       	ldi	r30, 0x26	; 38
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8e 7f       	andi	r24, 0xFE	; 254
    210c:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    210e:	a6 e2       	ldi	r26, 0x26	; 38
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e6 e2       	ldi	r30, 0x26	; 38
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	82 60       	ori	r24, 0x02	; 2
    211a:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    211c:	a6 e2       	ldi	r26, 0x26	; 38
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e6 e2       	ldi	r30, 0x26	; 38
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	84 60       	ori	r24, 0x04	; 4
    2128:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    212a:	a7 e2       	ldi	r26, 0x27	; 39
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e7 e2       	ldi	r30, 0x27	; 39
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8f 7d       	andi	r24, 0xDF	; 223
    2136:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADATE);
		CLR_BIT(SFIOR,ADTS0);
		CLR_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	#elif	ADC_Mode==ADC_External_Interrupt_0_Trigger
		SET_BIT(ADCSRA,ADATE);
    2138:	a6 e2       	ldi	r26, 0x26	; 38
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e6 e2       	ldi	r30, 0x26	; 38
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	80 62       	ori	r24, 0x20	; 32
    2144:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    2146:	a0 e5       	ldi	r26, 0x50	; 80
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e0 e5       	ldi	r30, 0x50	; 80
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8f 7d       	andi	r24, 0xDF	; 223
    2152:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
    2154:	a0 e5       	ldi	r26, 0x50	; 80
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 e5       	ldi	r30, 0x50	; 80
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 64       	ori	r24, 0x40	; 64
    2160:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    2162:	a0 e5       	ldi	r26, 0x50	; 80
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e0 e5       	ldi	r30, 0x50	; 80
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	8c 93       	st	X, r24
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    2170:	a6 e2       	ldi	r26, 0x26	; 38
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e6 e2       	ldi	r30, 0x26	; 38
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	8c 93       	st	X, r24
}
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    218c:	a6 e2       	ldi	r26, 0x26	; 38
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e6 e2       	ldi	r30, 0x26	; 38
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	80 64       	ori	r24, 0x40	; 64
    2198:	8c 93       	st	X, r24
}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    21ac:	a7 e2       	ldi	r26, 0x27	; 39
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e7 e2       	ldi	r30, 0x27	; 39
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 7e       	andi	r24, 0xE0	; 224
    21b8:	8c 93       	st	X, r24
	ADMUX|=Channal;
    21ba:	a7 e2       	ldi	r26, 0x27	; 39
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e7 e2       	ldi	r30, 0x27	; 39
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	90 81       	ld	r25, Z
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	89 2b       	or	r24, r25
    21c8:	8c 93       	st	X, r24
}
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    21da:	a6 e2       	ldi	r26, 0x26	; 38
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e6 e2       	ldi	r30, 0x26	; 38
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	88 60       	ori	r24, 0x08	; 8
    21e6:	8c 93       	st	X, r24
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    21f6:	e6 e2       	ldi	r30, 0x26	; 38
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	82 95       	swap	r24
    21fe:	8f 70       	andi	r24, 0x0F	; 15
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	81 70       	andi	r24, 0x01	; 1
    2206:	90 70       	andi	r25, 0x00	; 0
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	a9 f3       	breq	.-22     	; 0x21f6 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    220c:	a6 e2       	ldi	r26, 0x26	; 38
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e6 e2       	ldi	r30, 0x26	; 38
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 61       	ori	r24, 0x10	; 16
    2218:	8c 93       	st	X, r24
}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <ADC_Get_Result+0x6>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    222e:	e4 e2       	ldi	r30, 0x24	; 36
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	6c 97       	sbiw	r28, 0x1c	; 28
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	62 e0       	ldi	r22, 0x02	; 2
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	89 8f       	std	Y+25, r24	; 0x19
    2270:	9a 8f       	std	Y+26, r25	; 0x1a
    2272:	ab 8f       	std	Y+27, r26	; 0x1b
    2274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	69 8d       	ldd	r22, Y+25	; 0x19
    2278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a ef       	ldi	r20, 0xFA	; 250
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8d 8b       	std	Y+21, r24	; 0x15
    2290:	9e 8b       	std	Y+22, r25	; 0x16
    2292:	af 8b       	std	Y+23, r26	; 0x17
    2294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    22b8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ba:	7e 89       	ldd	r23, Y+22	; 0x16
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	98 8d       	ldd	r25, Y+24	; 0x18
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	69 8d       	ldd	r22, Y+25	; 0x19
    22d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_VidPulseEnable+0xd0>
    22fa:	88 ec       	ldi	r24, 0xC8	; 200
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2302:	89 89       	ldd	r24, Y+17	; 0x11
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_VidPulseEnable+0xbe>
    230a:	9a 8b       	std	Y+18, r25	; 0x12
    230c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_VidPulseEnable+0xb2>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9c 8b       	std	Y+20, r25	; 0x14
    2334:	8b 8b       	std	Y+19, r24	; 0x13
    2336:	8b 89       	ldd	r24, Y+19	; 0x13
    2338:	9c 89       	ldd	r25, Y+20	; 0x14
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
    233e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2340:	98 89       	ldd	r25, Y+16	; 0x10
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_VidPulseEnable+0xfa>
    2346:	98 8b       	std	Y+16, r25	; 0x10
    2348:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	62 e0       	ldi	r22, 0x02	; 2
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	ad 87       	std	Y+13, r26	; 0x0d
    2362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a ef       	ldi	r20, 0xFA	; 250
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8f 83       	std	Y+7, r24	; 0x07
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	a9 87       	std	Y+9, r26	; 0x09
    2382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_VidPulseEnable+0x1be>
    23e8:	88 ec       	ldi	r24, 0xC8	; 200
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_VidPulseEnable+0x1ac>
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_VidPulseEnable+0x1a0>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_VidPulseEnable+0x1e8>
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2438:	6c 96       	adiw	r28, 0x1c	; 28
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_VidInit>:
void LCD_VidInit(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	e8 97       	sbiw	r28, 0x38	; 56
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a8 e4       	ldi	r26, 0x48	; 72
    2464:	b2 e4       	ldi	r27, 0x42	; 66
    2466:	8d ab       	std	Y+53, r24	; 0x35
    2468:	9e ab       	std	Y+54, r25	; 0x36
    246a:	af ab       	std	Y+55, r26	; 0x37
    246c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6d a9       	ldd	r22, Y+53	; 0x35
    2470:	7e a9       	ldd	r23, Y+54	; 0x36
    2472:	8f a9       	ldd	r24, Y+55	; 0x37
    2474:	98 ad       	ldd	r25, Y+56	; 0x38
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a ef       	ldi	r20, 0xFA	; 250
    247c:	54 e4       	ldi	r21, 0x44	; 68
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	89 ab       	std	Y+49, r24	; 0x31
    2488:	9a ab       	std	Y+50, r25	; 0x32
    248a:	ab ab       	std	Y+51, r26	; 0x33
    248c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    248e:	69 a9       	ldd	r22, Y+49	; 0x31
    2490:	7a a9       	ldd	r23, Y+50	; 0x32
    2492:	8b a9       	ldd	r24, Y+51	; 0x33
    2494:	9c a9       	ldd	r25, Y+52	; 0x34
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <LCD_VidInit+0x66>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    24b0:	69 a9       	ldd	r22, Y+49	; 0x31
    24b2:	7a a9       	ldd	r23, Y+50	; 0x32
    24b4:	8b a9       	ldd	r24, Y+51	; 0x33
    24b6:	9c a9       	ldd	r25, Y+52	; 0x34
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6d a9       	ldd	r22, Y+53	; 0x35
    24ca:	7e a9       	ldd	r23, Y+54	; 0x36
    24cc:	8f a9       	ldd	r24, Y+55	; 0x37
    24ce:	98 ad       	ldd	r25, Y+56	; 0x38
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <LCD_VidInit+0xc6>
    24f2:	88 ec       	ldi	r24, 0xC8	; 200
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e a7       	std	Y+46, r25	; 0x2e
    24f8:	8d a7       	std	Y+45, r24	; 0x2d
    24fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_VidInit+0xb4>
    2502:	9e a7       	std	Y+46, r25	; 0x2e
    2504:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8f a5       	ldd	r24, Y+47	; 0x2f
    2512:	98 a9       	ldd	r25, Y+48	; 0x30
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <LCD_VidInit+0xa8>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	69 a9       	ldd	r22, Y+49	; 0x31
    251c:	7a a9       	ldd	r23, Y+50	; 0x32
    251e:	8b a9       	ldd	r24, Y+51	; 0x33
    2520:	9c a9       	ldd	r25, Y+52	; 0x34
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	98 ab       	std	Y+48, r25	; 0x30
    252c:	8f a7       	std	Y+47, r24	; 0x2f
    252e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2530:	98 a9       	ldd	r25, Y+48	; 0x30
    2532:	9c a7       	std	Y+44, r25	; 0x2c
    2534:	8b a7       	std	Y+43, r24	; 0x2b
    2536:	8b a5       	ldd	r24, Y+43	; 0x2b
    2538:	9c a5       	ldd	r25, Y+44	; 0x2c
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_VidInit+0xf0>
    253e:	9c a7       	std	Y+44, r25	; 0x2c
    2540:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		/* END OF DISPLAY CLEAR */

#elif MODE==8
	  /*set direction*/
		DIO_VidSetPortDirection(LCD_DATA_PORT,0XFF);
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	6f ef       	ldi	r22, 0xFF	; 255
    2546:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <DIO_VidSetPortDirection>
		DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	67 e0       	ldi	r22, 0x07	; 7
    254e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <DIO_VidSetPortDirection>

		LCD_VidWriteCommend(0B00111000);//function set
    2552:	88 e3       	ldi	r24, 0x38	; 56
    2554:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e8       	ldi	r26, 0x80	; 128
    255e:	bf e3       	ldi	r27, 0x3F	; 63
    2560:	8f a3       	std	Y+39, r24	; 0x27
    2562:	98 a7       	std	Y+40, r25	; 0x28
    2564:	a9 a7       	std	Y+41, r26	; 0x29
    2566:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	6f a1       	ldd	r22, Y+39	; 0x27
    256a:	78 a5       	ldd	r23, Y+40	; 0x28
    256c:	89 a5       	ldd	r24, Y+41	; 0x29
    256e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8b a3       	std	Y+35, r24	; 0x23
    2582:	9c a3       	std	Y+36, r25	; 0x24
    2584:	ad a3       	std	Y+37, r26	; 0x25
    2586:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2588:	6b a1       	ldd	r22, Y+35	; 0x23
    258a:	7c a1       	ldd	r23, Y+36	; 0x24
    258c:	8d a1       	ldd	r24, Y+37	; 0x25
    258e:	9e a1       	ldd	r25, Y+38	; 0x26
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <LCD_VidInit+0x160>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9a a3       	std	Y+34, r25	; 0x22
    25a6:	89 a3       	std	Y+33, r24	; 0x21
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <LCD_VidInit+0x1de>
	else if (__tmp > 65535)
    25aa:	6b a1       	ldd	r22, Y+35	; 0x23
    25ac:	7c a1       	ldd	r23, Y+36	; 0x24
    25ae:	8d a1       	ldd	r24, Y+37	; 0x25
    25b0:	9e a1       	ldd	r25, Y+38	; 0x26
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <LCD_VidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	6f a1       	ldd	r22, Y+39	; 0x27
    25c4:	78 a5       	ldd	r23, Y+40	; 0x28
    25c6:	89 a5       	ldd	r24, Y+41	; 0x29
    25c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_VidInit+0x1c0>
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	98 a3       	std	Y+32, r25	; 0x20
    25f2:	8f 8f       	std	Y+31, r24	; 0x1f
    25f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25f6:	98 a1       	ldd	r25, Y+32	; 0x20
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_VidInit+0x1ae>
    25fc:	98 a3       	std	Y+32, r25	; 0x20
    25fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	89 a1       	ldd	r24, Y+33	; 0x21
    2602:	9a a1       	ldd	r25, Y+34	; 0x22
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9a a3       	std	Y+34, r25	; 0x22
    2608:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <LCD_VidInit+0x1a2>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <LCD_VidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6b a1       	ldd	r22, Y+35	; 0x23
    2616:	7c a1       	ldd	r23, Y+36	; 0x24
    2618:	8d a1       	ldd	r24, Y+37	; 0x25
    261a:	9e a1       	ldd	r25, Y+38	; 0x26
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9a a3       	std	Y+34, r25	; 0x22
    2626:	89 a3       	std	Y+33, r24	; 0x21
    2628:	89 a1       	ldd	r24, Y+33	; 0x21
    262a:	9a a1       	ldd	r25, Y+34	; 0x22
    262c:	9e 8f       	std	Y+30, r25	; 0x1e
    262e:	8d 8f       	std	Y+29, r24	; 0x1d
    2630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2632:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_VidInit+0x1ea>
    2638:	9e 8f       	std	Y+30, r25	; 0x1e
    263a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidWriteCommend(0B00001100);//screen on
    263c:	8c e0       	ldi	r24, 0x0C	; 12
    263e:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e8       	ldi	r26, 0x80	; 128
    2648:	bf e3       	ldi	r27, 0x3F	; 63
    264a:	89 8f       	std	Y+25, r24	; 0x19
    264c:	9a 8f       	std	Y+26, r25	; 0x1a
    264e:	ab 8f       	std	Y+27, r26	; 0x1b
    2650:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	69 8d       	ldd	r22, Y+25	; 0x19
    2654:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4a ef       	ldi	r20, 0xFA	; 250
    2660:	54 e4       	ldi	r21, 0x44	; 68
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	8d 8b       	std	Y+21, r24	; 0x15
    266c:	9e 8b       	std	Y+22, r25	; 0x16
    266e:	af 8b       	std	Y+23, r26	; 0x17
    2670:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2672:	6d 89       	ldd	r22, Y+21	; 0x15
    2674:	7e 89       	ldd	r23, Y+22	; 0x16
    2676:	8f 89       	ldd	r24, Y+23	; 0x17
    2678:	98 8d       	ldd	r25, Y+24	; 0x18
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	2c f4       	brge	.+10     	; 0x2694 <LCD_VidInit+0x24a>
		__ticks = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	3f c0       	rjmp	.+126    	; 0x2712 <LCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    2694:	6d 89       	ldd	r22, Y+21	; 0x15
    2696:	7e 89       	ldd	r23, Y+22	; 0x16
    2698:	8f 89       	ldd	r24, Y+23	; 0x17
    269a:	98 8d       	ldd	r25, Y+24	; 0x18
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	4c f5       	brge	.+82     	; 0x26fe <LCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ac:	69 8d       	ldd	r22, Y+25	; 0x19
    26ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	0f c0       	rjmp	.+30     	; 0x26f4 <LCD_VidInit+0x2aa>
    26d6:	88 ec       	ldi	r24, 0xC8	; 200
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9a 8b       	std	Y+18, r25	; 0x12
    26dc:	89 8b       	std	Y+17, r24	; 0x11
    26de:	89 89       	ldd	r24, Y+17	; 0x11
    26e0:	9a 89       	ldd	r25, Y+18	; 0x12
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_VidInit+0x298>
    26e6:	9a 8b       	std	Y+18, r25	; 0x12
    26e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	8b 89       	ldd	r24, Y+19	; 0x13
    26ec:	9c 89       	ldd	r25, Y+20	; 0x14
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	8b 89       	ldd	r24, Y+19	; 0x13
    26f6:	9c 89       	ldd	r25, Y+20	; 0x14
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	69 f7       	brne	.-38     	; 0x26d6 <LCD_VidInit+0x28c>
    26fc:	14 c0       	rjmp	.+40     	; 0x2726 <LCD_VidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2700:	7e 89       	ldd	r23, Y+22	; 0x16
    2702:	8f 89       	ldd	r24, Y+23	; 0x17
    2704:	98 8d       	ldd	r25, Y+24	; 0x18
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9c 8b       	std	Y+20, r25	; 0x14
    2710:	8b 8b       	std	Y+19, r24	; 0x13
    2712:	8b 89       	ldd	r24, Y+19	; 0x13
    2714:	9c 89       	ldd	r25, Y+20	; 0x14
    2716:	98 8b       	std	Y+16, r25	; 0x10
    2718:	8f 87       	std	Y+15, r24	; 0x0f
    271a:	8f 85       	ldd	r24, Y+15	; 0x0f
    271c:	98 89       	ldd	r25, Y+16	; 0x10
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_VidInit+0x2d4>
    2722:	98 8b       	std	Y+16, r25	; 0x10
    2724:	8f 87       	std	Y+15, r24	; 0x0f
	          _delay_ms(1);
		LCD_VidWriteCommend(0B00000001);//clear display
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e0       	ldi	r26, 0x00	; 0
    2732:	b0 e4       	ldi	r27, 0x40	; 64
    2734:	8b 87       	std	Y+11, r24	; 0x0b
    2736:	9c 87       	std	Y+12, r25	; 0x0c
    2738:	ad 87       	std	Y+13, r26	; 0x0d
    273a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	6b 85       	ldd	r22, Y+11	; 0x0b
    273e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2740:	8d 85       	ldd	r24, Y+13	; 0x0d
    2742:	9e 85       	ldd	r25, Y+14	; 0x0e
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8f 83       	std	Y+7, r24	; 0x07
    2756:	98 87       	std	Y+8, r25	; 0x08
    2758:	a9 87       	std	Y+9, r26	; 0x09
    275a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275c:	6f 81       	ldd	r22, Y+7	; 0x07
    275e:	78 85       	ldd	r23, Y+8	; 0x08
    2760:	89 85       	ldd	r24, Y+9	; 0x09
    2762:	9a 85       	ldd	r25, Y+10	; 0x0a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <LCD_VidInit+0x334>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <LCD_VidInit+0x3b2>
	else if (__tmp > 65535)
    277e:	6f 81       	ldd	r22, Y+7	; 0x07
    2780:	78 85       	ldd	r23, Y+8	; 0x08
    2782:	89 85       	ldd	r24, Y+9	; 0x09
    2784:	9a 85       	ldd	r25, Y+10	; 0x0a
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	4c f5       	brge	.+82     	; 0x27e8 <LCD_VidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	6b 85       	ldd	r22, Y+11	; 0x0b
    2798:	7c 85       	ldd	r23, Y+12	; 0x0c
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	9e 85       	ldd	r25, Y+14	; 0x0e
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	0f c0       	rjmp	.+30     	; 0x27de <LCD_VidInit+0x394>
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9c 83       	std	Y+4, r25	; 0x04
    27c6:	8b 83       	std	Y+3, r24	; 0x03
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_VidInit+0x382>
    27d0:	9c 83       	std	Y+4, r25	; 0x04
    27d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <LCD_VidInit+0x376>
    27e6:	14 c0       	rjmp	.+40     	; 0x2810 <LCD_VidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_VidInit+0x3be>
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
	          _delay_ms(2);
		LCD_VidWriteCommend(0B00000110);//Mode Set
    2810:	86 e0       	ldi	r24, 0x06	; 6
    2812:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000010);//Return Home
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2828:	e8 96       	adiw	r28, 0x38	; 56
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	89 83       	std	Y+1, r24	; 0x01
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();	
#elif MODE==8
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN0,0);  //RS=0
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN1,0);  //RW=0
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	61 e0       	ldi	r22, 0x01	; 1
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	69 81       	ldd	r22, Y+1	; 0x01
    285e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DIO_VidSetPortValue>

	LCD_VidPulseEnable();
    2862:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_VidPulseEnable>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	6d 97       	sbiw	r28, 0x1d	; 29
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	8d 8f       	std	Y+29, r24	; 0x1d
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();
#elif MODE==8
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1);  //RS=0
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    289c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	62 e0       	ldi	r22, 0x02	; 2
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e8       	ldi	r26, 0x80	; 128
    28b0:	bf e3       	ldi	r27, 0x3F	; 63
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	ab 8f       	std	Y+27, r26	; 0x1b
    28b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	69 8d       	ldd	r22, Y+25	; 0x19
    28bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a ef       	ldi	r20, 0xFA	; 250
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8d 8b       	std	Y+21, r24	; 0x15
    28d4:	9e 8b       	std	Y+22, r25	; 0x16
    28d6:	af 8b       	std	Y+23, r26	; 0x17
    28d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <LCD_VidWriteData+0x8e>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    28fc:	6d 89       	ldd	r22, Y+21	; 0x15
    28fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2900:	8f 89       	ldd	r24, Y+23	; 0x17
    2902:	98 8d       	ldd	r25, Y+24	; 0x18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	69 8d       	ldd	r22, Y+25	; 0x19
    2916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	0f c0       	rjmp	.+30     	; 0x295c <LCD_VidWriteData+0xee>
    293e:	88 ec       	ldi	r24, 0xC8	; 200
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9a 8b       	std	Y+18, r25	; 0x12
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	9a 89       	ldd	r25, Y+18	; 0x12
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_VidWriteData+0xdc>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <LCD_VidWriteData+0xd0>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	98 8b       	std	Y+16, r25	; 0x10
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	98 89       	ldd	r25, Y+16	; 0x10
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_VidWriteData+0x118>
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	62 e0       	ldi	r22, 0x02	; 2
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e8       	ldi	r26, 0x80	; 128
    299e:	bf e3       	ldi	r27, 0x3F	; 63
    29a0:	8b 87       	std	Y+11, r24	; 0x0b
    29a2:	9c 87       	std	Y+12, r25	; 0x0c
    29a4:	ad 87       	std	Y+13, r26	; 0x0d
    29a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a ef       	ldi	r20, 0xFA	; 250
    29b6:	54 e4       	ldi	r21, 0x44	; 68
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8f 83       	std	Y+7, r24	; 0x07
    29c2:	98 87       	std	Y+8, r25	; 0x08
    29c4:	a9 87       	std	Y+9, r26	; 0x09
    29c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <LCD_VidWriteData+0x17c>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <LCD_VidWriteData+0x1dc>
    2a2c:	88 ec       	ldi	r24, 0xC8	; 200
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_VidWriteData+0x1ca>
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <LCD_VidWriteData+0x1be>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_VidWriteData+0x206>
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2a7c:	6d 96       	adiw	r28, 0x1d	; 29
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_VidWriteString>:


void LCD_VidWriteString(u8 *ptr)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <LCD_VidWriteString+0x6>
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	9b 83       	std	Y+3, r25	; 0x03
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;i<100;i++)
    2a9e:	19 82       	std	Y+1, r1	; 0x01
    2aa0:	19 c0       	rjmp	.+50     	; 0x2ad4 <LCD_VidWriteString+0x46>
	{
		if(ptr[i]=='\0')
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2aac:	fc 01       	movw	r30, r24
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	89 f0       	breq	.+34     	; 0x2ada <LCD_VidWriteString+0x4c>
		    {
		    	break;
		    }
	LCD_VidWriteData(ptr[i]);
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	e2 0f       	add	r30, r18
    2ac6:	f3 1f       	adc	r31, r19
    2ac8:	80 81       	ld	r24, Z
    2aca:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
}


void LCD_VidWriteString(u8 *ptr)
{
	for(u8 i=0;i<100;i++)
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	84 36       	cpi	r24, 0x64	; 100
    2ad8:	20 f3       	brcs	.-56     	; 0x2aa2 <LCD_VidWriteString+0x14>
		    }
	LCD_VidWriteData(ptr[i]);

	}

}
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	2c 97       	sbiw	r28, 0x0c	; 12
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	69 87       	std	Y+9, r22	; 0x09
    2b04:	7a 87       	std	Y+10, r23	; 0x0a
    2b06:	8b 87       	std	Y+11, r24	; 0x0b
    2b08:	9c 87       	std	Y+12, r25	; 0x0c
    2b0a:	1d 82       	std	Y+5, r1	; 0x05
    2b0c:	1e 82       	std	Y+6, r1	; 0x06
    2b0e:	1f 82       	std	Y+7, r1	; 0x07
    2b10:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2b12:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	a1 05       	cpc	r26, r1
    2b20:	b1 05       	cpc	r27, r1
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <LCD_VidWriteNumber+0x40>
    2b24:	46 c0       	rjmp	.+140    	; 0x2bb2 <LCD_VidWriteNumber+0xcc>
{
	LCD_VidWriteData(48);
    2b26:	80 e3       	ldi	r24, 0x30	; 48
    2b28:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
    2b2c:	42 c0       	rjmp	.+132    	; 0x2bb2 <LCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	af 81       	ldd	r26, Y+7	; 0x07
    2b34:	b8 85       	ldd	r27, Y+8	; 0x08
    2b36:	2a e0       	ldi	r18, 0x0A	; 10
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 79 18 	call	0x30f2	; 0x30f2 <__mulsi3>
    2b46:	7b 01       	movw	r14, r22
    2b48:	8c 01       	movw	r16, r24
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b50:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b52:	2a e0       	ldi	r18, 0x0A	; 10
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 ab 18 	call	0x3156	; 0x3156 <__udivmodsi4>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8e 0d       	add	r24, r14
    2b68:	9f 1d       	adc	r25, r15
    2b6a:	a0 1f       	adc	r26, r16
    2b6c:	b1 1f       	adc	r27, r17
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	af 83       	std	Y+7, r26	; 0x07
    2b74:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	af 81       	ldd	r26, Y+7	; 0x07
    2b7c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	a1 05       	cpc	r26, r1
    2b82:	b1 05       	cpc	r27, r1
    2b84:	21 f4       	brne	.+8      	; 0x2b8e <LCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2b86:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b94:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b96:	2a e0       	ldi	r18, 0x0A	; 10
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 ab 18 	call	0x3156	; 0x3156 <__udivmodsi4>
    2ba6:	da 01       	movw	r26, r20
    2ba8:	c9 01       	movw	r24, r18
    2baa:	89 87       	std	Y+9, r24	; 0x09
    2bac:	9a 87       	std	Y+10, r25	; 0x0a
    2bae:	ab 87       	std	Y+11, r26	; 0x0b
    2bb0:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_VidWriteData(48);
}
while(LOC_u32num>0)
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bb8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	a1 05       	cpc	r26, r1
    2bbe:	b1 05       	cpc	r27, r1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <LCD_VidWriteNumber+0xde>
    2bc2:	b5 cf       	rjmp	.-150    	; 0x2b2e <LCD_VidWriteNumber+0x48>
    2bc4:	25 c0       	rjmp	.+74     	; 0x2c10 <LCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bca:	af 81       	ldd	r26, Y+7	; 0x07
    2bcc:	b8 85       	ldd	r27, Y+8	; 0x08
    2bce:	2a e0       	ldi	r18, 0x0A	; 10
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 ab 18 	call	0x3156	; 0x3156 <__udivmodsi4>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(res+48);
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	80 5d       	subi	r24, 0xD0	; 208
    2be8:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
	revrese=revrese/10;
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	af 81       	ldd	r26, Y+7	; 0x07
    2bf2:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf4:	2a e0       	ldi	r18, 0x0A	; 10
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 ab 18 	call	0x3156	; 0x3156 <__udivmodsi4>
    2c04:	da 01       	movw	r26, r20
    2c06:	c9 01       	movw	r24, r18
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	af 83       	std	Y+7, r26	; 0x07
    2c0e:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	af 81       	ldd	r26, Y+7	; 0x07
    2c16:	b8 85       	ldd	r27, Y+8	; 0x08
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	a1 05       	cpc	r26, r1
    2c1c:	b1 05       	cpc	r27, r1
    2c1e:	99 f6       	brne	.-90     	; 0x2bc6 <LCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	88 23       	and	r24, r24
    2c24:	61 f4       	brne	.+24     	; 0x2c3e <LCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2c26:	19 82       	std	Y+1, r1	; 0x01
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <LCD_VidWriteNumber+0x150>
	{
LCD_VidWriteData(48);
    2c2a:	80 e3       	ldi	r24, 0x30	; 48
    2c2c:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	99 81       	ldd	r25, Y+1	; 0x01
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	98 17       	cp	r25, r24
    2c3c:	b0 f3       	brcs	.-20     	; 0x2c2a <LCD_VidWriteNumber+0x144>
	{
LCD_VidWriteData(48);
	}
}
}
    2c3e:	2c 96       	adiw	r28, 0x0c	; 12
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	08 95       	ret

00002c58 <LCD_GoToXY>:

void LCD_GoToXY(u8 row,u8 col)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <LCD_GoToXY+0x6>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	88 23       	and	r24, r24
    2c6a:	29 f4       	brne	.+10     	; 0x2c76 <LCD_GoToXY+0x1e>
	{
		LCD_VidWriteCommend(128+col);
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	80 58       	subi	r24, 0x80	; 128
    2c70:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
    2c74:	07 c0       	rjmp	.+14     	; 0x2c84 <LCD_GoToXY+0x2c>
	}
	else if (row==1)
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	21 f4       	brne	.+8      	; 0x2c84 <LCD_GoToXY+0x2c>
	{
		LCD_VidWriteCommend(192+col);
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	80 54       	subi	r24, 0x40	; 64
    2c80:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
	}
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <LCD_CONSTANT>:

void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
    2c8e:	0f 93       	push	r16
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	27 97       	sbiw	r28, 0x07	; 7
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	9b 83       	std	Y+3, r25	; 0x03
    2ca6:	8a 83       	std	Y+2, r24	; 0x02
    2ca8:	6c 83       	std	Y+4, r22	; 0x04
    2caa:	4d 83       	std	Y+5, r20	; 0x05
    2cac:	2e 83       	std	Y+6, r18	; 0x06
    2cae:	0f 83       	std	Y+7, r16	; 0x07
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	80 5c       	subi	r24, 0xC0	; 192
    2cb4:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
		/*for face*/
for(u8 i=0;i<8;i++)
    2cb8:	19 82       	std	Y+1, r1	; 0x01
    2cba:	0e c0       	rjmp	.+28     	; 0x2cd8 <LCD_CONSTANT+0x4a>
	{
	LCD_VidWriteData(Arr[i]);
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	80 81       	ld	r24, Z
    2cce:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
		/*for face*/
for(u8 i=0;i<8;i++)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	8f 5f       	subi	r24, 0xFF	; 255
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	88 30       	cpi	r24, 0x08	; 8
    2cdc:	78 f3       	brcs	.-34     	; 0x2cbc <LCD_CONSTANT+0x2e>
	{
	LCD_VidWriteData(Arr[i]);
	}

LCD_GoToXY(Row,Col);
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ce2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_GoToXY>
LCD_VidWriteData(Data);
    2ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce8:	0e 94 37 14 	call	0x286e	; 0x286e <LCD_VidWriteData>
}
    2cec:	27 96       	adiw	r28, 0x07	; 7
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <LCD_CLEAR>:
void LCD_CLEAR(u8 Row,u8 start,u8 end)
{
    2d00:	0f 93       	push	r16
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	2b 97       	sbiw	r28, 0x0b	; 11
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	89 87       	std	Y+9, r24	; 0x09
    2d18:	6a 87       	std	Y+10, r22	; 0x0a
    2d1a:	4b 87       	std	Y+11, r20	; 0x0b
	u8 empty[8]={0,0,0,0,0,0,0,0};
    2d1c:	88 e0       	ldi	r24, 0x08	; 8
    2d1e:	fe 01       	movw	r30, r28
    2d20:	31 96       	adiw	r30, 0x01	; 1
    2d22:	df 01       	movw	r26, r30
    2d24:	98 2f       	mov	r25, r24
    2d26:	1d 92       	st	X+, r1
    2d28:	9a 95       	dec	r25
    2d2a:	e9 f7       	brne	.-6      	; 0x2d26 <LCD_CLEAR+0x26>
	while(1)
	{
		LCD_CONSTANT(empty,0,Row,start,0);
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	60 e0       	ldi	r22, 0x00	; 0
    2d32:	49 85       	ldd	r20, Y+9	; 0x09
    2d34:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d36:	00 e0       	ldi	r16, 0x00	; 0
    2d38:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <LCD_CONSTANT>
		  start++;
    2d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	8a 87       	std	Y+10, r24	; 0x0a
		  if(start==end)
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d46:	98 17       	cp	r25, r24
    2d48:	89 f7       	brne	.-30     	; 0x2d2c <LCD_CLEAR+0x2c>
			  break;
		  }
	}


}
    2d4a:	2b 96       	adiw	r28, 0x0b	; 11
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	0f 91       	pop	r16
    2d5c:	08 95       	ret

00002d5e <main>:
volatile u8 Ton=0;
volatile u8 Toff=0;
volatile u8 Flag=0;
volatile u8 OV=0;
int main()
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	6e 97       	sbiw	r28, 0x1e	; 30
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
	//enable global interrupt
	GIE_Vid_Enable();
    2d72:	0e 94 20 0b 	call	0x1640	; 0x1640 <GIE_Vid_Enable>
	//set pin direction
	DIO_VidSetPinDirection(DIO_PORTD,PIN4,OUTPUT);//PIN FOR PWM IN TIMER 1
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	64 e0       	ldi	r22, 0x04	; 4
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <DIO_VidSetPinDirection>
	//set direction of PIN2 IN PORTD as input
	DIO_VidSetPinDirection(DIO_PORTD,PIN2,INPUT);
    2d80:	83 e0       	ldi	r24, 0x03	; 3
    2d82:	62 e0       	ldi	r22, 0x02	; 2
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 b0 0c 	call	0x1960	; 0x1960 <DIO_VidSetPinDirection>
	//activity pull up resistor
	DIO_VidSetPinValue(DIO_PORTD,PIN2,HIGH);
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	62 e0       	ldi	r22, 0x02	; 2
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_VidSetPinValue>
	//local variable initialization
	u8 Duty_Cycle=0;
    2d94:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Freq=0;
    2d96:	1d 8e       	std	Y+29, r1	; 0x1d
	//Use timer 1 as pwm generator
	TIMER1_INIT();
    2d98:	0e 94 32 09 	call	0x1264	; 0x1264 <TIMER1_INIT>
	//use timer 2 as counter
	TIMER2_INIT();
    2d9c:	0e 94 8c 09 	call	0x1318	; 0x1318 <TIMER2_INIT>
	TIMER2_OV_SetCallBack(timer2_func);
    2da0:	8b e2       	ldi	r24, 0x2B	; 43
    2da2:	98 e1       	ldi	r25, 0x18	; 24
    2da4:	0e 94 71 07 	call	0xee2	; 0xee2 <TIMER2_OV_SetCallBack>
	//initialization of lcd
	LCD_VidInit();
    2da8:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_VidInit>
	LCD_VidWriteString("welcome elsayed");
    2dac:	80 e6       	ldi	r24, 0x60	; 96
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_VidWriteString>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	aa e7       	ldi	r26, 0x7A	; 122
    2dba:	b4 e4       	ldi	r27, 0x44	; 68
    2dbc:	89 8f       	std	Y+25, r24	; 0x19
    2dbe:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc0:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	4a ef       	ldi	r20, 0xFA	; 250
    2dd2:	54 e4       	ldi	r21, 0x44	; 68
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	8d 8b       	std	Y+21, r24	; 0x15
    2dde:	9e 8b       	std	Y+22, r25	; 0x16
    2de0:	af 8b       	std	Y+23, r26	; 0x17
    2de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de4:	6d 89       	ldd	r22, Y+21	; 0x15
    2de6:	7e 89       	ldd	r23, Y+22	; 0x16
    2de8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dea:	98 8d       	ldd	r25, Y+24	; 0x18
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <main+0xa8>
		__ticks = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 8b       	std	Y+20, r25	; 0x14
    2e02:	8b 8b       	std	Y+19, r24	; 0x13
    2e04:	3f c0       	rjmp	.+126    	; 0x2e84 <main+0x126>
	else if (__tmp > 65535)
    2e06:	6d 89       	ldd	r22, Y+21	; 0x15
    2e08:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	4f e7       	ldi	r20, 0x7F	; 127
    2e14:	57 e4       	ldi	r21, 0x47	; 71
    2e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1a:	18 16       	cp	r1, r24
    2e1c:	4c f5       	brge	.+82     	; 0x2e70 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e2       	ldi	r20, 0x20	; 32
    2e2c:	51 e4       	ldi	r21, 0x41	; 65
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	bc 01       	movw	r22, r24
    2e38:	cd 01       	movw	r24, r26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9c 8b       	std	Y+20, r25	; 0x14
    2e44:	8b 8b       	std	Y+19, r24	; 0x13
    2e46:	0f c0       	rjmp	.+30     	; 0x2e66 <main+0x108>
    2e48:	88 ec       	ldi	r24, 0xC8	; 200
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	9a 8b       	std	Y+18, r25	; 0x12
    2e4e:	89 8b       	std	Y+17, r24	; 0x11
    2e50:	89 89       	ldd	r24, Y+17	; 0x11
    2e52:	9a 89       	ldd	r25, Y+18	; 0x12
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <main+0xf6>
    2e58:	9a 8b       	std	Y+18, r25	; 0x12
    2e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	69 f7       	brne	.-38     	; 0x2e48 <main+0xea>
    2e6e:	14 c0       	rjmp	.+40     	; 0x2e98 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e70:	6d 89       	ldd	r22, Y+21	; 0x15
    2e72:	7e 89       	ldd	r23, Y+22	; 0x16
    2e74:	8f 89       	ldd	r24, Y+23	; 0x17
    2e76:	98 8d       	ldd	r25, Y+24	; 0x18
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9c 8b       	std	Y+20, r25	; 0x14
    2e82:	8b 8b       	std	Y+19, r24	; 0x13
    2e84:	8b 89       	ldd	r24, Y+19	; 0x13
    2e86:	9c 89       	ldd	r25, Y+20	; 0x14
    2e88:	98 8b       	std	Y+16, r25	; 0x10
    2e8a:	8f 87       	std	Y+15, r24	; 0x0f
    2e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8e:	98 89       	ldd	r25, Y+16	; 0x10
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <main+0x132>
    2e94:	98 8b       	std	Y+16, r25	; 0x10
    2e96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	//initialization of external interrupt 0
	EX_INT0_INIT_Test(Rising_Adge);//PIN
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <EX_INT0_INIT_Test>
	INT0_SetCallBack(exter_interrupt_func);
    2e9e:	87 e3       	ldi	r24, 0x37	; 55
    2ea0:	98 e1       	ldi	r25, 0x18	; 24
    2ea2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <INT0_SetCallBack>
	//super loop
	while(1)
	{
		Set_Duty_Cycle_TIMER_1_B(50);
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	88 e4       	ldi	r24, 0x48	; 72
    2eac:	92 e4       	ldi	r25, 0x42	; 66
    2eae:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <Set_Duty_Cycle_TIMER_1_B>
		if(Flag==3)
    2eb2:	80 91 9a 01 	lds	r24, 0x019A
    2eb6:	83 30       	cpi	r24, 0x03	; 3
    2eb8:	b1 f7       	brne	.-20     	; 0x2ea6 <main+0x148>
		{
			LCD_VidWriteCommend(1);
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_VidWriteCommend>
			Duty_Cycle=(Ton/(Ton+Toff))*100;
    2ec0:	80 91 98 01 	lds	r24, 0x0198
    2ec4:	48 2f       	mov	r20, r24
    2ec6:	50 e0       	ldi	r21, 0x00	; 0
    2ec8:	80 91 98 01 	lds	r24, 0x0198
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	80 91 99 01 	lds	r24, 0x0199
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	28 0f       	add	r18, r24
    2eda:	39 1f       	adc	r19, r25
    2edc:	ca 01       	movw	r24, r20
    2ede:	b9 01       	movw	r22, r18
    2ee0:	0e 94 98 18 	call	0x3130	; 0x3130 <__divmodhi4>
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	84 e6       	ldi	r24, 0x64	; 100
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	ac 01       	movw	r20, r24
    2eee:	24 9f       	mul	r18, r20
    2ef0:	c0 01       	movw	r24, r0
    2ef2:	25 9f       	mul	r18, r21
    2ef4:	90 0d       	add	r25, r0
    2ef6:	34 9f       	mul	r19, r20
    2ef8:	90 0d       	add	r25, r0
    2efa:	11 24       	eor	r1, r1
    2efc:	8e 8f       	std	Y+30, r24	; 0x1e
			//Duty_Cycle=Duty_Cycle*100;
			Freq=1/(Ton+Toff);
    2efe:	80 91 98 01 	lds	r24, 0x0198
    2f02:	28 2f       	mov	r18, r24
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	80 91 99 01 	lds	r24, 0x0199
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	28 0f       	add	r18, r24
    2f10:	39 1f       	adc	r19, r25
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	b9 01       	movw	r22, r18
    2f18:	0e 94 98 18 	call	0x3130	; 0x3130 <__divmodhi4>
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_GoToXY(0,0);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_GoToXY>
			LCD_VidWriteString("Duty_Cycle=");
    2f28:	80 e7       	ldi	r24, 0x70	; 112
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_VidWriteString>
			//LCD_GoToXY(0,11);
			LCD_VidWriteNumber(Duty_Cycle);
    2f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f32:	88 2f       	mov	r24, r24
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a0 e0       	ldi	r26, 0x00	; 0
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <LCD_VidWriteNumber>
			LCD_GoToXY(1,0);
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <LCD_GoToXY>
			LCD_VidWriteString("Freq=");
    2f4a:	8c e7       	ldi	r24, 0x7C	; 124
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_VidWriteString>
			LCD_VidWriteNumber(Freq);
    2f52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f54:	88 2f       	mov	r24, r24
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e0       	ldi	r26, 0x00	; 0
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <LCD_VidWriteNumber>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	aa ef       	ldi	r26, 0xFA	; 250
    2f6a:	b3 e4       	ldi	r27, 0x43	; 67
    2f6c:	8b 87       	std	Y+11, r24	; 0x0b
    2f6e:	9c 87       	std	Y+12, r25	; 0x0c
    2f70:	ad 87       	std	Y+13, r26	; 0x0d
    2f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4a ef       	ldi	r20, 0xFA	; 250
    2f82:	54 e4       	ldi	r21, 0x44	; 68
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	8f 83       	std	Y+7, r24	; 0x07
    2f8e:	98 87       	std	Y+8, r25	; 0x08
    2f90:	a9 87       	std	Y+9, r26	; 0x09
    2f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <main+0x258>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	3f c0       	rjmp	.+126    	; 0x3034 <main+0x2d6>
	else if (__tmp > 65535)
    2fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb8:	78 85       	ldd	r23, Y+8	; 0x08
    2fba:	89 85       	ldd	r24, Y+9	; 0x09
    2fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	3f ef       	ldi	r19, 0xFF	; 255
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	57 e4       	ldi	r21, 0x47	; 71
    2fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	4c f5       	brge	.+82     	; 0x3020 <main+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <main+0x2b8>
    2ff8:	88 ec       	ldi	r24, 0xC8	; 200
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9c 83       	std	Y+4, r25	; 0x04
    2ffe:	8b 83       	std	Y+3, r24	; 0x03
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	9c 81       	ldd	r25, Y+4	; 0x04
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <main+0x2a6>
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300c:	8d 81       	ldd	r24, Y+5	; 0x05
    300e:	9e 81       	ldd	r25, Y+6	; 0x06
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	69 f7       	brne	.-38     	; 0x2ff8 <main+0x29a>
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <main+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	8d 81       	ldd	r24, Y+5	; 0x05
    3036:	9e 81       	ldd	r25, Y+6	; 0x06
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	f1 f7       	brne	.-4      	; 0x3040 <main+0x2e2>
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			Ton=0;
    3048:	10 92 98 01 	sts	0x0198, r1
			Toff=0;
    304c:	10 92 99 01 	sts	0x0199, r1
			Flag=0;
    3050:	10 92 9a 01 	sts	0x019A, r1
    3054:	28 cf       	rjmp	.-432    	; 0x2ea6 <main+0x148>

00003056 <timer2_func>:


	return 0;
}
void timer2_func(void)
{
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
	OV++;
    305e:	80 91 9b 01 	lds	r24, 0x019B
    3062:	8f 5f       	subi	r24, 0xFF	; 255
    3064:	80 93 9b 01 	sts	0x019B, r24
}
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <exter_interrupt_func>:
void exter_interrupt_func(void)
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    3076:	80 91 9a 01 	lds	r24, 0x019A
    307a:	88 23       	and	r24, r24
    307c:	49 f4       	brne	.+18     	; 0x3090 <exter_interrupt_func+0x22>
	{
		Set_Get_TCNT_2();
    307e:	0e 94 0f 0b 	call	0x161e	; 0x161e <Set_Get_TCNT_2>
		EX_INT0_INIT_Test(Falling_Adge);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	0e 94 0b 0c 	call	0x1816	; 0x1816 <EX_INT0_INIT_Test>
		Flag=1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	80 93 9a 01 	sts	0x019A, r24
    308e:	2e c0       	rjmp	.+92     	; 0x30ec <exter_interrupt_func+0x7e>
	}
	else if(Flag==1)
    3090:	80 91 9a 01 	lds	r24, 0x019A
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	a9 f4       	brne	.+42     	; 0x30c2 <exter_interrupt_func+0x54>
	{
		Ton=Set_Get_TCNT_2()+OV*256;
    3098:	0e 94 0f 0b 	call	0x161e	; 0x161e <Set_Get_TCNT_2>
    309c:	28 2f       	mov	r18, r24
    309e:	80 91 9b 01 	lds	r24, 0x019B
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	98 2f       	mov	r25, r24
    30a8:	88 27       	eor	r24, r24
    30aa:	82 0f       	add	r24, r18
    30ac:	80 93 98 01 	sts	0x0198, r24
		EX_INT0_INIT_Test(Rising_Adge);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <EX_INT0_INIT_Test>
		Flag=2;
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	80 93 9a 01 	sts	0x019A, r24
		OV=0;
    30bc:	10 92 9b 01 	sts	0x019B, r1
    30c0:	15 c0       	rjmp	.+42     	; 0x30ec <exter_interrupt_func+0x7e>
	}
	else if(Flag==2)
    30c2:	80 91 9a 01 	lds	r24, 0x019A
    30c6:	82 30       	cpi	r24, 0x02	; 2
    30c8:	89 f4       	brne	.+34     	; 0x30ec <exter_interrupt_func+0x7e>
	{
		Toff=Set_Get_TCNT_2()+OV*256;
    30ca:	0e 94 0f 0b 	call	0x161e	; 0x161e <Set_Get_TCNT_2>
    30ce:	28 2f       	mov	r18, r24
    30d0:	80 91 9b 01 	lds	r24, 0x019B
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	98 2f       	mov	r25, r24
    30da:	88 27       	eor	r24, r24
    30dc:	82 0f       	add	r24, r18
    30de:	80 93 99 01 	sts	0x0199, r24
		Flag=3;
    30e2:	83 e0       	ldi	r24, 0x03	; 3
    30e4:	80 93 9a 01 	sts	0x019A, r24
		OV=0;
    30e8:	10 92 9b 01 	sts	0x019B, r1
	}
}
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <__mulsi3>:
    30f2:	62 9f       	mul	r22, r18
    30f4:	d0 01       	movw	r26, r0
    30f6:	73 9f       	mul	r23, r19
    30f8:	f0 01       	movw	r30, r0
    30fa:	82 9f       	mul	r24, r18
    30fc:	e0 0d       	add	r30, r0
    30fe:	f1 1d       	adc	r31, r1
    3100:	64 9f       	mul	r22, r20
    3102:	e0 0d       	add	r30, r0
    3104:	f1 1d       	adc	r31, r1
    3106:	92 9f       	mul	r25, r18
    3108:	f0 0d       	add	r31, r0
    310a:	83 9f       	mul	r24, r19
    310c:	f0 0d       	add	r31, r0
    310e:	74 9f       	mul	r23, r20
    3110:	f0 0d       	add	r31, r0
    3112:	65 9f       	mul	r22, r21
    3114:	f0 0d       	add	r31, r0
    3116:	99 27       	eor	r25, r25
    3118:	72 9f       	mul	r23, r18
    311a:	b0 0d       	add	r27, r0
    311c:	e1 1d       	adc	r30, r1
    311e:	f9 1f       	adc	r31, r25
    3120:	63 9f       	mul	r22, r19
    3122:	b0 0d       	add	r27, r0
    3124:	e1 1d       	adc	r30, r1
    3126:	f9 1f       	adc	r31, r25
    3128:	bd 01       	movw	r22, r26
    312a:	cf 01       	movw	r24, r30
    312c:	11 24       	eor	r1, r1
    312e:	08 95       	ret

00003130 <__divmodhi4>:
    3130:	97 fb       	bst	r25, 7
    3132:	09 2e       	mov	r0, r25
    3134:	07 26       	eor	r0, r23
    3136:	0a d0       	rcall	.+20     	; 0x314c <__divmodhi4_neg1>
    3138:	77 fd       	sbrc	r23, 7
    313a:	04 d0       	rcall	.+8      	; 0x3144 <__divmodhi4_neg2>
    313c:	2e d0       	rcall	.+92     	; 0x319a <__udivmodhi4>
    313e:	06 d0       	rcall	.+12     	; 0x314c <__divmodhi4_neg1>
    3140:	00 20       	and	r0, r0
    3142:	1a f4       	brpl	.+6      	; 0x314a <__divmodhi4_exit>

00003144 <__divmodhi4_neg2>:
    3144:	70 95       	com	r23
    3146:	61 95       	neg	r22
    3148:	7f 4f       	sbci	r23, 0xFF	; 255

0000314a <__divmodhi4_exit>:
    314a:	08 95       	ret

0000314c <__divmodhi4_neg1>:
    314c:	f6 f7       	brtc	.-4      	; 0x314a <__divmodhi4_exit>
    314e:	90 95       	com	r25
    3150:	81 95       	neg	r24
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	08 95       	ret

00003156 <__udivmodsi4>:
    3156:	a1 e2       	ldi	r26, 0x21	; 33
    3158:	1a 2e       	mov	r1, r26
    315a:	aa 1b       	sub	r26, r26
    315c:	bb 1b       	sub	r27, r27
    315e:	fd 01       	movw	r30, r26
    3160:	0d c0       	rjmp	.+26     	; 0x317c <__udivmodsi4_ep>

00003162 <__udivmodsi4_loop>:
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	ee 1f       	adc	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	a2 17       	cp	r26, r18
    316c:	b3 07       	cpc	r27, r19
    316e:	e4 07       	cpc	r30, r20
    3170:	f5 07       	cpc	r31, r21
    3172:	20 f0       	brcs	.+8      	; 0x317c <__udivmodsi4_ep>
    3174:	a2 1b       	sub	r26, r18
    3176:	b3 0b       	sbc	r27, r19
    3178:	e4 0b       	sbc	r30, r20
    317a:	f5 0b       	sbc	r31, r21

0000317c <__udivmodsi4_ep>:
    317c:	66 1f       	adc	r22, r22
    317e:	77 1f       	adc	r23, r23
    3180:	88 1f       	adc	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	1a 94       	dec	r1
    3186:	69 f7       	brne	.-38     	; 0x3162 <__udivmodsi4_loop>
    3188:	60 95       	com	r22
    318a:	70 95       	com	r23
    318c:	80 95       	com	r24
    318e:	90 95       	com	r25
    3190:	9b 01       	movw	r18, r22
    3192:	ac 01       	movw	r20, r24
    3194:	bd 01       	movw	r22, r26
    3196:	cf 01       	movw	r24, r30
    3198:	08 95       	ret

0000319a <__udivmodhi4>:
    319a:	aa 1b       	sub	r26, r26
    319c:	bb 1b       	sub	r27, r27
    319e:	51 e1       	ldi	r21, 0x11	; 17
    31a0:	07 c0       	rjmp	.+14     	; 0x31b0 <__udivmodhi4_ep>

000031a2 <__udivmodhi4_loop>:
    31a2:	aa 1f       	adc	r26, r26
    31a4:	bb 1f       	adc	r27, r27
    31a6:	a6 17       	cp	r26, r22
    31a8:	b7 07       	cpc	r27, r23
    31aa:	10 f0       	brcs	.+4      	; 0x31b0 <__udivmodhi4_ep>
    31ac:	a6 1b       	sub	r26, r22
    31ae:	b7 0b       	sbc	r27, r23

000031b0 <__udivmodhi4_ep>:
    31b0:	88 1f       	adc	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	5a 95       	dec	r21
    31b6:	a9 f7       	brne	.-22     	; 0x31a2 <__udivmodhi4_loop>
    31b8:	80 95       	com	r24
    31ba:	90 95       	com	r25
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	08 95       	ret

000031c2 <__prologue_saves__>:
    31c2:	2f 92       	push	r2
    31c4:	3f 92       	push	r3
    31c6:	4f 92       	push	r4
    31c8:	5f 92       	push	r5
    31ca:	6f 92       	push	r6
    31cc:	7f 92       	push	r7
    31ce:	8f 92       	push	r8
    31d0:	9f 92       	push	r9
    31d2:	af 92       	push	r10
    31d4:	bf 92       	push	r11
    31d6:	cf 92       	push	r12
    31d8:	df 92       	push	r13
    31da:	ef 92       	push	r14
    31dc:	ff 92       	push	r15
    31de:	0f 93       	push	r16
    31e0:	1f 93       	push	r17
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	ca 1b       	sub	r28, r26
    31ec:	db 0b       	sbc	r29, r27
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	09 94       	ijmp

000031fa <__epilogue_restores__>:
    31fa:	2a 88       	ldd	r2, Y+18	; 0x12
    31fc:	39 88       	ldd	r3, Y+17	; 0x11
    31fe:	48 88       	ldd	r4, Y+16	; 0x10
    3200:	5f 84       	ldd	r5, Y+15	; 0x0f
    3202:	6e 84       	ldd	r6, Y+14	; 0x0e
    3204:	7d 84       	ldd	r7, Y+13	; 0x0d
    3206:	8c 84       	ldd	r8, Y+12	; 0x0c
    3208:	9b 84       	ldd	r9, Y+11	; 0x0b
    320a:	aa 84       	ldd	r10, Y+10	; 0x0a
    320c:	b9 84       	ldd	r11, Y+9	; 0x09
    320e:	c8 84       	ldd	r12, Y+8	; 0x08
    3210:	df 80       	ldd	r13, Y+7	; 0x07
    3212:	ee 80       	ldd	r14, Y+6	; 0x06
    3214:	fd 80       	ldd	r15, Y+5	; 0x05
    3216:	0c 81       	ldd	r16, Y+4	; 0x04
    3218:	1b 81       	ldd	r17, Y+3	; 0x03
    321a:	aa 81       	ldd	r26, Y+2	; 0x02
    321c:	b9 81       	ldd	r27, Y+1	; 0x01
    321e:	ce 0f       	add	r28, r30
    3220:	d1 1d       	adc	r29, r1
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	ed 01       	movw	r28, r26
    322e:	08 95       	ret

00003230 <_exit>:
    3230:	f8 94       	cli

00003232 <__stop_program>:
    3232:	ff cf       	rjmp	.-2      	; 0x3232 <__stop_program>
