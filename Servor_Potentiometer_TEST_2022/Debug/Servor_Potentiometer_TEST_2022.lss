
Servor_Potentiometer_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000398c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000398c  00003a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800178  00800178  00003b38  2**0
                  ALLOC
  3 .stab         00003cf0  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001929  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009151  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000092f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000094e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000de4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e302  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__vector_1>
       8:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__vector_2>
       c:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_3>
      10:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_4>
      14:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_7>
      20:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_8>
      24:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_9>
      28:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_10>
      2c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 12 	jmp	0x248e	; 0x248e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <main>
      8a:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b1 1c 	jmp	0x3962	; 0x3962 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_INIT>:
#include"UART_Configuration.h"

u8 Temporary_REG=0;
u8 arr[5];
void UART_INIT(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	UBRRH=0;
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
	UBRRL=51;
     e3c:	e9 e2       	ldi	r30, 0x29	; 41
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	83 e3       	ldi	r24, 0x33	; 51
     e42:	80 83       	st	Z, r24
	/*USART Control and Status Register B – UCSRB */
	Receiver_Enable;
     e44:	aa e2       	ldi	r26, 0x2A	; 42
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ea e2       	ldi	r30, 0x2A	; 42
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	8c 93       	st	X, r24
	Transmitter_Enable;
     e52:	aa e2       	ldi	r26, 0x2A	; 42
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e2       	ldi	r30, 0x2A	; 42
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
	/*Character Size*/
	Eight_Bit;
     e60:	aa e2       	ldi	r26, 0x2A	; 42
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ea e2       	ldi	r30, 0x2A	; 42
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8b 7f       	andi	r24, 0xFB	; 251
     e6c:	8c 93       	st	X, r24
     e6e:	80 91 78 01 	lds	r24, 0x0178
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	80 93 78 01 	sts	0x0178, r24
     e78:	80 91 78 01 	lds	r24, 0x0178
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 93 78 01 	sts	0x0178, r24
	/*Register Select*/
	SET_BIT( Temporary_REG , URSEL );
     e82:	80 91 78 01 	lds	r24, 0x0178
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	80 93 78 01 	sts	0x0178, r24
	/*USART Mode Select*/
	CLR_BIT( Temporary_REG , UMSEL );
     e8c:	80 91 78 01 	lds	r24, 0x0178
     e90:	8f 7b       	andi	r24, 0xBF	; 191
     e92:	80 93 78 01 	sts	0x0178, r24
	/*Parity Mode*/
	CLR_BIT( Temporary_REG ,  UPM1 );
     e96:	80 91 78 01 	lds	r24, 0x0178
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	80 93 78 01 	sts	0x0178, r24
	CLR_BIT( Temporary_REG ,  UPM0 );
     ea0:	80 91 78 01 	lds	r24, 0x0178
     ea4:	8f 7e       	andi	r24, 0xEF	; 239
     ea6:	80 93 78 01 	sts	0x0178, r24
	/*Stop Bit Select*/
	CLR_BIT( Temporary_REG ,  USBS );
     eaa:	80 91 78 01 	lds	r24, 0x0178
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	80 93 78 01 	sts	0x0178, r24
	/*Clock Polarity*/
	CLR_BIT( Temporary_REG , UCPOL );
     eb4:	80 91 78 01 	lds	r24, 0x0178
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	80 93 78 01 	sts	0x0178, r24
	/*MOVING DATA*/
	USCRC=Temporary_REG;
     ebe:	e0 e4       	ldi	r30, 0x40	; 64
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 91 78 01 	lds	r24, 0x0178
     ec6:	80 83       	st	Z, r24
	

}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <UART_VoidSendChar>:
void UART_VoidSendChar(u8 u8Data)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
	/*wait until Transmitter be Empty*/
	while(GET_BIT(UCSRA,UDRE)==0);
     eda:	eb e2       	ldi	r30, 0x2B	; 43
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 95       	swap	r24
     ee2:	86 95       	lsr	r24
     ee4:	87 70       	andi	r24, 0x07	; 7
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	90 70       	andi	r25, 0x00	; 0
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	a1 f3       	breq	.-24     	; 0xeda <UART_VoidSendChar+0xc>
	UDR=u8Data;
     ef2:	ec e2       	ldi	r30, 0x2C	; 44
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	80 83       	st	Z, r24

}
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <UART_VoidGetChar>:
u8 UART_VoidGetChar(void)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	u8 u8Result=0;
     f0c:	19 82       	std	Y+1, r1	; 0x01
	/*wait until Receive Complete*/
	while(GET_BIT(UCSRA,RXC)==0);
     f0e:	eb e2       	ldi	r30, 0x2B	; 43
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 23       	and	r24, r24
     f16:	dc f7       	brge	.-10     	; 0xf0e <UART_VoidGetChar+0xc>
	/**/
	u8Result=UDR;
     f18:	ec e2       	ldi	r30, 0x2C	; 44
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Flag*/
	Trasmit_Complete;
     f20:	ab e2       	ldi	r26, 0x2B	; 43
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	eb e2       	ldi	r30, 0x2B	; 43
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 64       	ori	r24, 0x40	; 64
     f2c:	8c 93       	st	X, r24


	return u8Result;
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <UART_VoidGetString>:
u8* UART_VoidGetString(void)
{
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62

	for(u8 count=0;count<3;count++)
     f46:	19 82       	std	Y+1, r1	; 0x01
     f48:	0c c0       	rjmp	.+24     	; 0xf62 <UART_VoidGetString+0x2a>
	{
		arr[count]=UART_VoidGetChar();
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	08 2f       	mov	r16, r24
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	0e 94 81 07 	call	0xf02	; 0xf02 <UART_VoidGetChar>
     f54:	f8 01       	movw	r30, r16
     f56:	e9 57       	subi	r30, 0x79	; 121
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	80 83       	st	Z, r24
	return u8Result;
}
u8* UART_VoidGetString(void)
{

	for(u8 count=0;count<3;count++)
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	83 30       	cpi	r24, 0x03	; 3
     f66:	88 f3       	brcs	.-30     	; 0xf4a <UART_VoidGetString+0x12>
	{
		arr[count]=UART_VoidGetChar();
	}
	return arr;
     f68:	87 e8       	ldi	r24, 0x87	; 135
     f6a:	91 e0       	ldi	r25, 0x01	; 1
}
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWSR,1);
     f80:	a1 e2       	ldi	r26, 0x21	; 33
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e1 e2       	ldi	r30, 0x21	; 33
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     f8e:	a1 e2       	ldi	r26, 0x21	; 33
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e1 e2       	ldi	r30, 0x21	; 33
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWBR = 12;
     f9c:	e0 e2       	ldi	r30, 0x20	; 32
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8c e0       	ldi	r24, 0x0C	; 12
     fa2:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     fa4:	a6 e5       	ldi	r26, 0x56	; 86
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e6 e5       	ldi	r30, 0x56	; 86
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 64       	ori	r24, 0x40	; 64
     fb0:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     fb2:	a6 e5       	ldi	r26, 0x56	; 86
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e6 e5       	ldi	r30, 0x56	; 86
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	8c 93       	st	X, r24
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <TWI_u8SlaveInit>:

void   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8ErrorState = STD_TYPES_OK;
	/* Set Slave Adress IN TWAR REG */
	TWAR = Copy_u8SlaveAddress << 1;
     fd2:	e2 e2       	ldi	r30, 0x22	; 34
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	88 0f       	add	r24, r24
     fda:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     fdc:	a6 e5       	ldi	r26, 0x56	; 86
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 64       	ori	r24, 0x40	; 64
     fe8:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     fea:	a6 e5       	ldi	r26, 0x56	; 86
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	84 60       	ori	r24, 0x04	; 4
     ff6:	8c 93       	st	X, r24
}
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
    100e:	a6 e5       	ldi	r26, 0x56	; 86
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e6 e5       	ldi	r30, 0x56	; 86
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    101c:	a6 e5       	ldi	r26, 0x56	; 86
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 68       	ori	r24, 0x80	; 128
    1028:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    102a:	e6 e5       	ldi	r30, 0x56	; 86
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	88 23       	and	r24, r24
    1032:	dc f7       	brge	.-10     	; 0x102a <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x08 )
    1034:	e1 e2       	ldi	r30, 0x21	; 33
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 7f       	andi	r24, 0xF8	; 248
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	88 30       	cpi	r24, 0x08	; 8
    1044:	91 05       	cpc	r25, r1
    1046:	11 f0       	breq	.+4      	; 0x104c <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    104c:	89 81       	ldd	r24, Y+1	; 0x01
}
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	0f 92       	push	r0
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
    1064:	a6 e5       	ldi	r26, 0x56	; 86
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	80 62       	ori	r24, 0x20	; 32
    1070:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    1072:	a6 e5       	ldi	r26, 0x56	; 86
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e5       	ldi	r30, 0x56	; 86
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    1080:	e6 e5       	ldi	r30, 0x56	; 86
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 23       	and	r24, r24
    1088:	dc f7       	brge	.-10     	; 0x1080 <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x10 )
    108a:	e1 e2       	ldi	r30, 0x21	; 33
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	80 31       	cpi	r24, 0x10	; 16
    109a:	91 05       	cpc	r25, r1
    109c:	11 f0       	breq	.+4      	; 0x10a2 <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <TWI_enuSendSlaveWithWrite+0x6>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
    10bc:	e3 e2       	ldi	r30, 0x23	; 35
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 0f       	add	r24, r24
    10c4:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    10c6:	a3 e2       	ldi	r26, 0x23	; 35
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e3 e2       	ldi	r30, 0x23	; 35
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8e 7f       	andi	r24, 0xFE	; 254
    10d2:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
    10d4:	a6 e5       	ldi	r26, 0x56	; 86
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e6 e5       	ldi	r30, 0x56	; 86
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 7d       	andi	r24, 0xDF	; 223
    10e0:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    10e2:	a6 e5       	ldi	r26, 0x56	; 86
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e6 e5       	ldi	r30, 0x56	; 86
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 68       	ori	r24, 0x80	; 128
    10ee:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x18 )
    10fa:	e1 e2       	ldi	r30, 0x21	; 33
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 7f       	andi	r24, 0xF8	; 248
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	88 31       	cpi	r24, 0x18	; 24
    110a:	91 05       	cpc	r25, r1
    110c:	11 f0       	breq	.+4      	; 0x1112 <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <TWI_enuSendSlaveWithRead+0x6>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
    112e:	e3 e2       	ldi	r30, 0x23	; 35
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	88 0f       	add	r24, r24
    1136:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    1138:	a3 e2       	ldi	r26, 0x23	; 35
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e2       	ldi	r30, 0x23	; 35
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
    1146:	a6 e5       	ldi	r26, 0x56	; 86
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    1154:	a6 e5       	ldi	r26, 0x56	; 86
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 23       	and	r24, r24
    116a:	dc f7       	brge	.-10     	; 0x1162 <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x40 )
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 7f       	andi	r24, 0xF8	; 248
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	80 34       	cpi	r24, 0x40	; 64
    117c:	91 05       	cpc	r25, r1
    117e:	11 f0       	breq	.+4      	; 0x1184 <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <TWI_enuSendDataByte+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWDR = Copy_u8Data;
    11a0:	e3 e2       	ldi	r30, 0x23	; 35
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWCR,7);
    11a8:	a6 e5       	ldi	r26, 0x56	; 86
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <TWI_enuSendDataByte+0x26>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x28 )
    11c0:	e1 e2       	ldi	r30, 0x21	; 33
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	88 7f       	andi	r24, 0xF8	; 248
    11cc:	90 70       	andi	r25, 0x00	; 0
    11ce:	88 32       	cpi	r24, 0x28	; 40
    11d0:	91 05       	cpc	r25, r1
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <TWI_enuSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TWI_enuReceiveDataByte+0x6>
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9b 83       	std	Y+3, r25	; 0x03
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	01 f1       	breq	.+64     	; 0x1240 <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWCR,7);
    1200:	a6 e5       	ldi	r26, 0x56	; 86
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e5       	ldi	r30, 0x56	; 86
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWCR,7)));
    120e:	e6 e5       	ldi	r30, 0x56	; 86
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	dc f7       	brge	.-10     	; 0x120e <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWSR & 0xF8) != 0x50 )
    1218:	e1 e2       	ldi	r30, 0x21	; 33
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	80 35       	cpi	r24, 0x50	; 80
    1228:	91 05       	cpc	r25, r1
    122a:	19 f0       	breq	.+6      	; 0x1232 <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWDR;
    1232:	e3 e2       	ldi	r30, 0x23	; 35
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	ea 81       	ldd	r30, Y+2	; 0x02
    123a:	fb 81       	ldd	r31, Y+3	; 0x03
    123c:	80 83       	st	Z, r24
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
    1240:	87 e0       	ldi	r24, 0x07	; 7
    1242:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWCR,4);
    125a:	a6 e5       	ldi	r26, 0x56	; 86
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 61       	ori	r24, 0x10	; 16
    1266:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    1268:	a6 e5       	ldi	r26, 0x56	; 86
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e6 e5       	ldi	r30, 0x56	; 86
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 68       	ori	r24, 0x80	; 128
    1274:	8c 93       	st	X, r24
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T2)(void)=NULL;
static void (*GPFunc_T1)(void)=NULL;


void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <TIMER0_OV_SetCallBack+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	90 93 7a 01 	sts	0x017A, r25
    1292:	80 93 79 01 	sts	0x0179, r24
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <TIMER0_CM_SetCallBack+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	90 93 7a 01 	sts	0x017A, r25
    12b6:	80 93 79 01 	sts	0x0179, r24
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <TIMER1_OV_SetCallBack+0x6>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	90 93 7e 01 	sts	0x017E, r25
    12da:	80 93 7d 01 	sts	0x017D, r24
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <TIMER1_CM_A_SetCallBack+0x6>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	90 93 7e 01 	sts	0x017E, r25
    12fe:	80 93 7d 01 	sts	0x017D, r24
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <TIMER1_CM_B_SetCallBack+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	90 93 7e 01 	sts	0x017E, r25
    1322:	80 93 7d 01 	sts	0x017D, r24
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <TIMER2_OV_SetCallBack+0x6>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	90 93 7c 01 	sts	0x017C, r25
    1346:	80 93 7b 01 	sts	0x017B, r24
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <TIMER2_CM_SetCallBack+0x6>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	90 93 7c 01 	sts	0x017C, r25
    136a:	80 93 7b 01 	sts	0x017B, r24
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    13a2:	80 91 79 01 	lds	r24, 0x0179
    13a6:	90 91 7a 01 	lds	r25, 0x017A
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_11+0x40>
	{
		GPFunc_T0();
    13ae:	e0 91 79 01 	lds	r30, 0x0179
    13b2:	f0 91 7a 01 	lds	r31, 0x017A
    13b6:	09 95       	icall
	}
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_10>:
ISR_TMR0_Comp()
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    1408:	80 91 79 01 	lds	r24, 0x0179
    140c:	90 91 7a 01 	lds	r25, 0x017A
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	29 f0       	breq	.+10     	; 0x141e <__vector_10+0x40>
	{
		GPFunc_T0();
    1414:	e0 91 79 01 	lds	r30, 0x0179
    1418:	f0 91 7a 01 	lds	r31, 0x017A
    141c:	09 95       	icall
	}
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    146e:	80 91 7d 01 	lds	r24, 0x017D
    1472:	90 91 7e 01 	lds	r25, 0x017E
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	29 f0       	breq	.+10     	; 0x1484 <__vector_9+0x40>
		{
			GPFunc_T1();
    147a:	e0 91 7d 01 	lds	r30, 0x017D
    147e:	f0 91 7e 01 	lds	r31, 0x017E
    1482:	09 95       	icall
		}
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_7>:
ISR_TMR1_CompA()
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    14d4:	80 91 7d 01 	lds	r24, 0x017D
    14d8:	90 91 7e 01 	lds	r25, 0x017E
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <__vector_7+0x40>
		{
			GPFunc_T1();
    14e0:	e0 91 7d 01 	lds	r30, 0x017D
    14e4:	f0 91 7e 01 	lds	r31, 0x017E
    14e8:	09 95       	icall
		}
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_8>:
ISR_TMR1_CompB()
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    153a:	80 91 7d 01 	lds	r24, 0x017D
    153e:	90 91 7e 01 	lds	r25, 0x017E
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	29 f0       	breq	.+10     	; 0x1550 <__vector_8+0x40>
		{
			GPFunc_T1();
    1546:	e0 91 7d 01 	lds	r30, 0x017D
    154a:	f0 91 7e 01 	lds	r31, 0x017E
    154e:	09 95       	icall
		}
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0f 90       	pop	r0
    1572:	1f 90       	pop	r1
    1574:	18 95       	reti

00001576 <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    1576:	1f 92       	push	r1
    1578:	0f 92       	push	r0
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	0f 92       	push	r0
    157e:	11 24       	eor	r1, r1
    1580:	2f 93       	push	r18
    1582:	3f 93       	push	r19
    1584:	4f 93       	push	r20
    1586:	5f 93       	push	r21
    1588:	6f 93       	push	r22
    158a:	7f 93       	push	r23
    158c:	8f 93       	push	r24
    158e:	9f 93       	push	r25
    1590:	af 93       	push	r26
    1592:	bf 93       	push	r27
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    15a0:	80 91 7b 01 	lds	r24, 0x017B
    15a4:	90 91 7c 01 	lds	r25, 0x017C
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	29 f0       	breq	.+10     	; 0x15b6 <__vector_5+0x40>
	{
		GPFunc_T2();
    15ac:	e0 91 7b 01 	lds	r30, 0x017B
    15b0:	f0 91 7c 01 	lds	r31, 0x017C
    15b4:	09 95       	icall
	}
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_4>:
ISR_TMR2_Comp()
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1606:	80 91 7b 01 	lds	r24, 0x017B
    160a:	90 91 7c 01 	lds	r25, 0x017C
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	29 f0       	breq	.+10     	; 0x161c <__vector_4+0x40>
	{
		GPFunc_T2();
    1612:	e0 91 7b 01 	lds	r30, 0x017B
    1616:	f0 91 7c 01 	lds	r31, 0x017C
    161a:	09 95       	icall
	}
}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	bf 91       	pop	r27
    1626:	af 91       	pop	r26
    1628:	9f 91       	pop	r25
    162a:	8f 91       	pop	r24
    162c:	7f 91       	pop	r23
    162e:	6f 91       	pop	r22
    1630:	5f 91       	pop	r21
    1632:	4f 91       	pop	r20
    1634:	3f 91       	pop	r19
    1636:	2f 91       	pop	r18
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    164a:	a3 e5       	ldi	r26, 0x53	; 83
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e3 e5       	ldi	r30, 0x53	; 83
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 93       	st	X, r24
    1658:	a3 e5       	ldi	r26, 0x53	; 83
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e3 e5       	ldi	r30, 0x53	; 83
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 64       	ori	r24, 0x40	; 64
    1664:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    1666:	a3 e5       	ldi	r26, 0x53	; 83
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e3 e5       	ldi	r30, 0x53	; 83
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 62       	ori	r24, 0x20	; 32
    1672:	8c 93       	st	X, r24
    1674:	a3 e5       	ldi	r26, 0x53	; 83
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e3 e5       	ldi	r30, 0x53	; 83
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	8f 7e       	andi	r24, 0xEF	; 239
    1680:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    1682:	a3 e5       	ldi	r26, 0x53	; 83
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e3 e5       	ldi	r30, 0x53	; 83
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	8c 93       	st	X, r24
    1690:	a3 e5       	ldi	r26, 0x53	; 83
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e3 e5       	ldi	r30, 0x53	; 83
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8d 7f       	andi	r24, 0xFD	; 253
    169c:	8c 93       	st	X, r24
    169e:	a3 e5       	ldi	r26, 0x53	; 83
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e3 e5       	ldi	r30, 0x53	; 83
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=19999;		// For 50 Hz for servo motor
    16ba:	e6 e4       	ldi	r30, 0x46	; 70
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8f e1       	ldi	r24, 0x1F	; 31
    16c0:	9e e4       	ldi	r25, 0x4E	; 78
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
	prescaler_clk_8_1;
    16c6:	ae e4       	ldi	r26, 0x4E	; 78
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8b 7f       	andi	r24, 0xFB	; 251
    16d2:	8c 93       	st	X, r24
    16d4:	ae e4       	ldi	r26, 0x4E	; 78
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	82 60       	ori	r24, 0x02	; 2
    16e0:	8c 93       	st	X, r24
    16e2:	ae e4       	ldi	r26, 0x4E	; 78
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ee e4       	ldi	r30, 0x4E	; 78
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8e 7f       	andi	r24, 0xFE	; 254
    16ee:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    16f0:	af e4       	ldi	r26, 0x4F	; 79
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ef e4       	ldi	r30, 0x4F	; 79
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	8c 93       	st	X, r24
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	8c 93       	st	X, r24
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	88 60       	ori	r24, 0x08	; 8
    1718:	8c 93       	st	X, r24
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    1728:	af e4       	ldi	r26, 0x4F	; 79
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e4       	ldi	r30, 0x4F	; 79
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 7b       	andi	r24, 0xBF	; 191
    1734:	8c 93       	st	X, r24
    1736:	af e4       	ldi	r26, 0x4F	; 79
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ef e4       	ldi	r30, 0x4F	; 79
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	80 68       	ori	r24, 0x80	; 128
    1742:	8c 93       	st	X, r24
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7e       	andi	r24, 0xEF	; 239
    1750:	8c 93       	st	X, r24
    1752:	af e4       	ldi	r26, 0x4F	; 79
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ef e4       	ldi	r30, 0x4F	; 79
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_2;
	prescaler_clk_8_2;
	Non_PWM_Normal_OC0_disconnected_2;
	Compare_Match_Interrupt_Enable_2;
#elif Timer2_Mode==Fast_PWM_Timer2_Mode
	Fast_PWM_2;
    176e:	a5 e4       	ldi	r26, 0x45	; 69
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e4       	ldi	r30, 0x45	; 69
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	88 60       	ori	r24, 0x08	; 8
    177a:	8c 93       	st	X, r24
    177c:	a5 e4       	ldi	r26, 0x45	; 69
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e4       	ldi	r30, 0x45	; 69
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	8c 93       	st	X, r24
	NonInverted_Mode_2;
    178a:	a5 e4       	ldi	r26, 0x45	; 69
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e4       	ldi	r30, 0x45	; 69
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 62       	ori	r24, 0x20	; 32
    1796:	8c 93       	st	X, r24
    1798:	a5 e4       	ldi	r26, 0x45	; 69
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e4       	ldi	r30, 0x45	; 69
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 7e       	andi	r24, 0xEF	; 239
    17a4:	8c 93       	st	X, r24
	prescaler_clk_256_2;
    17a6:	a5 e4       	ldi	r26, 0x45	; 69
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e4       	ldi	r30, 0x45	; 69
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c 93       	st	X, r24
    17b4:	a5 e4       	ldi	r26, 0x45	; 69
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e4       	ldi	r30, 0x45	; 69
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8d 7f       	andi	r24, 0xFD	; 253
    17c0:	8c 93       	st	X, r24
    17c2:	a5 e4       	ldi	r26, 0x45	; 69
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e5 e4       	ldi	r30, 0x45	; 69
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8e 7f       	andi	r24, 0xFE	; 254
    17ce:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    17de:	a9 e5       	ldi	r26, 0x59	; 89
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e9 e5       	ldi	r30, 0x59	; 89
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 62       	ori	r24, 0x20	; 32
    17ea:	8c 93       	st	X, r24
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <Set_Duty_Cycle_TIMER_0+0xa>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <Set_Duty_Cycle_TIMER_0+0xc>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	69 83       	std	Y+1, r22	; 0x01
    1804:	7a 83       	std	Y+2, r23	; 0x02
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    180a:	69 81       	ldd	r22, Y+1	; 0x01
    180c:	7a 81       	ldd	r23, Y+2	; 0x02
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	48 ec       	ldi	r20, 0xC8	; 200
    1818:	52 e4       	ldi	r21, 0x42	; 66
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	ab 83       	std	Y+3, r26	; 0x03
    1828:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    182a:	0c e5       	ldi	r16, 0x5C	; 92
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	69 81       	ldd	r22, Y+1	; 0x01
    1830:	7a 81       	ldd	r23, Y+2	; 0x02
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	53 e4       	ldi	r21, 0x43	; 67
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24

}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <Set_Duty_Cycle_TIMER_1_A+0xa>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <Set_Duty_Cycle_TIMER_1_A+0xc>
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	69 83       	std	Y+1, r22	; 0x01
    188e:	7a 83       	std	Y+2, r23	; 0x02
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	7a 81       	ldd	r23, Y+2	; 0x02
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	48 ec       	ldi	r20, 0xC8	; 200
    18a2:	52 e4       	ldi	r21, 0x42	; 66
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	ab 83       	std	Y+3, r26	; 0x03
    18b2:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    18b4:	0a e4       	ldi	r16, 0x4A	; 74
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	e6 e4       	ldi	r30, 0x46	; 70
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	cc 01       	movw	r24, r24
    18c2:	a0 e0       	ldi	r26, 0x00	; 0
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	29 81       	ldd	r18, Y+1	; 0x01
    18d8:	3a 81       	ldd	r19, Y+2	; 0x02
    18da:	4b 81       	ldd	r20, Y+3	; 0x03
    18dc:	5c 81       	ldd	r21, Y+4	; 0x04
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	5f e3       	ldi	r21, 0x3F	; 63
    18f2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	f8 01       	movw	r30, r16
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	08 95       	ret

0000191e <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <Set_Duty_Cycle_TIMER_1_B+0xa>
    1928:	00 d0       	rcall	.+0      	; 0x192a <Set_Duty_Cycle_TIMER_1_B+0xc>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	69 83       	std	Y+1, r22	; 0x01
    1930:	7a 83       	std	Y+2, r23	; 0x02
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1936:	69 81       	ldd	r22, Y+1	; 0x01
    1938:	7a 81       	ldd	r23, Y+2	; 0x02
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	48 ec       	ldi	r20, 0xC8	; 200
    1944:	52 e4       	ldi	r21, 0x42	; 66
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	9a 83       	std	Y+2, r25	; 0x02
    1952:	ab 83       	std	Y+3, r26	; 0x03
    1954:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    1956:	08 e4       	ldi	r16, 0x48	; 72
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	e6 e4       	ldi	r30, 0x46	; 70
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	cc 01       	movw	r24, r24
    1964:	a0 e0       	ldi	r26, 0x00	; 0
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	29 81       	ldd	r18, Y+1	; 0x01
    197a:	3a 81       	ldd	r19, Y+2	; 0x02
    197c:	4b 81       	ldd	r20, Y+3	; 0x03
    197e:	5c 81       	ldd	r21, Y+4	; 0x04
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <Set_Duty_Cycle_TIMER_2+0xa>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <Set_Duty_Cycle_TIMER_2+0xc>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	69 83       	std	Y+1, r22	; 0x01
    19d2:	7a 83       	std	Y+2, r23	; 0x02
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    19d8:	69 81       	ldd	r22, Y+1	; 0x01
    19da:	7a 81       	ldd	r23, Y+2	; 0x02
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	48 ec       	ldi	r20, 0xC8	; 200
    19e6:	52 e4       	ldi	r21, 0x42	; 66
    19e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	ab 83       	std	Y+3, r26	; 0x03
    19f6:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    19f8:	03 e4       	ldi	r16, 0x43	; 67
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	69 81       	ldd	r22, Y+1	; 0x01
    19fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	5f e3       	ldi	r21, 0x3F	; 63
    1a20:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24

}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <SPI_voidInit>:
#include "SPI_interface.h"
#include "SPI_Register.h"
#include "SPI_config.h"

void SPI_voidInit(void)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
	#if (SPI_u8_MODE == SPI_u8_MASTER_MODE)
	/* Data Order = MSB First */
	CLR_BIT(SPCR,5);
    1a52:	ad e2       	ldi	r26, 0x2D	; 45
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	ed e2       	ldi	r30, 0x2D	; 45
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7d       	andi	r24, 0xDF	; 223
    1a5e:	8c 93       	st	X, r24
	/* Select Master Mode */
	SET_BIT(SPCR,4);
    1a60:	ad e2       	ldi	r26, 0x2D	; 45
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	ed e2       	ldi	r30, 0x2D	; 45
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 61       	ori	r24, 0x10	; 16
    1a6c:	8c 93       	st	X, r24
    /* Clock Polatity Falling/Rising  Clock Phase Setup/Sample */
	SET_BIT(SPCR,3);
    1a6e:	ad e2       	ldi	r26, 0x2D	; 45
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e2       	ldi	r30, 0x2D	; 45
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 60       	ori	r24, 0x08	; 8
    1a7a:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
    1a7c:	ad e2       	ldi	r26, 0x2D	; 45
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ed e2       	ldi	r30, 0x2D	; 45
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	84 60       	ori	r24, 0x04	; 4
    1a88:	8c 93       	st	X, r24
	/* Select Clock Fosc/64 */
	SET_BIT(SPCR,1);
    1a8a:	ad e2       	ldi	r26, 0x2D	; 45
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ed e2       	ldi	r30, 0x2D	; 45
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	82 60       	ori	r24, 0x02	; 2
    1a96:	8c 93       	st	X, r24
	CLR_BIT(SPCR,0);
    1a98:	ad e2       	ldi	r26, 0x2D	; 45
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ed e2       	ldi	r30, 0x2D	; 45
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8e 7f       	andi	r24, 0xFE	; 254
    1aa4:	8c 93       	st	X, r24
	#else
		#error "Wrong Choice"
	#endif

	/* Enable SPI */
	SET_BIT(SPCR,6);
    1aa6:	ad e2       	ldi	r26, 0x2D	; 45
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ed e2       	ldi	r30, 0x2D	; 45
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 64       	ori	r24, 0x40	; 64
    1ab2:	8c 93       	st	X, r24
	
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <SPI_u8TransRecive>:

u8   SPI_u8TransRecive(u8 Copy_u8DataByte ,u8 * Copy_pu8RecievedData)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <SPI_u8TransRecive+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <SPI_u8TransRecive+0x8>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    1ac8:	7c 83       	std	Y+4, r23	; 0x04
    1aca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1acc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecievedData != NULL)
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	89 f0       	breq	.+34     	; 0x1af8 <SPI_u8TransRecive+0x3e>
	{
		/* Send Data Byte */
		SPDR = Copy_u8DataByte;
    1ad6:	ef e2       	ldi	r30, 0x2F	; 47
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
		/* Check The Flag */
		while(!GET_BIT(SPDR,7));
    1ade:	ef e2       	ldi	r30, 0x2F	; 47
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 23       	and	r24, r24
    1ae6:	dc f7       	brge	.-10     	; 0x1ade <SPI_u8TransRecive+0x24>
		/* Read The Input Data */
		*Copy_pu8RecievedData = SPDR;
    1ae8:	ef e2       	ldi	r30, 0x2F	; 47
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	eb 81       	ldd	r30, Y+3	; 0x03
    1af0:	fc 81       	ldd	r31, Y+4	; 0x04
    1af2:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1b10:	af e5       	ldi	r26, 0x5F	; 95
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	ef e5       	ldi	r30, 0x5F	; 95
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 68       	ori	r24, 0x80	; 128
    1b1c:	8c 93       	st	X, r24
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    1b2c:	af e5       	ldi	r26, 0x5F	; 95
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ef e5       	ldi	r30, 0x5F	; 95
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8f 77       	andi	r24, 0x7F	; 127
    1b38:	8c 93       	st	X, r24
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <INT0_SetCallBack+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	90 93 80 01 	sts	0x0180, r25
    1b56:	80 93 7f 01 	sts	0x017F, r24
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <INT1_SetCallBack+0x6>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	90 93 82 01 	sts	0x0182, r25
    1b7a:	80 93 81 01 	sts	0x0181, r24
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <INT2_SetCallBack+0x6>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	90 93 84 01 	sts	0x0184, r25
    1b9e:	80 93 83 01 	sts	0x0183, r24
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <__vector_1>:
ISR(__vector_1)
{
    1bac:	1f 92       	push	r1
    1bae:	0f 92       	push	r0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	0f 92       	push	r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	2f 93       	push	r18
    1bb8:	3f 93       	push	r19
    1bba:	4f 93       	push	r20
    1bbc:	5f 93       	push	r21
    1bbe:	6f 93       	push	r22
    1bc0:	7f 93       	push	r23
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	af 93       	push	r26
    1bc8:	bf 93       	push	r27
    1bca:	ef 93       	push	r30
    1bcc:	ff 93       	push	r31
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    1bd6:	80 91 7f 01 	lds	r24, 0x017F
    1bda:	90 91 80 01 	lds	r25, 0x0180
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	29 f0       	breq	.+10     	; 0x1bec <__vector_1+0x40>
	{
		GPFunc0();
    1be2:	e0 91 7f 01 	lds	r30, 0x017F
    1be6:	f0 91 80 01 	lds	r31, 0x0180
    1bea:	09 95       	icall
	}
}
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	ff 91       	pop	r31
    1bf2:	ef 91       	pop	r30
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <__vector_2>:
ISR(__vector_2)
{
    1c12:	1f 92       	push	r1
    1c14:	0f 92       	push	r0
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	0f 92       	push	r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	2f 93       	push	r18
    1c1e:	3f 93       	push	r19
    1c20:	4f 93       	push	r20
    1c22:	5f 93       	push	r21
    1c24:	6f 93       	push	r22
    1c26:	7f 93       	push	r23
    1c28:	8f 93       	push	r24
    1c2a:	9f 93       	push	r25
    1c2c:	af 93       	push	r26
    1c2e:	bf 93       	push	r27
    1c30:	ef 93       	push	r30
    1c32:	ff 93       	push	r31
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    1c3c:	80 91 81 01 	lds	r24, 0x0181
    1c40:	90 91 82 01 	lds	r25, 0x0182
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	29 f0       	breq	.+10     	; 0x1c52 <__vector_2+0x40>
	{
		GPFunc1();
    1c48:	e0 91 81 01 	lds	r30, 0x0181
    1c4c:	f0 91 82 01 	lds	r31, 0x0182
    1c50:	09 95       	icall
	}
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	bf 91       	pop	r27
    1c5c:	af 91       	pop	r26
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	7f 91       	pop	r23
    1c64:	6f 91       	pop	r22
    1c66:	5f 91       	pop	r21
    1c68:	4f 91       	pop	r20
    1c6a:	3f 91       	pop	r19
    1c6c:	2f 91       	pop	r18
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_3>:
ISR(__vector_3)
{
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    1ca2:	80 91 83 01 	lds	r24, 0x0183
    1ca6:	90 91 84 01 	lds	r25, 0x0184
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <__vector_3+0x40>
	{
		GPFunc2();
    1cae:	e0 91 83 01 	lds	r30, 0x0183
    1cb2:	f0 91 84 01 	lds	r31, 0x0184
    1cb6:	09 95       	icall
	}
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	ff 91       	pop	r31
    1cbe:	ef 91       	pop	r30
    1cc0:	bf 91       	pop	r27
    1cc2:	af 91       	pop	r26
    1cc4:	9f 91       	pop	r25
    1cc6:	8f 91       	pop	r24
    1cc8:	7f 91       	pop	r23
    1cca:	6f 91       	pop	r22
    1ccc:	5f 91       	pop	r21
    1cce:	4f 91       	pop	r20
    1cd0:	3f 91       	pop	r19
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1ce6:	ab e5       	ldi	r26, 0x5B	; 91
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e5       	ldi	r30, 0x5B	; 91
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 64       	ori	r24, 0x40	; 64
    1cf2:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1cf4:	a5 e5       	ldi	r26, 0x55	; 85
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e5 e5       	ldi	r30, 0x55	; 85
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	81 60       	ori	r24, 0x01	; 1
    1d00:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1d02:	a5 e5       	ldi	r26, 0x55	; 85
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e5 e5       	ldi	r30, 0x55	; 85
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8d 7f       	andi	r24, 0xFD	; 253
    1d0e:	8c 93       	st	X, r24
	#endif
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1d1e:	ab e5       	ldi	r26, 0x5B	; 91
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	eb e5       	ldi	r30, 0x5B	; 91
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 68       	ori	r24, 0x80	; 128
    1d2a:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1d2c:	a5 e5       	ldi	r26, 0x55	; 85
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e5       	ldi	r30, 0x55	; 85
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 7f       	andi	r24, 0xFB	; 251
    1d38:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    1d3a:	a5 e5       	ldi	r26, 0x55	; 85
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e5       	ldi	r30, 0x55	; 85
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1d56:	ab e5       	ldi	r26, 0x5B	; 91
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	eb e5       	ldi	r30, 0x5B	; 91
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 62       	ori	r24, 0x20	; 32
    1d62:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1d64:	a4 e5       	ldi	r26, 0x54	; 84
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e4 e5       	ldi	r30, 0x54	; 84
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 7b       	andi	r24, 0xBF	; 191
    1d70:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	27 97       	sbiw	r28, 0x07	; 7
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	6a 83       	std	Y+2, r22	; 0x02
    1d90:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <DIO_VidSetPinDirection+0x22>
    1d98:	6f c0       	rjmp	.+222    	; 0x1e78 <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3f 83       	std	Y+7, r19	; 0x07
    1da2:	2e 83       	std	Y+6, r18	; 0x06
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	49 f1       	breq	.+82     	; 0x1e00 <DIO_VidSetPinDirection+0x88>
    1dae:	2e 81       	ldd	r18, Y+6	; 0x06
    1db0:	3f 81       	ldd	r19, Y+7	; 0x07
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <DIO_VidSetPinDirection+0x4a>
    1db8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dba:	9f 81       	ldd	r25, Y+7	; 0x07
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <DIO_VidSetPinDirection+0x60>
    1dc0:	d2 c0       	rjmp	.+420    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
    1dc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	71 f1       	breq	.+92     	; 0x1e28 <DIO_VidSetPinDirection+0xb0>
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	e9 f1       	breq	.+122    	; 0x1e50 <DIO_VidSetPinDirection+0xd8>
    1dd6:	c7 c0       	rjmp	.+398    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    1dd8:	aa e3       	ldi	r26, 0x3A	; 58
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ea e3       	ldi	r30, 0x3A	; 58
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <DIO_VidSetPinDirection+0x7e>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <DIO_VidSetPinDirection+0x7a>
    1dfa:	84 2b       	or	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	b3 c0       	rjmp	.+358    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    1e00:	a7 e3       	ldi	r26, 0x37	; 55
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e7 e3       	ldi	r30, 0x37	; 55
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_VidSetPinDirection+0xa6>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_VidSetPinDirection+0xa2>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	9f c0       	rjmp	.+318    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    1e28:	a4 e3       	ldi	r26, 0x34	; 52
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e4 e3       	ldi	r30, 0x34	; 52
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_VidSetPinDirection+0xce>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_VidSetPinDirection+0xca>
    1e4a:	84 2b       	or	r24, r20
    1e4c:	8c 93       	st	X, r24
    1e4e:	8b c0       	rjmp	.+278    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1e50:	a1 e3       	ldi	r26, 0x31	; 49
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e1 e3       	ldi	r30, 0x31	; 49
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_VidSetPinDirection+0xf6>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_VidSetPinDirection+0xf2>
    1e72:	84 2b       	or	r24, r20
    1e74:	8c 93       	st	X, r24
    1e76:	77 c0       	rjmp	.+238    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <DIO_VidSetPinDirection+0x108>
    1e7e:	73 c0       	rjmp	.+230    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	59 f1       	breq	.+86     	; 0x1eea <DIO_VidSetPinDirection+0x172>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <DIO_VidSetPinDirection+0x130>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f0       	breq	.+26     	; 0x1ec0 <DIO_VidSetPinDirection+0x148>
    1ea6:	5f c0       	rjmp	.+190    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	89 f1       	breq	.+98     	; 0x1f14 <DIO_VidSetPinDirection+0x19c>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <DIO_VidSetPinDirection+0x146>
    1ebc:	40 c0       	rjmp	.+128    	; 0x1f3e <DIO_VidSetPinDirection+0x1c6>
    1ebe:	53 c0       	rjmp	.+166    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1ec0:	aa e3       	ldi	r26, 0x3A	; 58
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ea e3       	ldi	r30, 0x3A	; 58
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_VidSetPinDirection+0x166>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_VidSetPinDirection+0x162>
    1ee2:	80 95       	com	r24
    1ee4:	84 23       	and	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	3e c0       	rjmp	.+124    	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    1eea:	a7 e3       	ldi	r26, 0x37	; 55
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e7 e3       	ldi	r30, 0x37	; 55
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_VidSetPinDirection+0x190>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_VidSetPinDirection+0x18c>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	29 c0       	rjmp	.+82     	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1f14:	a4 e3       	ldi	r26, 0x34	; 52
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e4 e3       	ldi	r30, 0x34	; 52
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_VidSetPinDirection+0x1ba>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_VidSetPinDirection+0x1b6>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1f3e:	a1 e3       	ldi	r26, 0x31	; 49
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e1 e3       	ldi	r30, 0x31	; 49
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <DIO_VidSetPinDirection+0x1e4>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <DIO_VidSetPinDirection+0x1e0>
    1f60:	80 95       	com	r24
    1f62:	84 23       	and	r24, r20
    1f64:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1f66:	27 96       	adiw	r28, 0x07	; 7
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	27 97       	sbiw	r28, 0x07	; 7
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	6a 83       	std	Y+2, r22	; 0x02
    1f90:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <DIO_VidSetPinValue+0x22>
    1f98:	6f c0       	rjmp	.+222    	; 0x2078 <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3f 83       	std	Y+7, r19	; 0x07
    1fa2:	2e 83       	std	Y+6, r18	; 0x06
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	91 05       	cpc	r25, r1
    1fac:	49 f1       	breq	.+82     	; 0x2000 <DIO_VidSetPinValue+0x88>
    1fae:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb2:	22 30       	cpi	r18, 0x02	; 2
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <DIO_VidSetPinValue+0x4a>
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <DIO_VidSetPinValue+0x60>
    1fc0:	d2 c0       	rjmp	.+420    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
    1fc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	71 f1       	breq	.+92     	; 0x2028 <DIO_VidSetPinValue+0xb0>
    1fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fce:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd0:	83 30       	cpi	r24, 0x03	; 3
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	e9 f1       	breq	.+122    	; 0x2050 <DIO_VidSetPinValue+0xd8>
    1fd6:	c7 c0       	rjmp	.+398    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1fd8:	ab e3       	ldi	r26, 0x3B	; 59
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	eb e3       	ldi	r30, 0x3B	; 59
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_VidSetPinValue+0x7e>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <DIO_VidSetPinValue+0x7a>
    1ffa:	84 2b       	or	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	b3 c0       	rjmp	.+358    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    2000:	a8 e3       	ldi	r26, 0x38	; 56
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e8 e3       	ldi	r30, 0x38	; 56
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <DIO_VidSetPinValue+0xa6>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <DIO_VidSetPinValue+0xa2>
    2022:	84 2b       	or	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	9f c0       	rjmp	.+318    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    2028:	a5 e3       	ldi	r26, 0x35	; 53
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e5 e3       	ldi	r30, 0x35	; 53
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <DIO_VidSetPinValue+0xce>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <DIO_VidSetPinValue+0xca>
    204a:	84 2b       	or	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	8b c0       	rjmp	.+278    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    2050:	a2 e3       	ldi	r26, 0x32	; 50
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_VidSetPinValue+0xf6>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_VidSetPinValue+0xf2>
    2072:	84 2b       	or	r24, r20
    2074:	8c 93       	st	X, r24
    2076:	77 c0       	rjmp	.+238    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	88 23       	and	r24, r24
    207c:	09 f0       	breq	.+2      	; 0x2080 <DIO_VidSetPinValue+0x108>
    207e:	73 c0       	rjmp	.+230    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	59 f1       	breq	.+86     	; 0x20ea <DIO_VidSetPinValue+0x172>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	2c f4       	brge	.+10     	; 0x20a8 <DIO_VidSetPinValue+0x130>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f0       	breq	.+26     	; 0x20c0 <DIO_VidSetPinValue+0x148>
    20a6:	5f c0       	rjmp	.+190    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
    20a8:	2c 81       	ldd	r18, Y+4	; 0x04
    20aa:	3d 81       	ldd	r19, Y+5	; 0x05
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	89 f1       	breq	.+98     	; 0x2114 <DIO_VidSetPinValue+0x19c>
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	9d 81       	ldd	r25, Y+5	; 0x05
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	91 05       	cpc	r25, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <DIO_VidSetPinValue+0x146>
    20bc:	40 c0       	rjmp	.+128    	; 0x213e <DIO_VidSetPinValue+0x1c6>
    20be:	53 c0       	rjmp	.+166    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_VidSetPinValue+0x166>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_VidSetPinValue+0x162>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	3e c0       	rjmp	.+124    	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    20ea:	a8 e3       	ldi	r26, 0x38	; 56
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e8 e3       	ldi	r30, 0x38	; 56
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 2e       	mov	r0, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_VidSetPinValue+0x190>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_VidSetPinValue+0x18c>
    210c:	80 95       	com	r24
    210e:	84 23       	and	r24, r20
    2110:	8c 93       	st	X, r24
    2112:	29 c0       	rjmp	.+82     	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    2114:	a5 e3       	ldi	r26, 0x35	; 53
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e3       	ldi	r30, 0x35	; 53
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	48 2f       	mov	r20, r24
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 2e       	mov	r0, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <DIO_VidSetPinValue+0x1ba>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <DIO_VidSetPinValue+0x1b6>
    2136:	80 95       	com	r24
    2138:	84 23       	and	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <DIO_VidSetPinValue+0x1e4>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <DIO_VidSetPinValue+0x1e0>
    2160:	80 95       	com	r24
    2162:	84 23       	and	r24, r20
    2164:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    2166:	27 96       	adiw	r28, 0x07	; 7
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <DIO_VidSetPortDirection+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <DIO_VidSetPortDirection+0x8>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <DIO_VidSetPortDirection+0x58>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <DIO_VidSetPortDirection+0x38>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <DIO_VidSetPortDirection+0x4e>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <DIO_VidSetPortDirection+0x74>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <DIO_VidSetPortDirection+0x62>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <DIO_VidSetPortDirection+0x6c>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    21c6:	ea e3       	ldi	r30, 0x3A	; 58
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	80 83       	st	Z, r24
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    21d0:	e7 e3       	ldi	r30, 0x37	; 55
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 83       	st	Z, r24
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    21da:	e4 e3       	ldi	r30, 0x34	; 52
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    21e4:	e1 e3       	ldi	r30, 0x31	; 49
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 83       	st	Z, r24
	}	
	
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <DIO_VidSetPortValue+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DIO_VidSetPortValue+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3c 83       	std	Y+4, r19	; 0x04
    2212:	2b 83       	std	Y+3, r18	; 0x03
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	d1 f0       	breq	.+52     	; 0x2252 <DIO_VidSetPortValue+0x58>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	2c f4       	brge	.+10     	; 0x2232 <DIO_VidSetPortValue+0x38>
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	61 f0       	breq	.+24     	; 0x2248 <DIO_VidSetPortValue+0x4e>
    2230:	1e c0       	rjmp	.+60     	; 0x226e <DIO_VidSetPortValue+0x74>
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	81 f0       	breq	.+32     	; 0x225c <DIO_VidSetPortValue+0x62>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	91 05       	cpc	r25, r1
    2244:	81 f0       	breq	.+32     	; 0x2266 <DIO_VidSetPortValue+0x6c>
    2246:	13 c0       	rjmp	.+38     	; 0x226e <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	80 83       	st	Z, r24
    2250:	0e c0       	rjmp	.+28     	; 0x226e <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    2252:	e8 e3       	ldi	r30, 0x38	; 56
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	80 83       	st	Z, r24
    225a:	09 c0       	rjmp	.+18     	; 0x226e <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    225c:	e5 e3       	ldi	r30, 0x35	; 53
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	80 83       	st	Z, r24
    2264:	04 c0       	rjmp	.+8      	; 0x226e <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    2266:	e2 e3       	ldi	r30, 0x32	; 50
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	80 83       	st	Z, r24
	}	
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <DIO_u8GetPinValue+0x6>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <DIO_u8GetPinValue+0x8>
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    228e:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3d 83       	std	Y+5, r19	; 0x05
    2298:	2c 83       	std	Y+4, r18	; 0x04
    229a:	4c 81       	ldd	r20, Y+4	; 0x04
    229c:	5d 81       	ldd	r21, Y+5	; 0x05
    229e:	41 30       	cpi	r20, 0x01	; 1
    22a0:	51 05       	cpc	r21, r1
    22a2:	41 f1       	breq	.+80     	; 0x22f4 <DIO_u8GetPinValue+0x78>
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	9d 81       	ldd	r25, Y+5	; 0x05
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	91 05       	cpc	r25, r1
    22ac:	34 f4       	brge	.+12     	; 0x22ba <DIO_u8GetPinValue+0x3e>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	21 15       	cp	r18, r1
    22b4:	31 05       	cpc	r19, r1
    22b6:	61 f0       	breq	.+24     	; 0x22d0 <DIO_u8GetPinValue+0x54>
    22b8:	52 c0       	rjmp	.+164    	; 0x235e <DIO_u8GetPinValue+0xe2>
    22ba:	4c 81       	ldd	r20, Y+4	; 0x04
    22bc:	5d 81       	ldd	r21, Y+5	; 0x05
    22be:	42 30       	cpi	r20, 0x02	; 2
    22c0:	51 05       	cpc	r21, r1
    22c2:	51 f1       	breq	.+84     	; 0x2318 <DIO_u8GetPinValue+0x9c>
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	9d 81       	ldd	r25, Y+5	; 0x05
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	91 05       	cpc	r25, r1
    22cc:	b9 f1       	breq	.+110    	; 0x233c <DIO_u8GetPinValue+0xc0>
    22ce:	47 c0       	rjmp	.+142    	; 0x235e <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    22d0:	e9 e3       	ldi	r30, 0x39	; 57
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <DIO_u8GetPinValue+0x6c>
    22e4:	55 95       	asr	r21
    22e6:	47 95       	ror	r20
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <DIO_u8GetPinValue+0x68>
    22ec:	ca 01       	movw	r24, r20
    22ee:	81 70       	andi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	35 c0       	rjmp	.+106    	; 0x235e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    22f4:	e6 e3       	ldi	r30, 0x36	; 54
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a9 01       	movw	r20, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <DIO_u8GetPinValue+0x90>
    2308:	55 95       	asr	r21
    230a:	47 95       	ror	r20
    230c:	8a 95       	dec	r24
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <DIO_u8GetPinValue+0x8c>
    2310:	ca 01       	movw	r24, r20
    2312:	81 70       	andi	r24, 0x01	; 1
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	23 c0       	rjmp	.+70     	; 0x235e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    2318:	e3 e3       	ldi	r30, 0x33	; 51
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a9 01       	movw	r20, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_u8GetPinValue+0xb4>
    232c:	55 95       	asr	r21
    232e:	47 95       	ror	r20
    2330:	8a 95       	dec	r24
    2332:	e2 f7       	brpl	.-8      	; 0x232c <DIO_u8GetPinValue+0xb0>
    2334:	ca 01       	movw	r24, r20
    2336:	81 70       	andi	r24, 0x01	; 1
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	11 c0       	rjmp	.+34     	; 0x235e <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    233c:	e0 e3       	ldi	r30, 0x30	; 48
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a9 01       	movw	r20, r18
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <DIO_u8GetPinValue+0xd8>
    2350:	55 95       	asr	r21
    2352:	47 95       	ror	r20
    2354:	8a 95       	dec	r24
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <DIO_u8GetPinValue+0xd4>
    2358:	ca 01       	movw	r24, r20
    235a:	81 70       	andi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <DIO_u8TogglePinValue+0x6>
    2376:	00 d0       	rcall	.+0      	; 0x2378 <DIO_u8TogglePinValue+0x8>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3c 83       	std	Y+4, r19	; 0x04
    2388:	2b 83       	std	Y+3, r18	; 0x03
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	91 05       	cpc	r25, r1
    2392:	49 f1       	breq	.+82     	; 0x23e6 <DIO_u8TogglePinValue+0x76>
    2394:	2b 81       	ldd	r18, Y+3	; 0x03
    2396:	3c 81       	ldd	r19, Y+4	; 0x04
    2398:	22 30       	cpi	r18, 0x02	; 2
    239a:	31 05       	cpc	r19, r1
    239c:	2c f4       	brge	.+10     	; 0x23a8 <DIO_u8TogglePinValue+0x38>
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	61 f0       	breq	.+24     	; 0x23be <DIO_u8TogglePinValue+0x4e>
    23a6:	5a c0       	rjmp	.+180    	; 0x245c <DIO_u8TogglePinValue+0xec>
    23a8:	2b 81       	ldd	r18, Y+3	; 0x03
    23aa:	3c 81       	ldd	r19, Y+4	; 0x04
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	71 f1       	breq	.+92     	; 0x240e <DIO_u8TogglePinValue+0x9e>
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	91 05       	cpc	r25, r1
    23ba:	e9 f1       	breq	.+122    	; 0x2436 <DIO_u8TogglePinValue+0xc6>
    23bc:	4f c0       	rjmp	.+158    	; 0x245c <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    23be:	ab e3       	ldi	r26, 0x3B	; 59
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	eb e3       	ldi	r30, 0x3B	; 59
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	48 2f       	mov	r20, r24
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 2e       	mov	r0, r18
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <DIO_u8TogglePinValue+0x6c>
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	0a 94       	dec	r0
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <DIO_u8TogglePinValue+0x68>
    23e0:	84 27       	eor	r24, r20
    23e2:	8c 93       	st	X, r24
    23e4:	3b c0       	rjmp	.+118    	; 0x245c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    23e6:	a8 e3       	ldi	r26, 0x38	; 56
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e8 e3       	ldi	r30, 0x38	; 56
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	48 2f       	mov	r20, r24
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 2e       	mov	r0, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <DIO_u8TogglePinValue+0x94>
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	0a 94       	dec	r0
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <DIO_u8TogglePinValue+0x90>
    2408:	84 27       	eor	r24, r20
    240a:	8c 93       	st	X, r24
    240c:	27 c0       	rjmp	.+78     	; 0x245c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    240e:	a5 e3       	ldi	r26, 0x35	; 53
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e5 e3       	ldi	r30, 0x35	; 53
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	48 2f       	mov	r20, r24
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	02 2e       	mov	r0, r18
    2426:	02 c0       	rjmp	.+4      	; 0x242c <DIO_u8TogglePinValue+0xbc>
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	0a 94       	dec	r0
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <DIO_u8TogglePinValue+0xb8>
    2430:	84 27       	eor	r24, r20
    2432:	8c 93       	st	X, r24
    2434:	13 c0       	rjmp	.+38     	; 0x245c <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    2436:	a2 e3       	ldi	r26, 0x32	; 50
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e2 e3       	ldi	r30, 0x32	; 50
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	48 2f       	mov	r20, r24
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 2e       	mov	r0, r18
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <DIO_u8TogglePinValue+0xe4>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	0a 94       	dec	r0
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <DIO_u8TogglePinValue+0xe0>
    2458:	84 27       	eor	r24, r20
    245a:	8c 93       	st	X, r24
	}
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <ADC_SetCallBack+0x6>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	90 93 86 01 	sts	0x0186, r25
    2480:	80 93 85 01 	sts	0x0185, r24
}
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    248e:	1f 92       	push	r1
    2490:	0f 92       	push	r0
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	0f 92       	push	r0
    2496:	11 24       	eor	r1, r1
    2498:	2f 93       	push	r18
    249a:	3f 93       	push	r19
    249c:	4f 93       	push	r20
    249e:	5f 93       	push	r21
    24a0:	6f 93       	push	r22
    24a2:	7f 93       	push	r23
    24a4:	8f 93       	push	r24
    24a6:	9f 93       	push	r25
    24a8:	af 93       	push	r26
    24aa:	bf 93       	push	r27
    24ac:	ef 93       	push	r30
    24ae:	ff 93       	push	r31
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    24b8:	80 91 85 01 	lds	r24, 0x0185
    24bc:	90 91 86 01 	lds	r25, 0x0186
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	29 f0       	breq	.+10     	; 0x24ce <__vector_16+0x40>
	{
		GPFunc();
    24c4:	e0 91 85 01 	lds	r30, 0x0185
    24c8:	f0 91 86 01 	lds	r31, 0x0186
    24cc:	09 95       	icall
	}
}
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	bf 91       	pop	r27
    24d8:	af 91       	pop	r26
    24da:	9f 91       	pop	r25
    24dc:	8f 91       	pop	r24
    24de:	7f 91       	pop	r23
    24e0:	6f 91       	pop	r22
    24e2:	5f 91       	pop	r21
    24e4:	4f 91       	pop	r20
    24e6:	3f 91       	pop	r19
    24e8:	2f 91       	pop	r18
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	0f 90       	pop	r0
    24f0:	1f 90       	pop	r1
    24f2:	18 95       	reti

000024f4 <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    24fc:	a7 e2       	ldi	r26, 0x27	; 39
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e7 e2       	ldi	r30, 0x27	; 39
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	80 64       	ori	r24, 0x40	; 64
    2508:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    250a:	a7 e2       	ldi	r26, 0x27	; 39
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e7 e2       	ldi	r30, 0x27	; 39
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	8f 77       	andi	r24, 0x7F	; 127
    2516:	8c 93       	st	X, r24
	#elif	ADC_Prescaler==ADC_Prescaler_4
			 CLR_BIT(ADCSRA,ADPS0);\
			 SET_BIT(ADCSRA,ADPS1);\
			 CLR_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_8
			 SET_BIT(ADCSRA,ADPS0);\
    2518:	a6 e2       	ldi	r26, 0x26	; 38
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e6 e2       	ldi	r30, 0x26	; 38
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	81 60       	ori	r24, 0x01	; 1
    2524:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    2526:	a6 e2       	ldi	r26, 0x26	; 38
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e6 e2       	ldi	r30, 0x26	; 38
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	82 60       	ori	r24, 0x02	; 2
    2532:	8c 93       	st	X, r24
			 CLR_BIT(ADCSRA,ADPS2);
    2534:	a6 e2       	ldi	r26, 0x26	; 38
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e6 e2       	ldi	r30, 0x26	; 38
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8b 7f       	andi	r24, 0xFB	; 251
    2540:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    2542:	a7 e2       	ldi	r26, 0x27	; 39
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 e2       	ldi	r30, 0x27	; 39
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8f 7d       	andi	r24, 0xDF	; 223
    254e:	8c 93       	st	X, r24
	#endif
	/***************ADC MODE******************/
	#if	ADC_Mode==ADC_Single_Conversion
		CLR_BIT(ADCSRA,ADATE);
	#elif	ADC_Mode==ADC_Free_Running
		SET_BIT(ADCSRA,ADATE);
    2550:	a6 e2       	ldi	r26, 0x26	; 38
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e6 e2       	ldi	r30, 0x26	; 38
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	80 62       	ori	r24, 0x20	; 32
    255c:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    255e:	a0 e5       	ldi	r26, 0x50	; 80
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e0 e5       	ldi	r30, 0x50	; 80
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8f 7d       	andi	r24, 0xDF	; 223
    256a:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS1);
    256c:	a0 e5       	ldi	r26, 0x50	; 80
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e0 e5       	ldi	r30, 0x50	; 80
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8f 7b       	andi	r24, 0xBF	; 191
    2578:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    257a:	a0 e5       	ldi	r26, 0x50	; 80
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e0 e5       	ldi	r30, 0x50	; 80
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8f 77       	andi	r24, 0x7F	; 127
    2586:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    2588:	a6 e2       	ldi	r26, 0x26	; 38
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e6 e2       	ldi	r30, 0x26	; 38
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	80 68       	ori	r24, 0x80	; 128
    2594:	8c 93       	st	X, r24
}
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    25a4:	a6 e2       	ldi	r26, 0x26	; 38
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e6 e2       	ldi	r30, 0x26	; 38
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	80 64       	ori	r24, 0x40	; 64
    25b0:	8c 93       	st	X, r24
}
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	0f 92       	push	r0
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    25c4:	a7 e2       	ldi	r26, 0x27	; 39
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e7 e2       	ldi	r30, 0x27	; 39
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 7e       	andi	r24, 0xE0	; 224
    25d0:	8c 93       	st	X, r24
	ADMUX|=Channal;
    25d2:	a7 e2       	ldi	r26, 0x27	; 39
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e7 e2       	ldi	r30, 0x27	; 39
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	90 81       	ld	r25, Z
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	89 2b       	or	r24, r25
    25e0:	8c 93       	st	X, r24
}
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    25f2:	a6 e2       	ldi	r26, 0x26	; 38
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e6 e2       	ldi	r30, 0x26	; 38
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	88 60       	ori	r24, 0x08	; 8
    25fe:	8c 93       	st	X, r24
}
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    260e:	e6 e2       	ldi	r30, 0x26	; 38
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	82 95       	swap	r24
    2616:	8f 70       	andi	r24, 0x0F	; 15
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	81 70       	andi	r24, 0x01	; 1
    261e:	90 70       	andi	r25, 0x00	; 0
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	a9 f3       	breq	.-22     	; 0x260e <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    2624:	a6 e2       	ldi	r26, 0x26	; 38
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e6 e2       	ldi	r30, 0x26	; 38
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 61       	ori	r24, 0x10	; 16
    2630:	8c 93       	st	X, r24
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <ADC_Get_Result+0x6>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    2646:	e4 e2       	ldi	r30, 0x24	; 36
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	e9 81       	ldd	r30, Y+1	; 0x01
    2650:	fa 81       	ldd	r31, Y+2	; 0x02
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	6c 97       	sbiw	r28, 0x1c	; 28
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	62 e0       	ldi	r22, 0x02	; 2
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e8       	ldi	r26, 0x80	; 128
    2684:	bf e3       	ldi	r27, 0x3F	; 63
    2686:	89 8f       	std	Y+25, r24	; 0x19
    2688:	9a 8f       	std	Y+26, r25	; 0x1a
    268a:	ab 8f       	std	Y+27, r26	; 0x1b
    268c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	69 8d       	ldd	r22, Y+25	; 0x19
    2690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8d 8b       	std	Y+21, r24	; 0x15
    26a8:	9e 8b       	std	Y+22, r25	; 0x16
    26aa:	af 8b       	std	Y+23, r26	; 0x17
    26ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ae:	6d 89       	ldd	r22, Y+21	; 0x15
    26b0:	7e 89       	ldd	r23, Y+22	; 0x16
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	98 8d       	ldd	r25, Y+24	; 0x18
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_VidPulseEnable+0xd0>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9a 8b       	std	Y+18, r25	; 0x12
    2718:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    271a:	89 89       	ldd	r24, Y+17	; 0x11
    271c:	9a 89       	ldd	r25, Y+18	; 0x12
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_VidPulseEnable+0xbe>
    2722:	9a 8b       	std	Y+18, r25	; 0x12
    2724:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9c 8b       	std	Y+20, r25	; 0x14
    272e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8b 89       	ldd	r24, Y+19	; 0x13
    2732:	9c 89       	ldd	r25, Y+20	; 0x14
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <LCD_VidPulseEnable+0xb2>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6d 89       	ldd	r22, Y+21	; 0x15
    273c:	7e 89       	ldd	r23, Y+22	; 0x16
    273e:	8f 89       	ldd	r24, Y+23	; 0x17
    2740:	98 8d       	ldd	r25, Y+24	; 0x18
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	98 8b       	std	Y+16, r25	; 0x10
    2754:	8f 87       	std	Y+15, r24	; 0x0f
    2756:	8f 85       	ldd	r24, Y+15	; 0x0f
    2758:	98 89       	ldd	r25, Y+16	; 0x10
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_VidPulseEnable+0xfa>
    275e:	98 8b       	std	Y+16, r25	; 0x10
    2760:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	62 e0       	ldi	r22, 0x02	; 2
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e8       	ldi	r26, 0x80	; 128
    2772:	bf e3       	ldi	r27, 0x3F	; 63
    2774:	8b 87       	std	Y+11, r24	; 0x0b
    2776:	9c 87       	std	Y+12, r25	; 0x0c
    2778:	ad 87       	std	Y+13, r26	; 0x0d
    277a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8f 83       	std	Y+7, r24	; 0x07
    2796:	98 87       	std	Y+8, r25	; 0x08
    2798:	a9 87       	std	Y+9, r26	; 0x09
    279a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279c:	6f 81       	ldd	r22, Y+7	; 0x07
    279e:	78 85       	ldd	r23, Y+8	; 0x08
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_VidPulseEnable+0x1be>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_VidPulseEnable+0x1ac>
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_VidPulseEnable+0x1a0>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_VidPulseEnable+0x1e8>
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2850:	6c 96       	adiw	r28, 0x1c	; 28
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <LCD_VidInit>:
void LCD_VidInit(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	e8 97       	sbiw	r28, 0x38	; 56
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a8 e4       	ldi	r26, 0x48	; 72
    287c:	b2 e4       	ldi	r27, 0x42	; 66
    287e:	8d ab       	std	Y+53, r24	; 0x35
    2880:	9e ab       	std	Y+54, r25	; 0x36
    2882:	af ab       	std	Y+55, r26	; 0x37
    2884:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6d a9       	ldd	r22, Y+53	; 0x35
    2888:	7e a9       	ldd	r23, Y+54	; 0x36
    288a:	8f a9       	ldd	r24, Y+55	; 0x37
    288c:	98 ad       	ldd	r25, Y+56	; 0x38
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	89 ab       	std	Y+49, r24	; 0x31
    28a0:	9a ab       	std	Y+50, r25	; 0x32
    28a2:	ab ab       	std	Y+51, r26	; 0x33
    28a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_VidInit+0x66>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    28c8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ca:	7a a9       	ldd	r23, Y+50	; 0x32
    28cc:	8b a9       	ldd	r24, Y+51	; 0x33
    28ce:	9c a9       	ldd	r25, Y+52	; 0x34
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6d a9       	ldd	r22, Y+53	; 0x35
    28e2:	7e a9       	ldd	r23, Y+54	; 0x36
    28e4:	8f a9       	ldd	r24, Y+55	; 0x37
    28e6:	98 ad       	ldd	r25, Y+56	; 0x38
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_VidInit+0xc6>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
    2912:	8d a5       	ldd	r24, Y+45	; 0x2d
    2914:	9e a5       	ldd	r25, Y+46	; 0x2e
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_VidInit+0xb4>
    291a:	9e a7       	std	Y+46, r25	; 0x2e
    291c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2920:	98 a9       	ldd	r25, Y+48	; 0x30
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_VidInit+0xa8>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	98 ab       	std	Y+48, r25	; 0x30
    2944:	8f a7       	std	Y+47, r24	; 0x2f
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
    294e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2950:	9c a5       	ldd	r25, Y+44	; 0x2c
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_VidInit+0xf0>
    2956:	9c a7       	std	Y+44, r25	; 0x2c
    2958:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		/* END OF DISPLAY CLEAR */

#elif MODE==8
	  /*set direction*/
		DIO_VidSetPortDirection(LCD_DATA_PORT,0XFF);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	6f ef       	ldi	r22, 0xFF	; 255
    295e:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_VidSetPortDirection>
		DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	67 e0       	ldi	r22, 0x07	; 7
    2966:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_VidSetPortDirection>

		LCD_VidWriteCommend(0B00111000);//function set
    296a:	88 e3       	ldi	r24, 0x38	; 56
    296c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	8f a3       	std	Y+39, r24	; 0x27
    297a:	98 a7       	std	Y+40, r25	; 0x28
    297c:	a9 a7       	std	Y+41, r26	; 0x29
    297e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6f a1       	ldd	r22, Y+39	; 0x27
    2982:	78 a5       	ldd	r23, Y+40	; 0x28
    2984:	89 a5       	ldd	r24, Y+41	; 0x29
    2986:	9a a5       	ldd	r25, Y+42	; 0x2a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8b a3       	std	Y+35, r24	; 0x23
    299a:	9c a3       	std	Y+36, r25	; 0x24
    299c:	ad a3       	std	Y+37, r26	; 0x25
    299e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a0:	6b a1       	ldd	r22, Y+35	; 0x23
    29a2:	7c a1       	ldd	r23, Y+36	; 0x24
    29a4:	8d a1       	ldd	r24, Y+37	; 0x25
    29a6:	9e a1       	ldd	r25, Y+38	; 0x26
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <LCD_VidInit+0x160>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_VidInit+0x1de>
	else if (__tmp > 65535)
    29c2:	6b a1       	ldd	r22, Y+35	; 0x23
    29c4:	7c a1       	ldd	r23, Y+36	; 0x24
    29c6:	8d a1       	ldd	r24, Y+37	; 0x25
    29c8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <LCD_VidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6f a1       	ldd	r22, Y+39	; 0x27
    29dc:	78 a5       	ldd	r23, Y+40	; 0x28
    29de:	89 a5       	ldd	r24, Y+41	; 0x29
    29e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9a a3       	std	Y+34, r25	; 0x22
    2a00:	89 a3       	std	Y+33, r24	; 0x21
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <LCD_VidInit+0x1c0>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	98 a3       	std	Y+32, r25	; 0x20
    2a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_VidInit+0x1ae>
    2a14:	98 a3       	std	Y+32, r25	; 0x20
    2a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9a a3       	std	Y+34, r25	; 0x22
    2a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	89 a1       	ldd	r24, Y+33	; 0x21
    2a24:	9a a1       	ldd	r25, Y+34	; 0x22
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <LCD_VidInit+0x1a2>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <LCD_VidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a30:	8d a1       	ldd	r24, Y+37	; 0x25
    2a32:	9e a1       	ldd	r25, Y+38	; 0x26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	89 a1       	ldd	r24, Y+33	; 0x21
    2a42:	9a a1       	ldd	r25, Y+34	; 0x22
    2a44:	9e 8f       	std	Y+30, r25	; 0x1e
    2a46:	8d 8f       	std	Y+29, r24	; 0x1d
    2a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_VidInit+0x1ea>
    2a50:	9e 8f       	std	Y+30, r25	; 0x1e
    2a52:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidWriteCommend(0B00001100);//screen on
    2a54:	8c e0       	ldi	r24, 0x0C	; 12
    2a56:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e8       	ldi	r26, 0x80	; 128
    2a60:	bf e3       	ldi	r27, 0x3F	; 63
    2a62:	89 8f       	std	Y+25, r24	; 0x19
    2a64:	9a 8f       	std	Y+26, r25	; 0x1a
    2a66:	ab 8f       	std	Y+27, r26	; 0x1b
    2a68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a ef       	ldi	r20, 0xFA	; 250
    2a78:	54 e4       	ldi	r21, 0x44	; 68
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8d 8b       	std	Y+21, r24	; 0x15
    2a84:	9e 8b       	std	Y+22, r25	; 0x16
    2a86:	af 8b       	std	Y+23, r26	; 0x17
    2a88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	5f e3       	ldi	r21, 0x3F	; 63
    2a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <LCD_VidInit+0x24a>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <LCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    2aac:	6d 89       	ldd	r22, Y+21	; 0x15
    2aae:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <LCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e2       	ldi	r20, 0x20	; 32
    2ad2:	51 e4       	ldi	r21, 0x41	; 65
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <LCD_VidInit+0x2aa>
    2aee:	88 ec       	ldi	r24, 0xC8	; 200
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9a 8b       	std	Y+18, r25	; 0x12
    2af4:	89 8b       	std	Y+17, r24	; 0x11
    2af6:	89 89       	ldd	r24, Y+17	; 0x11
    2af8:	9a 89       	ldd	r25, Y+18	; 0x12
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_VidInit+0x298>
    2afe:	9a 8b       	std	Y+18, r25	; 0x12
    2b00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	8b 89       	ldd	r24, Y+19	; 0x13
    2b04:	9c 89       	ldd	r25, Y+20	; 0x14
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f7       	brne	.-38     	; 0x2aee <LCD_VidInit+0x28c>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <LCD_VidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9c 8b       	std	Y+20, r25	; 0x14
    2b28:	8b 8b       	std	Y+19, r24	; 0x13
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2e:	98 8b       	std	Y+16, r25	; 0x10
    2b30:	8f 87       	std	Y+15, r24	; 0x0f
    2b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b34:	98 89       	ldd	r25, Y+16	; 0x10
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_VidInit+0x2d4>
    2b3a:	98 8b       	std	Y+16, r25	; 0x10
    2b3c:	8f 87       	std	Y+15, r24	; 0x0f
	          _delay_ms(1);
		LCD_VidWriteCommend(0B00000001);//clear display
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e0       	ldi	r26, 0x00	; 0
    2b4a:	b0 e4       	ldi	r27, 0x40	; 64
    2b4c:	8b 87       	std	Y+11, r24	; 0x0b
    2b4e:	9c 87       	std	Y+12, r25	; 0x0c
    2b50:	ad 87       	std	Y+13, r26	; 0x0d
    2b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8f 83       	std	Y+7, r24	; 0x07
    2b6e:	98 87       	std	Y+8, r25	; 0x08
    2b70:	a9 87       	std	Y+9, r26	; 0x09
    2b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <LCD_VidInit+0x334>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <LCD_VidInit+0x3b2>
	else if (__tmp > 65535)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <LCD_VidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <LCD_VidInit+0x394>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_VidInit+0x382>
    2be8:	9c 83       	std	Y+4, r25	; 0x04
    2bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <LCD_VidInit+0x376>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <LCD_VidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_VidInit+0x3be>
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
	          _delay_ms(2);
		LCD_VidWriteCommend(0B00000110);//Mode Set
    2c28:	86 e0       	ldi	r24, 0x06	; 6
    2c2a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000010);//Return Home
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2c40:	e8 96       	adiw	r28, 0x38	; 56
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	0f 92       	push	r0
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	89 83       	std	Y+1, r24	; 0x01
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();	
#elif MODE==8
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN0,0);  //RS=0
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN1,0);  //RW=0
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	61 e0       	ldi	r22, 0x01	; 1
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	69 81       	ldd	r22, Y+1	; 0x01
    2c76:	0e 94 fd 10 	call	0x21fa	; 0x21fa <DIO_VidSetPortValue>

	LCD_VidPulseEnable();
    2c7a:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_VidPulseEnable>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	6d 97       	sbiw	r28, 0x1d	; 29
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	8d 8f       	std	Y+29, r24	; 0x1d
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();
#elif MODE==8
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1);  //RS=0
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2cb4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	62 e0       	ldi	r22, 0x02	; 2
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	a0 e8       	ldi	r26, 0x80	; 128
    2cc8:	bf e3       	ldi	r27, 0x3F	; 63
    2cca:	89 8f       	std	Y+25, r24	; 0x19
    2ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cce:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a ef       	ldi	r20, 0xFA	; 250
    2ce0:	54 e4       	ldi	r21, 0x44	; 68
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8d 8b       	std	Y+21, r24	; 0x15
    2cec:	9e 8b       	std	Y+22, r25	; 0x16
    2cee:	af 8b       	std	Y+23, r26	; 0x17
    2cf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    2d14:	6d 89       	ldd	r22, Y+21	; 0x15
    2d16:	7e 89       	ldd	r23, Y+22	; 0x16
    2d18:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9c 8b       	std	Y+20, r25	; 0x14
    2d52:	8b 8b       	std	Y+19, r24	; 0x13
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <LCD_VidWriteData+0xee>
    2d56:	88 ec       	ldi	r24, 0xC8	; 200
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9a 8b       	std	Y+18, r25	; 0x12
    2d5c:	89 8b       	std	Y+17, r24	; 0x11
    2d5e:	89 89       	ldd	r24, Y+17	; 0x11
    2d60:	9a 89       	ldd	r25, Y+18	; 0x12
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <LCD_VidWriteData+0xdc>
    2d66:	9a 8b       	std	Y+18, r25	; 0x12
    2d68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9c 8b       	std	Y+20, r25	; 0x14
    2d72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	8b 89       	ldd	r24, Y+19	; 0x13
    2d76:	9c 89       	ldd	r25, Y+20	; 0x14
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <LCD_VidWriteData+0xd0>
    2d7c:	14 c0       	rjmp	.+40     	; 0x2da6 <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d80:	7e 89       	ldd	r23, Y+22	; 0x16
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	98 8d       	ldd	r25, Y+24	; 0x18
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9c 8b       	std	Y+20, r25	; 0x14
    2d90:	8b 8b       	std	Y+19, r24	; 0x13
    2d92:	8b 89       	ldd	r24, Y+19	; 0x13
    2d94:	9c 89       	ldd	r25, Y+20	; 0x14
    2d96:	98 8b       	std	Y+16, r25	; 0x10
    2d98:	8f 87       	std	Y+15, r24	; 0x0f
    2d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9c:	98 89       	ldd	r25, Y+16	; 0x10
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <LCD_VidWriteData+0x118>
    2da2:	98 8b       	std	Y+16, r25	; 0x10
    2da4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	62 e0       	ldi	r22, 0x02	; 2
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	a0 e8       	ldi	r26, 0x80	; 128
    2db6:	bf e3       	ldi	r27, 0x3F	; 63
    2db8:	8b 87       	std	Y+11, r24	; 0x0b
    2dba:	9c 87       	std	Y+12, r25	; 0x0c
    2dbc:	ad 87       	std	Y+13, r26	; 0x0d
    2dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	4a ef       	ldi	r20, 0xFA	; 250
    2dce:	54 e4       	ldi	r21, 0x44	; 68
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	8f 83       	std	Y+7, r24	; 0x07
    2dda:	98 87       	std	Y+8, r25	; 0x08
    2ddc:	a9 87       	std	Y+9, r26	; 0x09
    2dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de0:	6f 81       	ldd	r22, Y+7	; 0x07
    2de2:	78 85       	ldd	r23, Y+8	; 0x08
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	2c f4       	brge	.+10     	; 0x2e02 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	3f c0       	rjmp	.+126    	; 0x2e80 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    2e02:	6f 81       	ldd	r22, Y+7	; 0x07
    2e04:	78 85       	ldd	r23, Y+8	; 0x08
    2e06:	89 85       	ldd	r24, Y+9	; 0x09
    2e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	3f ef       	ldi	r19, 0xFF	; 255
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	57 e4       	ldi	r21, 0x47	; 71
    2e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e16:	18 16       	cp	r1, r24
    2e18:	4c f5       	brge	.+82     	; 0x2e6c <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e2       	ldi	r20, 0x20	; 32
    2e28:	51 e4       	ldi	r21, 0x41	; 65
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	0f c0       	rjmp	.+30     	; 0x2e62 <LCD_VidWriteData+0x1dc>
    2e44:	88 ec       	ldi	r24, 0xC8	; 200
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD_VidWriteData+0x1ca>
    2e54:	9c 83       	std	Y+4, r25	; 0x04
    2e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	69 f7       	brne	.-38     	; 0x2e44 <LCD_VidWriteData+0x1be>
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_VidWriteData+0x206>
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2e94:	6d 96       	adiw	r28, 0x1d	; 29
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <LCD_VidWriteString>:


void LCD_VidWriteString(char *ptr)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <LCD_VidWriteString+0x6>
    2eac:	0f 92       	push	r0
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9b 83       	std	Y+3, r25	; 0x03
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;i<100;i++)
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	19 c0       	rjmp	.+50     	; 0x2eec <LCD_VidWriteString+0x46>
	{
		if(ptr[i]=='\0')
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e2 0f       	add	r30, r18
    2ec8:	f3 1f       	adc	r31, r19
    2eca:	80 81       	ld	r24, Z
    2ecc:	88 23       	and	r24, r24
    2ece:	89 f0       	breq	.+34     	; 0x2ef2 <LCD_VidWriteString+0x4c>
		    {
		    	break;
		    }
	LCD_VidWriteData(ptr[i]);
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eda:	fc 01       	movw	r30, r24
    2edc:	e2 0f       	add	r30, r18
    2ede:	f3 1f       	adc	r31, r19
    2ee0:	80 81       	ld	r24, Z
    2ee2:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
}


void LCD_VidWriteString(char *ptr)
{
	for(u8 i=0;i<100;i++)
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	84 36       	cpi	r24, 0x64	; 100
    2ef0:	20 f3       	brcs	.-56     	; 0x2eba <LCD_VidWriteString+0x14>
		    }
	LCD_VidWriteData(ptr[i]);

	}

}
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	2c 97       	sbiw	r28, 0x0c	; 12
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	69 87       	std	Y+9, r22	; 0x09
    2f1c:	7a 87       	std	Y+10, r23	; 0x0a
    2f1e:	8b 87       	std	Y+11, r24	; 0x0b
    2f20:	9c 87       	std	Y+12, r25	; 0x0c
    2f22:	1d 82       	std	Y+5, r1	; 0x05
    2f24:	1e 82       	std	Y+6, r1	; 0x06
    2f26:	1f 82       	std	Y+7, r1	; 0x07
    2f28:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2f2a:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f32:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	a1 05       	cpc	r26, r1
    2f38:	b1 05       	cpc	r27, r1
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <LCD_VidWriteNumber+0x40>
    2f3c:	46 c0       	rjmp	.+140    	; 0x2fca <LCD_VidWriteNumber+0xcc>
{
	LCD_VidWriteData(48);
    2f3e:	80 e3       	ldi	r24, 0x30	; 48
    2f40:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
    2f44:	42 c0       	rjmp	.+132    	; 0x2fca <LCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	af 81       	ldd	r26, Y+7	; 0x07
    2f4c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f4e:	2a e0       	ldi	r18, 0x0A	; 10
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 38 1c 	call	0x3870	; 0x3870 <__mulsi3>
    2f5e:	7b 01       	movw	r14, r22
    2f60:	8c 01       	movw	r16, r24
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f68:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f6a:	2a e0       	ldi	r18, 0x0A	; 10
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodsi4>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8e 0d       	add	r24, r14
    2f80:	9f 1d       	adc	r25, r15
    2f82:	a0 1f       	adc	r26, r16
    2f84:	b1 1f       	adc	r27, r17
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	af 83       	std	Y+7, r26	; 0x07
    2f8c:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	af 81       	ldd	r26, Y+7	; 0x07
    2f94:	b8 85       	ldd	r27, Y+8	; 0x08
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	a1 05       	cpc	r26, r1
    2f9a:	b1 05       	cpc	r27, r1
    2f9c:	21 f4       	brne	.+8      	; 0x2fa6 <LCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2f9e:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	8f 5f       	subi	r24, 0xFF	; 255
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2faa:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fac:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fae:	2a e0       	ldi	r18, 0x0A	; 10
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodsi4>
    2fbe:	da 01       	movw	r26, r20
    2fc0:	c9 01       	movw	r24, r18
    2fc2:	89 87       	std	Y+9, r24	; 0x09
    2fc4:	9a 87       	std	Y+10, r25	; 0x0a
    2fc6:	ab 87       	std	Y+11, r26	; 0x0b
    2fc8:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_VidWriteData(48);
}
while(LOC_u32num>0)
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	a1 05       	cpc	r26, r1
    2fd6:	b1 05       	cpc	r27, r1
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <LCD_VidWriteNumber+0xde>
    2fda:	b5 cf       	rjmp	.-150    	; 0x2f46 <LCD_VidWriteNumber+0x48>
    2fdc:	25 c0       	rjmp	.+74     	; 0x3028 <LCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	af 81       	ldd	r26, Y+7	; 0x07
    2fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    2fe6:	2a e0       	ldi	r18, 0x0A	; 10
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodsi4>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(res+48);
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	80 5d       	subi	r24, 0xD0	; 208
    3000:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
	revrese=revrese/10;
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	af 81       	ldd	r26, Y+7	; 0x07
    300a:	b8 85       	ldd	r27, Y+8	; 0x08
    300c:	2a e0       	ldi	r18, 0x0A	; 10
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodsi4>
    301c:	da 01       	movw	r26, r20
    301e:	c9 01       	movw	r24, r18
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	af 83       	std	Y+7, r26	; 0x07
    3026:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	af 81       	ldd	r26, Y+7	; 0x07
    302e:	b8 85       	ldd	r27, Y+8	; 0x08
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	a1 05       	cpc	r26, r1
    3034:	b1 05       	cpc	r27, r1
    3036:	99 f6       	brne	.-90     	; 0x2fde <LCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
    3038:	8c 81       	ldd	r24, Y+4	; 0x04
    303a:	88 23       	and	r24, r24
    303c:	61 f4       	brne	.+24     	; 0x3056 <LCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	06 c0       	rjmp	.+12     	; 0x304e <LCD_VidWriteNumber+0x150>
	{
LCD_VidWriteData(48);
    3042:	80 e3       	ldi	r24, 0x30	; 48
    3044:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	99 81       	ldd	r25, Y+1	; 0x01
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	98 17       	cp	r25, r24
    3054:	b0 f3       	brcs	.-20     	; 0x3042 <LCD_VidWriteNumber+0x144>
	{
LCD_VidWriteData(48);
	}
}
}
    3056:	2c 96       	adiw	r28, 0x0c	; 12
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	08 95       	ret

00003070 <LCD_GoToXY>:

void LCD_GoToXY(u8 row,u8 col)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	00 d0       	rcall	.+0      	; 0x3076 <LCD_GoToXY+0x6>
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	88 23       	and	r24, r24
    3082:	29 f4       	brne	.+10     	; 0x308e <LCD_GoToXY+0x1e>
	{
		LCD_VidWriteCommend(128+col);
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	80 58       	subi	r24, 0x80	; 128
    3088:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
    308c:	07 c0       	rjmp	.+14     	; 0x309c <LCD_GoToXY+0x2c>
	}
	else if (row==1)
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	81 30       	cpi	r24, 0x01	; 1
    3092:	21 f4       	brne	.+8      	; 0x309c <LCD_GoToXY+0x2c>
	{
		LCD_VidWriteCommend(192+col);
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	80 54       	subi	r24, 0x40	; 64
    3098:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
	}
}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <LCD_CLEAR>:

void LCD_CLEAR(u8 Row,u8 start,u8 end)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	2b 97       	sbiw	r28, 0x0b	; 11
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	89 87       	std	Y+9, r24	; 0x09
    30bc:	6a 87       	std	Y+10, r22	; 0x0a
    30be:	4b 87       	std	Y+11, r20	; 0x0b
	u8 empty[8]={0,0,0,0,0,0,0,0};
    30c0:	88 e0       	ldi	r24, 0x08	; 8
    30c2:	fe 01       	movw	r30, r28
    30c4:	31 96       	adiw	r30, 0x01	; 1
    30c6:	df 01       	movw	r26, r30
    30c8:	98 2f       	mov	r25, r24
    30ca:	1d 92       	st	X+, r1
    30cc:	9a 95       	dec	r25
    30ce:	e9 f7       	brne	.-6      	; 0x30ca <LCD_CLEAR+0x24>
	while(1)
	{
		LCD_VoidWriteSpecialCharacter(empty,0,Row,start);
    30d0:	ce 01       	movw	r24, r28
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	49 85       	ldd	r20, Y+9	; 0x09
    30d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    30da:	0e 94 7f 18 	call	0x30fe	; 0x30fe <LCD_VoidWriteSpecialCharacter>
		  start++;
    30de:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e0:	8f 5f       	subi	r24, 0xFF	; 255
    30e2:	8a 87       	std	Y+10, r24	; 0x0a
		  if(start==end)
    30e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    30e8:	98 17       	cp	r25, r24
    30ea:	91 f7       	brne	.-28     	; 0x30d0 <LCD_CLEAR+0x2a>
			  break;
		  }
	}


}
    30ec:	2b 96       	adiw	r28, 0x0b	; 11
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <LCD_VoidWriteSpecialCharacter>:
void LCD_VoidWriteSpecialCharacter(u8 *Copy_pPattern,u8 blockNo,u8 Copy_u8Row,u8 Copy_u8Col)
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	27 97       	sbiw	r28, 0x07	; 7
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	9c 83       	std	Y+4, r25	; 0x04
    3114:	8b 83       	std	Y+3, r24	; 0x03
    3116:	6d 83       	std	Y+5, r22	; 0x05
    3118:	4e 83       	std	Y+6, r20	; 0x06
    311a:	2f 83       	std	Y+7, r18	; 0x07
	/*this address to change address counter from DDRAM TO CGRAM*/
	/*every 8 Byte for one Special Character*/
	u8 address = blockNo*8+0x40;//0x040-->0b0100 0000
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	88 2f       	mov	r24, r24
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	08 96       	adiw	r24, 0x08	; 8
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteCommend(address);
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
	/*this loop for darw your Special Character in CGRAM*/
	for(u8 i=0;i<8;i++)
    3138:	19 82       	std	Y+1, r1	; 0x01
    313a:	0e c0       	rjmp	.+28     	; 0x3158 <LCD_VoidWriteSpecialCharacter+0x5a>
	{
		LCD_VidWriteData(Copy_pPattern[i]);
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	9c 81       	ldd	r25, Y+4	; 0x04
    3146:	fc 01       	movw	r30, r24
    3148:	e2 0f       	add	r30, r18
    314a:	f3 1f       	adc	r31, r19
    314c:	80 81       	ld	r24, Z
    314e:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
	/*this address to change address counter from DDRAM TO CGRAM*/
	/*every 8 Byte for one Special Character*/
	u8 address = blockNo*8+0x40;//0x040-->0b0100 0000
	LCD_VidWriteCommend(address);
	/*this loop for darw your Special Character in CGRAM*/
	for(u8 i=0;i<8;i++)
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	8f 5f       	subi	r24, 0xFF	; 255
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	88 30       	cpi	r24, 0x08	; 8
    315c:	78 f3       	brcs	.-34     	; 0x313c <LCD_VoidWriteSpecialCharacter+0x3e>
	{
		LCD_VidWriteData(Copy_pPattern[i]);
	}
	/*LCD_GoToXY Function to return address counter from CGRAM TO DDRAM*/
	LCD_GoToXY(Copy_u8Row,Copy_u8Col);
    315e:	8e 81       	ldd	r24, Y+6	; 0x06
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_GoToXY>
	/*When you send value from 0-->7 Without ASCII, LCD will know that you want to display pattern from CGRAM*/
	LCD_VidWriteData(blockNo);
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	0e 94 43 16 	call	0x2c86	; 0x2c86 <LCD_VidWriteData>
}
    316c:	27 96       	adiw	r28, 0x07	; 7
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <LCD_VoidClearDisplay>:
void LCD_VoidClearDisplay(void)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	2e 97       	sbiw	r28, 0x0e	; 14
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommend(0x01);
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_VidWriteCommend>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 ea       	ldi	r26, 0xA0	; 160
    319e:	b1 e4       	ldi	r27, 0x41	; 65
    31a0:	8b 87       	std	Y+11, r24	; 0x0b
    31a2:	9c 87       	std	Y+12, r25	; 0x0c
    31a4:	ad 87       	std	Y+13, r26	; 0x0d
    31a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	4a ef       	ldi	r20, 0xFA	; 250
    31b6:	54 e4       	ldi	r21, 0x44	; 68
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	8f 83       	std	Y+7, r24	; 0x07
    31c2:	98 87       	std	Y+8, r25	; 0x08
    31c4:	a9 87       	std	Y+9, r26	; 0x09
    31c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31c8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ca:	78 85       	ldd	r23, Y+8	; 0x08
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31dc:	88 23       	and	r24, r24
    31de:	2c f4       	brge	.+10     	; 0x31ea <LCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9e 83       	std	Y+6, r25	; 0x06
    31e6:	8d 83       	std	Y+5, r24	; 0x05
    31e8:	3f c0       	rjmp	.+126    	; 0x3268 <LCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	3f ef       	ldi	r19, 0xFF	; 255
    31f6:	4f e7       	ldi	r20, 0x7F	; 127
    31f8:	57 e4       	ldi	r21, 0x47	; 71
    31fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	4c f5       	brge	.+82     	; 0x3254 <LCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9e 83       	std	Y+6, r25	; 0x06
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	0f c0       	rjmp	.+30     	; 0x324a <LCD_VoidClearDisplay+0xcc>
    322c:	88 ec       	ldi	r24, 0xC8	; 200
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9c 83       	std	Y+4, r25	; 0x04
    3232:	8b 83       	std	Y+3, r24	; 0x03
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	9c 81       	ldd	r25, Y+4	; 0x04
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <LCD_VoidClearDisplay+0xba>
    323c:	9c 83       	std	Y+4, r25	; 0x04
    323e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3240:	8d 81       	ldd	r24, Y+5	; 0x05
    3242:	9e 81       	ldd	r25, Y+6	; 0x06
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	9e 83       	std	Y+6, r25	; 0x06
    3248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	69 f7       	brne	.-38     	; 0x322c <LCD_VoidClearDisplay+0xae>
    3252:	14 c0       	rjmp	.+40     	; 0x327c <LCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	6f 81       	ldd	r22, Y+7	; 0x07
    3256:	78 85       	ldd	r23, Y+8	; 0x08
    3258:	89 85       	ldd	r24, Y+9	; 0x09
    325a:	9a 85       	ldd	r25, Y+10	; 0x0a
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	8d 83       	std	Y+5, r24	; 0x05
    3268:	8d 81       	ldd	r24, Y+5	; 0x05
    326a:	9e 81       	ldd	r25, Y+6	; 0x06
    326c:	9a 83       	std	Y+2, r25	; 0x02
    326e:	89 83       	std	Y+1, r24	; 0x01
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	9a 81       	ldd	r25, Y+2	; 0x02
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD_VoidClearDisplay+0xf6>
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    327c:	2e 96       	adiw	r28, 0x0e	; 14
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	08 95       	ret

0000328e <KEYPAD_VidInit>:
#include "Keypad_Interface.h"



void KEYPAD_VidInit(void)
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
	/*we will set the first 4-pins as output by set 1 in direction*/
	 /*and set the second 4-pins as input by set 0 in direction*/
	DIO_VidSetPortDirection ( DIO_Keypad,0b00001111);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	6f e0       	ldi	r22, 0x0F	; 15
    329a:	0e 94 bc 10 	call	0x2178	; 0x2178 <DIO_VidSetPortDirection>
	/*the 4 input pins we will activate pull up resistor */
	/*the 4 output pins we will set value as 1*/
	DIO_VidSetPortValue	( DIO_Keypad, 0b11111111);
    329e:	82 e0       	ldi	r24, 0x02	; 2
    32a0:	6f ef       	ldi	r22, 0xFF	; 255
    32a2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <DIO_VidSetPortValue>
}
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <KEYPAD_GET_PressedKey>:
u8 KEYPAD_GET_PressedKey(void)
{   u8 keypad_array[4][4]={{ 1, 2, 3, 4},
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	a6 97       	sbiw	r28, 0x26	; 38
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
		                   { 5, 6, 7, 8},
						   { 9,10,11,12},
						   {13,14,15,16}};
    32c0:	ce 01       	movw	r24, r28
    32c2:	42 96       	adiw	r24, 0x12	; 18
    32c4:	9b a3       	std	Y+35, r25	; 0x23
    32c6:	8a a3       	std	Y+34, r24	; 0x22
    32c8:	e8 e6       	ldi	r30, 0x68	; 104
    32ca:	f1 e0       	ldi	r31, 0x01	; 1
    32cc:	fd a3       	std	Y+37, r31	; 0x25
    32ce:	ec a3       	std	Y+36, r30	; 0x24
    32d0:	f0 e1       	ldi	r31, 0x10	; 16
    32d2:	fe a3       	std	Y+38, r31	; 0x26
    32d4:	ec a1       	ldd	r30, Y+36	; 0x24
    32d6:	fd a1       	ldd	r31, Y+37	; 0x25
    32d8:	00 80       	ld	r0, Z
    32da:	8c a1       	ldd	r24, Y+36	; 0x24
    32dc:	9d a1       	ldd	r25, Y+37	; 0x25
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	9d a3       	std	Y+37, r25	; 0x25
    32e2:	8c a3       	std	Y+36, r24	; 0x24
    32e4:	ea a1       	ldd	r30, Y+34	; 0x22
    32e6:	fb a1       	ldd	r31, Y+35	; 0x23
    32e8:	00 82       	st	Z, r0
    32ea:	8a a1       	ldd	r24, Y+34	; 0x22
    32ec:	9b a1       	ldd	r25, Y+35	; 0x23
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	9b a3       	std	Y+35, r25	; 0x23
    32f2:	8a a3       	std	Y+34, r24	; 0x22
    32f4:	9e a1       	ldd	r25, Y+38	; 0x26
    32f6:	91 50       	subi	r25, 0x01	; 1
    32f8:	9e a3       	std	Y+38, r25	; 0x26
    32fa:	ee a1       	ldd	r30, Y+38	; 0x26
    32fc:	ee 23       	and	r30, r30
    32fe:	51 f7       	brne	.-44     	; 0x32d4 <KEYPAD_GET_PressedKey+0x28>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
    3300:	1f 86       	std	Y+15, r1	; 0x0f
	for(col=0;col<4;col++)
    3302:	19 8a       	std	Y+17, r1	; 0x11
    3304:	ad c0       	rjmp	.+346    	; 0x3460 <KEYPAD_GET_PressedKey+0x1b4>
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 0);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	69 89       	ldd	r22, Y+17	; 0x11
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    3310:	84 e0       	ldi	r24, 0x04	; 4
    3312:	88 8b       	std	Y+16, r24	; 0x10
    3314:	99 c0       	rjmp	.+306    	; 0x3448 <KEYPAD_GET_PressedKey+0x19c>
		{
			/*every time you change the column value */
			     /*you will check all Rows */
			/*if any Row his value changed that mean*/
				/*there is key is pressed*/
			if(DIO_u8GetPinValue(DIO_Keypad,row)==0)
    3316:	82 e0       	ldi	r24, 0x02	; 2
    3318:	68 89       	ldd	r22, Y+16	; 0x10
    331a:	0e 94 3e 11 	call	0x227c	; 0x227c <DIO_u8GetPinValue>
    331e:	88 23       	and	r24, r24
    3320:	09 f0       	breq	.+2      	; 0x3324 <KEYPAD_GET_PressedKey+0x78>
    3322:	8f c0       	rjmp	.+286    	; 0x3442 <KEYPAD_GET_PressedKey+0x196>
			{
				/*we will mapping between the pressed key*/
					/*and the value in keypad array*/
				keypad_out= keypad_array[row-4][col];
    3324:	88 89       	ldd	r24, Y+16	; 0x10
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9c 01       	movw	r18, r24
    332c:	24 50       	subi	r18, 0x04	; 4
    332e:	30 40       	sbci	r19, 0x00	; 0
    3330:	89 89       	ldd	r24, Y+17	; 0x11
    3332:	48 2f       	mov	r20, r24
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	22 0f       	add	r18, r18
    3338:	33 1f       	adc	r19, r19
    333a:	22 0f       	add	r18, r18
    333c:	33 1f       	adc	r19, r19
    333e:	ce 01       	movw	r24, r28
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	82 0f       	add	r24, r18
    3344:	93 1f       	adc	r25, r19
    3346:	84 0f       	add	r24, r20
    3348:	95 1f       	adc	r25, r21
    334a:	fc 01       	movw	r30, r24
    334c:	71 96       	adiw	r30, 0x11	; 17
    334e:	80 81       	ld	r24, Z
    3350:	8f 87       	std	Y+15, r24	; 0x0f
				/* if the key is still pressed you will not  */
				      /* go to for the next instruction*/
				while(DIO_u8GetPinValue(DIO_Keypad,row)==0);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	68 89       	ldd	r22, Y+16	; 0x10
    3356:	0e 94 3e 11 	call	0x227c	; 0x227c <DIO_u8GetPinValue>
    335a:	88 23       	and	r24, r24
    335c:	d1 f3       	breq	.-12     	; 0x3352 <KEYPAD_GET_PressedKey+0xa6>
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a8 e4       	ldi	r26, 0x48	; 72
    3364:	b2 e4       	ldi	r27, 0x42	; 66
    3366:	8b 87       	std	Y+11, r24	; 0x0b
    3368:	9c 87       	std	Y+12, r25	; 0x0c
    336a:	ad 87       	std	Y+13, r26	; 0x0d
    336c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3370:	7c 85       	ldd	r23, Y+12	; 0x0c
    3372:	8d 85       	ldd	r24, Y+13	; 0x0d
    3374:	9e 85       	ldd	r25, Y+14	; 0x0e
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	4a ef       	ldi	r20, 0xFA	; 250
    337c:	54 e4       	ldi	r21, 0x44	; 68
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	8f 83       	std	Y+7, r24	; 0x07
    3388:	98 87       	std	Y+8, r25	; 0x08
    338a:	a9 87       	std	Y+9, r26	; 0x09
    338c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	78 85       	ldd	r23, Y+8	; 0x08
    3392:	89 85       	ldd	r24, Y+9	; 0x09
    3394:	9a 85       	ldd	r25, Y+10	; 0x0a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	2c f4       	brge	.+10     	; 0x33b0 <KEYPAD_GET_PressedKey+0x104>
		__ticks = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9e 83       	std	Y+6, r25	; 0x06
    33ac:	8d 83       	std	Y+5, r24	; 0x05
    33ae:	3f c0       	rjmp	.+126    	; 0x342e <KEYPAD_GET_PressedKey+0x182>
	else if (__tmp > 65535)
    33b0:	6f 81       	ldd	r22, Y+7	; 0x07
    33b2:	78 85       	ldd	r23, Y+8	; 0x08
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	3f ef       	ldi	r19, 0xFF	; 255
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	57 e4       	ldi	r21, 0x47	; 71
    33c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	4c f5       	brge	.+82     	; 0x341a <KEYPAD_GET_PressedKey+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    33cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e2       	ldi	r20, 0x20	; 32
    33d6:	51 e4       	ldi	r21, 0x41	; 65
    33d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	0f c0       	rjmp	.+30     	; 0x3410 <KEYPAD_GET_PressedKey+0x164>
    33f2:	88 ec       	ldi	r24, 0xC8	; 200
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9c 83       	std	Y+4, r25	; 0x04
    33f8:	8b 83       	std	Y+3, r24	; 0x03
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <KEYPAD_GET_PressedKey+0x152>
    3402:	9c 83       	std	Y+4, r25	; 0x04
    3404:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	9e 81       	ldd	r25, Y+6	; 0x06
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3410:	8d 81       	ldd	r24, Y+5	; 0x05
    3412:	9e 81       	ldd	r25, Y+6	; 0x06
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	69 f7       	brne	.-38     	; 0x33f2 <KEYPAD_GET_PressedKey+0x146>
    3418:	14 c0       	rjmp	.+40     	; 0x3442 <KEYPAD_GET_PressedKey+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341a:	6f 81       	ldd	r22, Y+7	; 0x07
    341c:	78 85       	ldd	r23, Y+8	; 0x08
    341e:	89 85       	ldd	r24, Y+9	; 0x09
    3420:	9a 85       	ldd	r25, Y+10	; 0x0a
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9e 83       	std	Y+6, r25	; 0x06
    342c:	8d 83       	std	Y+5, r24	; 0x05
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <KEYPAD_GET_PressedKey+0x18e>
    343e:	9a 83       	std	Y+2, r25	; 0x02
    3440:	89 83       	std	Y+1, r24	; 0x01
	for(col=0;col<4;col++)
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 0);
		for(row=4;row<8;row++)
    3442:	88 89       	ldd	r24, Y+16	; 0x10
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	88 8b       	std	Y+16, r24	; 0x10
    3448:	88 89       	ldd	r24, Y+16	; 0x10
    344a:	88 30       	cpi	r24, 0x08	; 8
    344c:	08 f4       	brcc	.+2      	; 0x3450 <KEYPAD_GET_PressedKey+0x1a4>
    344e:	63 cf       	rjmp	.-314    	; 0x3316 <KEYPAD_GET_PressedKey+0x6a>


		}
			  /*if you check in all rows in this column*/
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 1);
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	69 89       	ldd	r22, Y+17	; 0x11
    3454:	41 e0       	ldi	r20, 0x01	; 1
    3456:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_VidSetPinValue>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
	for(col=0;col<4;col++)
    345a:	89 89       	ldd	r24, Y+17	; 0x11
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	89 89       	ldd	r24, Y+17	; 0x11
    3462:	84 30       	cpi	r24, 0x04	; 4
    3464:	08 f4       	brcc	.+2      	; 0x3468 <KEYPAD_GET_PressedKey+0x1bc>
    3466:	4f cf       	rjmp	.-354    	; 0x3306 <KEYPAD_GET_PressedKey+0x5a>
		/*you need to deactivate it to go to the next column*/
		DIO_VidSetPinValue	( DIO_Keypad, col, 1);
	}
/*if there is any switch is pressed the value of keypad_out variable*/
	/*will change from 0 to the mapping value in keypad_array*/
return keypad_out;
    3468:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    346a:	a6 96       	adiw	r28, 0x26	; 38
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <EEPROM_voidInit>:
#include "EEPROM_private.h"
#include "EERPROM_interface.h"


void EEPROM_voidInit(void)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    3484:	0e 94 bc 07 	call	0xf78	; 0xf78 <TWI_voidMasterInit>
}
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <EEPROM_u8WriteDataByte>:

u8   EEPROM_u8WriteDataByte(u8 Copy_u8Data,u16 Copy_u16ByteAddress)
{
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	63 97       	sbiw	r28, 0x13	; 19
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	89 8b       	std	Y+17, r24	; 0x11
    34a4:	7b 8b       	std	Y+19, r23	; 0x13
    34a6:	6a 8b       	std	Y+18, r22	; 0x12
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	88 8b       	std	Y+16, r24	; 0x10
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	8f 87       	std	Y+15, r24	; 0x0f
	/* Start Condition */
	Local_enuTWIErrorState = TWI_enuSendStartCondition();
    34b0:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_enuSendStartCondition>
    34b4:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    34b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b8:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    34bc:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Slave Address with Write Bit */
	Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite((EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8)));
    34be:	8a 89       	ldd	r24, Y+18	; 0x12
    34c0:	9b 89       	ldd	r25, Y+19	; 0x13
    34c2:	89 2f       	mov	r24, r25
    34c4:	99 27       	eor	r25, r25
    34c6:	80 65       	ori	r24, 0x50	; 80
    34c8:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_enuSendSlaveWithWrite>
    34cc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    34ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d0:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    34d4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Rest Of The Byte Address */
	Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    34d6:	8a 89       	ldd	r24, Y+18	; 0x12
    34d8:	0e 94 c8 08 	call	0x1190	; 0x1190 <TWI_enuSendDataByte>
    34dc:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    34de:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e0:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    34e4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send The Data Byte */
	Local_enuTWIErrorState = TWI_enuSendDataByte(Copy_u8Data);
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
    34e8:	0e 94 c8 08 	call	0x1190	; 0x1190 <TWI_enuSendDataByte>
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    34ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f0:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    34f4:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Stop Condition */
	TWI_voidSendStopCondition();
    34f6:	0e 94 29 09 	call	0x1252	; 0x1252 <TWI_voidSendStopCondition>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a0 ea       	ldi	r26, 0xA0	; 160
    3500:	b0 e4       	ldi	r27, 0x40	; 64
    3502:	8b 87       	std	Y+11, r24	; 0x0b
    3504:	9c 87       	std	Y+12, r25	; 0x0c
    3506:	ad 87       	std	Y+13, r26	; 0x0d
    3508:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350a:	6b 85       	ldd	r22, Y+11	; 0x0b
    350c:	7c 85       	ldd	r23, Y+12	; 0x0c
    350e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3510:	9e 85       	ldd	r25, Y+14	; 0x0e
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a ef       	ldi	r20, 0xFA	; 250
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8f 83       	std	Y+7, r24	; 0x07
    3524:	98 87       	std	Y+8, r25	; 0x08
    3526:	a9 87       	std	Y+9, r26	; 0x09
    3528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    352a:	6f 81       	ldd	r22, Y+7	; 0x07
    352c:	78 85       	ldd	r23, Y+8	; 0x08
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e8       	ldi	r20, 0x80	; 128
    3538:	5f e3       	ldi	r21, 0x3F	; 63
    353a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353e:	88 23       	and	r24, r24
    3540:	2c f4       	brge	.+10     	; 0x354c <EEPROM_u8WriteDataByte+0xbe>
		__ticks = 1;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	3f c0       	rjmp	.+126    	; 0x35ca <EEPROM_u8WriteDataByte+0x13c>
	else if (__tmp > 65535)
    354c:	6f 81       	ldd	r22, Y+7	; 0x07
    354e:	78 85       	ldd	r23, Y+8	; 0x08
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	3f ef       	ldi	r19, 0xFF	; 255
    3558:	4f e7       	ldi	r20, 0x7F	; 127
    355a:	57 e4       	ldi	r21, 0x47	; 71
    355c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3560:	18 16       	cp	r1, r24
    3562:	4c f5       	brge	.+82     	; 0x35b6 <EEPROM_u8WriteDataByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3564:	6b 85       	ldd	r22, Y+11	; 0x0b
    3566:	7c 85       	ldd	r23, Y+12	; 0x0c
    3568:	8d 85       	ldd	r24, Y+13	; 0x0d
    356a:	9e 85       	ldd	r25, Y+14	; 0x0e
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e2       	ldi	r20, 0x20	; 32
    3572:	51 e4       	ldi	r21, 0x41	; 65
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9e 83       	std	Y+6, r25	; 0x06
    358a:	8d 83       	std	Y+5, r24	; 0x05
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <EEPROM_u8WriteDataByte+0x11e>
    358e:	88 ec       	ldi	r24, 0xC8	; 200
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9c 83       	std	Y+4, r25	; 0x04
    3594:	8b 83       	std	Y+3, r24	; 0x03
    3596:	8b 81       	ldd	r24, Y+3	; 0x03
    3598:	9c 81       	ldd	r25, Y+4	; 0x04
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <EEPROM_u8WriteDataByte+0x10c>
    359e:	9c 83       	std	Y+4, r25	; 0x04
    35a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	69 f7       	brne	.-38     	; 0x358e <EEPROM_u8WriteDataByte+0x100>
    35b4:	14 c0       	rjmp	.+40     	; 0x35de <EEPROM_u8WriteDataByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	f1 f7       	brne	.-4      	; 0x35d6 <EEPROM_u8WriteDataByte+0x148>
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	return Local_u8ErrorState;
    35de:	88 89       	ldd	r24, Y+16	; 0x10
}
    35e0:	63 96       	adiw	r28, 0x13	; 19
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <EEPROM_u8ReadDataByte>:

u8   EEPROM_u8ReadDataByte(u8 * Copy_pu8ReceivedData ,u16 Copy_u16ByteAddress )
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	65 97       	sbiw	r28, 0x15	; 21
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	9b 8b       	std	Y+19, r25	; 0x13
    3608:	8a 8b       	std	Y+18, r24	; 0x12
    360a:	7d 8b       	std	Y+21, r23	; 0x15
    360c:	6c 8b       	std	Y+20, r22	; 0x14
	u8             Local_u8ErrorState     = STD_TYPES_OK;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorState Local_enuTWIErrorState = TWI_OK;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	88 8b       	std	Y+16, r24	; 0x10
	if(Copy_pu8ReceivedData != NULL)
    3616:	8a 89       	ldd	r24, Y+18	; 0x12
    3618:	9b 89       	ldd	r25, Y+19	; 0x13
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	09 f4       	brne	.+2      	; 0x3620 <EEPROM_u8ReadDataByte+0x2e>
    361e:	aa c0       	rjmp	.+340    	; 0x3774 <EEPROM_u8ReadDataByte+0x182>
	{
		u8 Local_u8EEPROMAddress = (EEPROM_u8_FIXED_ADDRESS)|(EEPROM_u8_A2_VALUE<<2)|((u8)(Copy_u16ByteAddress>>8));
    3620:	8c 89       	ldd	r24, Y+20	; 0x14
    3622:	9d 89       	ldd	r25, Y+21	; 0x15
    3624:	89 2f       	mov	r24, r25
    3626:	99 27       	eor	r25, r25
    3628:	80 65       	ori	r24, 0x50	; 80
    362a:	8f 87       	std	Y+15, r24	; 0x0f
		/* Send Start Condition */
		Local_enuTWIErrorState = TWI_enuSendStartCondition();
    362c:	0e 94 00 08 	call	0x1000	; 0x1000 <TWI_enuSendStartCondition>
    3630:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3632:	88 89       	ldd	r24, Y+16	; 0x10
    3634:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3638:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Write Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithWrite(Local_u8EEPROMAddress);
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_enuSendSlaveWithWrite>
    3640:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3642:	88 89       	ldd	r24, Y+16	; 0x10
    3644:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3648:	89 8b       	std	Y+17, r24	; 0x11

		/* Send The Rest Of The Byte Address */
		Local_enuTWIErrorState = TWI_enuSendDataByte((u8)Copy_u16ByteAddress);
    364a:	8c 89       	ldd	r24, Y+20	; 0x14
    364c:	0e 94 c8 08 	call	0x1190	; 0x1190 <TWI_enuSendDataByte>
    3650:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3652:	88 89       	ldd	r24, Y+16	; 0x10
    3654:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3658:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Repeated Start Condition */
		Local_enuTWIErrorState = TWI_enuSendRepeatedStartCondition();
    365a:	0e 94 2b 08 	call	0x1056	; 0x1056 <TWI_enuSendRepeatedStartCondition>
    365e:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3660:	88 89       	ldd	r24, Y+16	; 0x10
    3662:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3666:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Slave Address with Read Bit */
		Local_enuTWIErrorState = TWI_enuSendSlaveWithRead(Local_u8EEPROMAddress);
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	0e 94 8f 08 	call	0x111e	; 0x111e <TWI_enuSendSlaveWithRead>
    366e:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3670:	88 89       	ldd	r24, Y+16	; 0x10
    3672:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3676:	89 8b       	std	Y+17, r24	; 0x11

		/* Read Data */
		Local_enuTWIErrorState = TWI_enuReceiveDataByte(Copy_pu8ReceivedData);
    3678:	8a 89       	ldd	r24, Y+18	; 0x12
    367a:	9b 89       	ldd	r25, Y+19	; 0x13
    367c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <TWI_enuReceiveDataByte>
    3680:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8ErrorState     = Private_u8ErrorStateCheck(Local_enuTWIErrorState);
    3682:	88 89       	ldd	r24, Y+16	; 0x10
    3684:	0e 94 c5 1b 	call	0x378a	; 0x378a <Private_u8ErrorStateCheck>
    3688:	89 8b       	std	Y+17, r24	; 0x11

		/* Send Stop Condition */
		TWI_voidSendStopCondition();
    368a:	0e 94 29 09 	call	0x1252	; 0x1252 <TWI_voidSendStopCondition>
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	a0 ea       	ldi	r26, 0xA0	; 160
    3694:	b0 e4       	ldi	r27, 0x40	; 64
    3696:	8b 87       	std	Y+11, r24	; 0x0b
    3698:	9c 87       	std	Y+12, r25	; 0x0c
    369a:	ad 87       	std	Y+13, r26	; 0x0d
    369c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369e:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a ef       	ldi	r20, 0xFA	; 250
    36ac:	54 e4       	ldi	r21, 0x44	; 68
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	8f 83       	std	Y+7, r24	; 0x07
    36b8:	98 87       	std	Y+8, r25	; 0x08
    36ba:	a9 87       	std	Y+9, r26	; 0x09
    36bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36be:	6f 81       	ldd	r22, Y+7	; 0x07
    36c0:	78 85       	ldd	r23, Y+8	; 0x08
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	2c f4       	brge	.+10     	; 0x36e0 <EEPROM_u8ReadDataByte+0xee>
		__ticks = 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9e 83       	std	Y+6, r25	; 0x06
    36dc:	8d 83       	std	Y+5, r24	; 0x05
    36de:	3f c0       	rjmp	.+126    	; 0x375e <EEPROM_u8ReadDataByte+0x16c>
	else if (__tmp > 65535)
    36e0:	6f 81       	ldd	r22, Y+7	; 0x07
    36e2:	78 85       	ldd	r23, Y+8	; 0x08
    36e4:	89 85       	ldd	r24, Y+9	; 0x09
    36e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	4c f5       	brge	.+82     	; 0x374a <EEPROM_u8ReadDataByte+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e2       	ldi	r20, 0x20	; 32
    3706:	51 e4       	ldi	r21, 0x41	; 65
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <EEPROM_u8ReadDataByte+0x14e>
    3722:	88 ec       	ldi	r24, 0xC8	; 200
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	9c 83       	std	Y+4, r25	; 0x04
    3728:	8b 83       	std	Y+3, r24	; 0x03
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	9c 81       	ldd	r25, Y+4	; 0x04
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <EEPROM_u8ReadDataByte+0x13c>
    3732:	9c 83       	std	Y+4, r25	; 0x04
    3734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	9e 81       	ldd	r25, Y+6	; 0x06
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	9e 83       	std	Y+6, r25	; 0x06
    373e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	69 f7       	brne	.-38     	; 0x3722 <EEPROM_u8ReadDataByte+0x130>
    3748:	16 c0       	rjmp	.+44     	; 0x3776 <EEPROM_u8ReadDataByte+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374a:	6f 81       	ldd	r22, Y+7	; 0x07
    374c:	78 85       	ldd	r23, Y+8	; 0x08
    374e:	89 85       	ldd	r24, Y+9	; 0x09
    3750:	9a 85       	ldd	r25, Y+10	; 0x0a
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9e 83       	std	Y+6, r25	; 0x06
    375c:	8d 83       	std	Y+5, r24	; 0x05
    375e:	8d 81       	ldd	r24, Y+5	; 0x05
    3760:	9e 81       	ldd	r25, Y+6	; 0x06
    3762:	9a 83       	std	Y+2, r25	; 0x02
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	9a 81       	ldd	r25, Y+2	; 0x02
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <EEPROM_u8ReadDataByte+0x178>
    376e:	9a 83       	std	Y+2, r25	; 0x02
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <EEPROM_u8ReadDataByte+0x184>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3774:	19 8a       	std	Y+17, r1	; 0x11
	}
	return Local_u8ErrorState;
    3776:	89 89       	ldd	r24, Y+17	; 0x11

}
    3778:	65 96       	adiw	r28, 0x15	; 21
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <Private_u8ErrorStateCheck>:

static u8   Private_u8ErrorStateCheck(TWI_ErrorState Copy_enuErrorState)
{
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <Private_u8ErrorStateCheck+0x6>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuErrorState != TWI_OK)
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	09 f0       	breq	.+2      	; 0x37a2 <Private_u8ErrorStateCheck+0x18>
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    37a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <main>:
		/*hardware*/
#include "util/delay.h"


int main()
{
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	00 d0       	rcall	.+0      	; 0x37b4 <main+0x6>
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <main+0x8>
    37b6:	0f 92       	push	r0
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_OUT=0;
    37bc:	1d 82       	std	Y+5, r1	; 0x05
    37be:	1c 82       	std	Y+4, r1	; 0x04
	u16 ANLOG_VALUE=0;
    37c0:	1b 82       	std	Y+3, r1	; 0x03
    37c2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Analog_TO_Persentage=0;
    37c4:	19 82       	std	Y+1, r1	; 0x01
	/*dio set pin direction*/
	/*ADC CHANNAL 7 FOR Potentiometer*/
	DIO_VidSetPinDirection(DIO_PORTA,PIN3,INPUT);
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	63 e0       	ldi	r22, 0x03	; 3
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <DIO_VidSetPinDirection>
	/*FOR SERVO*/
	DIO_VidSetPinDirection(DIO_PORTD,PIN5,OUTPUT);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	65 e0       	ldi	r22, 0x05	; 5
    37d4:	41 e0       	ldi	r20, 0x01	; 1
    37d6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <DIO_VidSetPinDirection>
	/*ADC Initialization*/
	ADC_VidINIT();
    37da:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <ADC_VidINIT>
	ADC_Select_Channal(3);
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <ADC_Select_Channal>
	/*ADC Start Conversion*/
	ADC_Start_Conversion();
    37e4:	0e 94 ce 12 	call	0x259c	; 0x259c <ADC_Start_Conversion>
	/*TIMER1 Initialization*/
	TIMER1_INIT();
    37e8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <TIMER1_INIT>
	/*super loop*/
	while(1)
	{
		ADC_Get_Result(&ADC_OUT);
    37ec:	ce 01       	movw	r24, r28
    37ee:	04 96       	adiw	r24, 0x04	; 4
    37f0:	0e 94 1c 13 	call	0x2638	; 0x2638 <ADC_Get_Result>
		ANLOG_VALUE=(ADC_OUT*5000UL)/1023;
    37f4:	8c 81       	ldd	r24, Y+4	; 0x04
    37f6:	9d 81       	ldd	r25, Y+5	; 0x05
    37f8:	cc 01       	movw	r24, r24
    37fa:	a0 e0       	ldi	r26, 0x00	; 0
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	28 e8       	ldi	r18, 0x88	; 136
    3800:	33 e1       	ldi	r19, 0x13	; 19
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 38 1c 	call	0x3870	; 0x3870 <__mulsi3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	2f ef       	ldi	r18, 0xFF	; 255
    3814:	33 e0       	ldi	r19, 0x03	; 3
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodsi4>
    3822:	da 01       	movw	r26, r20
    3824:	c9 01       	movw	r24, r18
    3826:	9b 83       	std	Y+3, r25	; 0x03
    3828:	8a 83       	std	Y+2, r24	; 0x02
		Analog_TO_Persentage=(ANLOG_VALUE*100)/4995;
    382a:	2a 81       	ldd	r18, Y+2	; 0x02
    382c:	3b 81       	ldd	r19, Y+3	; 0x03
    382e:	84 e6       	ldi	r24, 0x64	; 100
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	ac 01       	movw	r20, r24
    3834:	24 9f       	mul	r18, r20
    3836:	c0 01       	movw	r24, r0
    3838:	25 9f       	mul	r18, r21
    383a:	90 0d       	add	r25, r0
    383c:	34 9f       	mul	r19, r20
    383e:	90 0d       	add	r25, r0
    3840:	11 24       	eor	r1, r1
    3842:	23 e8       	ldi	r18, 0x83	; 131
    3844:	33 e1       	ldi	r19, 0x13	; 19
    3846:	b9 01       	movw	r22, r18
    3848:	0e 94 57 1c 	call	0x38ae	; 0x38ae <__udivmodhi4>
    384c:	cb 01       	movw	r24, r22
    384e:	89 83       	std	Y+1, r24	; 0x01
		Set_Duty_Cycle_TIMER_1_A(Analog_TO_Persentage);
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	88 2f       	mov	r24, r24
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	a0 e0       	ldi	r26, 0x00	; 0
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 3e 0c 	call	0x187c	; 0x187c <Set_Duty_Cycle_TIMER_1_A>
    386e:	be cf       	rjmp	.-132    	; 0x37ec <main+0x3e>

00003870 <__mulsi3>:
    3870:	62 9f       	mul	r22, r18
    3872:	d0 01       	movw	r26, r0
    3874:	73 9f       	mul	r23, r19
    3876:	f0 01       	movw	r30, r0
    3878:	82 9f       	mul	r24, r18
    387a:	e0 0d       	add	r30, r0
    387c:	f1 1d       	adc	r31, r1
    387e:	64 9f       	mul	r22, r20
    3880:	e0 0d       	add	r30, r0
    3882:	f1 1d       	adc	r31, r1
    3884:	92 9f       	mul	r25, r18
    3886:	f0 0d       	add	r31, r0
    3888:	83 9f       	mul	r24, r19
    388a:	f0 0d       	add	r31, r0
    388c:	74 9f       	mul	r23, r20
    388e:	f0 0d       	add	r31, r0
    3890:	65 9f       	mul	r22, r21
    3892:	f0 0d       	add	r31, r0
    3894:	99 27       	eor	r25, r25
    3896:	72 9f       	mul	r23, r18
    3898:	b0 0d       	add	r27, r0
    389a:	e1 1d       	adc	r30, r1
    389c:	f9 1f       	adc	r31, r25
    389e:	63 9f       	mul	r22, r19
    38a0:	b0 0d       	add	r27, r0
    38a2:	e1 1d       	adc	r30, r1
    38a4:	f9 1f       	adc	r31, r25
    38a6:	bd 01       	movw	r22, r26
    38a8:	cf 01       	movw	r24, r30
    38aa:	11 24       	eor	r1, r1
    38ac:	08 95       	ret

000038ae <__udivmodhi4>:
    38ae:	aa 1b       	sub	r26, r26
    38b0:	bb 1b       	sub	r27, r27
    38b2:	51 e1       	ldi	r21, 0x11	; 17
    38b4:	07 c0       	rjmp	.+14     	; 0x38c4 <__udivmodhi4_ep>

000038b6 <__udivmodhi4_loop>:
    38b6:	aa 1f       	adc	r26, r26
    38b8:	bb 1f       	adc	r27, r27
    38ba:	a6 17       	cp	r26, r22
    38bc:	b7 07       	cpc	r27, r23
    38be:	10 f0       	brcs	.+4      	; 0x38c4 <__udivmodhi4_ep>
    38c0:	a6 1b       	sub	r26, r22
    38c2:	b7 0b       	sbc	r27, r23

000038c4 <__udivmodhi4_ep>:
    38c4:	88 1f       	adc	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	5a 95       	dec	r21
    38ca:	a9 f7       	brne	.-22     	; 0x38b6 <__udivmodhi4_loop>
    38cc:	80 95       	com	r24
    38ce:	90 95       	com	r25
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	08 95       	ret

000038d6 <__udivmodsi4>:
    38d6:	a1 e2       	ldi	r26, 0x21	; 33
    38d8:	1a 2e       	mov	r1, r26
    38da:	aa 1b       	sub	r26, r26
    38dc:	bb 1b       	sub	r27, r27
    38de:	fd 01       	movw	r30, r26
    38e0:	0d c0       	rjmp	.+26     	; 0x38fc <__udivmodsi4_ep>

000038e2 <__udivmodsi4_loop>:
    38e2:	aa 1f       	adc	r26, r26
    38e4:	bb 1f       	adc	r27, r27
    38e6:	ee 1f       	adc	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	a2 17       	cp	r26, r18
    38ec:	b3 07       	cpc	r27, r19
    38ee:	e4 07       	cpc	r30, r20
    38f0:	f5 07       	cpc	r31, r21
    38f2:	20 f0       	brcs	.+8      	; 0x38fc <__udivmodsi4_ep>
    38f4:	a2 1b       	sub	r26, r18
    38f6:	b3 0b       	sbc	r27, r19
    38f8:	e4 0b       	sbc	r30, r20
    38fa:	f5 0b       	sbc	r31, r21

000038fc <__udivmodsi4_ep>:
    38fc:	66 1f       	adc	r22, r22
    38fe:	77 1f       	adc	r23, r23
    3900:	88 1f       	adc	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	1a 94       	dec	r1
    3906:	69 f7       	brne	.-38     	; 0x38e2 <__udivmodsi4_loop>
    3908:	60 95       	com	r22
    390a:	70 95       	com	r23
    390c:	80 95       	com	r24
    390e:	90 95       	com	r25
    3910:	9b 01       	movw	r18, r22
    3912:	ac 01       	movw	r20, r24
    3914:	bd 01       	movw	r22, r26
    3916:	cf 01       	movw	r24, r30
    3918:	08 95       	ret

0000391a <__prologue_saves__>:
    391a:	2f 92       	push	r2
    391c:	3f 92       	push	r3
    391e:	4f 92       	push	r4
    3920:	5f 92       	push	r5
    3922:	6f 92       	push	r6
    3924:	7f 92       	push	r7
    3926:	8f 92       	push	r8
    3928:	9f 92       	push	r9
    392a:	af 92       	push	r10
    392c:	bf 92       	push	r11
    392e:	cf 92       	push	r12
    3930:	df 92       	push	r13
    3932:	ef 92       	push	r14
    3934:	ff 92       	push	r15
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	ca 1b       	sub	r28, r26
    3944:	db 0b       	sbc	r29, r27
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	09 94       	ijmp

00003952 <__epilogue_restores__>:
    3952:	2a 88       	ldd	r2, Y+18	; 0x12
    3954:	39 88       	ldd	r3, Y+17	; 0x11
    3956:	48 88       	ldd	r4, Y+16	; 0x10
    3958:	5f 84       	ldd	r5, Y+15	; 0x0f
    395a:	6e 84       	ldd	r6, Y+14	; 0x0e
    395c:	7d 84       	ldd	r7, Y+13	; 0x0d
    395e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3960:	9b 84       	ldd	r9, Y+11	; 0x0b
    3962:	aa 84       	ldd	r10, Y+10	; 0x0a
    3964:	b9 84       	ldd	r11, Y+9	; 0x09
    3966:	c8 84       	ldd	r12, Y+8	; 0x08
    3968:	df 80       	ldd	r13, Y+7	; 0x07
    396a:	ee 80       	ldd	r14, Y+6	; 0x06
    396c:	fd 80       	ldd	r15, Y+5	; 0x05
    396e:	0c 81       	ldd	r16, Y+4	; 0x04
    3970:	1b 81       	ldd	r17, Y+3	; 0x03
    3972:	aa 81       	ldd	r26, Y+2	; 0x02
    3974:	b9 81       	ldd	r27, Y+1	; 0x01
    3976:	ce 0f       	add	r28, r30
    3978:	d1 1d       	adc	r29, r1
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	ed 01       	movw	r28, r26
    3986:	08 95       	ret

00003988 <_exit>:
    3988:	f8 94       	cli

0000398a <__stop_program>:
    398a:	ff cf       	rjmp	.-2      	; 0x398a <__stop_program>
