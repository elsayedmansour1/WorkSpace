
execution_time_test_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000295c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000295c  000029f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  000029f8  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fbf  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_1>
       8:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_2>
       c:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__vector_7>
      20:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_8>
      24:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e5       	ldi	r30, 0x5C	; 92
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 db 13 	call	0x27b6	; 0x27b6 <main>
      8a:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMER1_OV_SetCallBack>:
#include "TIMER1_Interface.h"
#include "TIMER1_Config.h"
static void (*GPFunc_T1)(void)=NULL;
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TIMER1_OV_SetCallBack+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	90 93 69 00 	sts	0x0069, r25
     cb4:	80 93 68 00 	sts	0x0068, r24
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <TIMER1_CM_A_SetCallBack+0x6>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	90 93 69 00 	sts	0x0069, r25
     cd8:	80 93 68 00 	sts	0x0068, r24
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <TIMER1_CM_B_SetCallBack+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	90 93 69 00 	sts	0x0069, r25
     cfc:	80 93 68 00 	sts	0x0068, r24
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <__vector_9>:
////////////////////////////////////////////////////
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
     d34:	80 91 68 00 	lds	r24, 0x0068
     d38:	90 91 69 00 	lds	r25, 0x0069
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	29 f0       	breq	.+10     	; 0xd4a <__vector_9+0x40>
		{
			GPFunc_T1();
     d40:	e0 91 68 00 	lds	r30, 0x0068
     d44:	f0 91 69 00 	lds	r31, 0x0069
     d48:	09 95       	icall
		}
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <__vector_7>:
ISR_TMR1_CompA()
{
     d70:	1f 92       	push	r1
     d72:	0f 92       	push	r0
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	0f 92       	push	r0
     d78:	11 24       	eor	r1, r1
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
     d9a:	80 91 68 00 	lds	r24, 0x0068
     d9e:	90 91 69 00 	lds	r25, 0x0069
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_7+0x40>
		{
			GPFunc_T1();
     da6:	e0 91 68 00 	lds	r30, 0x0068
     daa:	f0 91 69 00 	lds	r31, 0x0069
     dae:	09 95       	icall
		}
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_8>:
ISR_TMR1_CompB()
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
     e00:	80 91 68 00 	lds	r24, 0x0068
     e04:	90 91 69 00 	lds	r25, 0x0069
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	29 f0       	breq	.+10     	; 0xe16 <__vector_8+0x40>
		{
			GPFunc_T1();
     e0c:	e0 91 68 00 	lds	r30, 0x0068
     e10:	f0 91 69 00 	lds	r31, 0x0069
     e14:	09 95       	icall
		}
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <TIMER1_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
#if Timer1_Mode==NORMAL_Timer_1

	NORMAL;
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24
     e52:	af e4       	ldi	r26, 0x4F	; 79
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e4       	ldi	r30, 0x4F	; 79
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8d 7f       	andi	r24, 0xFD	; 253
     e5e:	8c 93       	st	X, r24
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
     e6e:	ae e4       	ldi	r26, 0x4E	; 78
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ee e4       	ldi	r30, 0x4E	; 78
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	8c 93       	st	X, r24
	prescaler_clk_8_1;
     e7c:	ae e4       	ldi	r26, 0x4E	; 78
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ee e4       	ldi	r30, 0x4E	; 78
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8b 7f       	andi	r24, 0xFB	; 251
     e88:	8c 93       	st	X, r24
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8c 93       	st	X, r24
     e98:	ae e4       	ldi	r26, 0x4E	; 78
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ee e4       	ldi	r30, 0x4E	; 78
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	8c 93       	st	X, r24
	Normal_port_operation_1;
     ea6:	af e4       	ldi	r26, 0x4F	; 79
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ef e4       	ldi	r30, 0x4F	; 79
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7b       	andi	r24, 0xBF	; 191
     eb2:	8c 93       	st	X, r24
     eb4:	af e4       	ldi	r26, 0x4F	; 79
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ef e4       	ldi	r30, 0x4F	; 79
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	8c 93       	st	X, r24
     ec2:	af e4       	ldi	r26, 0x4F	; 79
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ef e4       	ldi	r30, 0x4F	; 79
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7e       	andi	r24, 0xEF	; 239
     ece:	8c 93       	st	X, r24
     ed0:	af e4       	ldi	r26, 0x4F	; 79
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ef e4       	ldi	r30, 0x4F	; 79
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7d       	andi	r24, 0xDF	; 223
     edc:	8c 93       	st	X, r24
	TCNT1=0;
     ede:	ec e4       	ldi	r30, 0x4C	; 76
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
	Overflow_Interrupt_Enable_1;
     ee6:	a9 e5       	ldi	r26, 0x59	; 89
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e9 e5       	ldi	r30, 0x59	; 89
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	84 60       	ori	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
     f02:	a9 e5       	ldi	r26, 0x59	; 89
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e9 e5       	ldi	r30, 0x59	; 89
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <Set_Duty_Cycle_TIMER_1_A>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <Set_Duty_Cycle_TIMER_1_A+0xa>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <Set_Duty_Cycle_TIMER_1_A+0xc>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	69 83       	std	Y+1, r22	; 0x01
     f28:	7a 83       	std	Y+2, r23	; 0x02
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	9c 83       	std	Y+4, r25	; 0x04
#if Timer1_Mode==Normal_Timer1_Mode
	percentage_Value=percentage_Value/100;
     f2e:	69 81       	ldd	r22, Y+1	; 0x01
     f30:	7a 81       	ldd	r23, Y+2	; 0x02
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	48 ec       	ldi	r20, 0xC8	; 200
     f3c:	52 e4       	ldi	r21, 0x42	; 66
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	ab 83       	std	Y+3, r26	; 0x03
     f4c:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*65535)-1;
     f4e:	0a e4       	ldi	r16, 0x4A	; 74
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	69 81       	ldd	r22, Y+1	; 0x01
     f54:	7a 81       	ldd	r23, Y+2	; 0x02
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	3f ef       	ldi	r19, 0xFF	; 255
     f5e:	4f e7       	ldi	r20, 0x7F	; 127
     f60:	57 e4       	ldi	r21, 0x47	; 71
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <Set_Duty_Cycle_TIMER_1_B+0xa>
     fac:	00 d0       	rcall	.+0      	; 0xfae <Set_Duty_Cycle_TIMER_1_B+0xc>
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	69 83       	std	Y+1, r22	; 0x01
     fb4:	7a 83       	std	Y+2, r23	; 0x02
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	9c 83       	std	Y+4, r25	; 0x04
#if Timer1_Mode==Normal_Timer1_Mode
	percentage_Value=percentage_Value/100;
     fba:	69 81       	ldd	r22, Y+1	; 0x01
     fbc:	7a 81       	ldd	r23, Y+2	; 0x02
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	48 ec       	ldi	r20, 0xC8	; 200
     fc8:	52 e4       	ldi	r21, 0x42	; 66
     fca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	ab 83       	std	Y+3, r26	; 0x03
     fd8:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*65535)-1;
     fda:	08 e4       	ldi	r16, 0x48	; 72
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	7a 81       	ldd	r23, Y+2	; 0x02
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	f8 01       	movw	r30, r16
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	08 95       	ret

0000102e <Timer1_U16GetTCNT1Value>:
u16 Timer1_U16GetTCNT1Value(void)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62

	return TCNT1;
    1036:	ec e4       	ldi	r30, 0x4C	; 76
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <MDIO_u8Init>:
#include "MDIO_config.h"
#include "MDIO_interface.h"
#include "MDIO_private.h"

void MDIO_u8Init            (void)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
    1052:	e7 e3       	ldi	r30, 0x37	; 55
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    105e:	e1 e3       	ldi	r30, 0x31	; 49
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    106c:	e8 e3       	ldi	r30, 0x38	; 56
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <MDIO_u8SetPinDirection>:

u8 MDIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2e 97       	sbiw	r28, 0x0e	; 14
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <MDIO_u8SetPinDirection+0x26>
    10a8:	0c c1       	rjmp	.+536    	; 0x12c2 <MDIO_u8SetPinDirection+0x23e>
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <MDIO_u8SetPinDirection+0x2e>
    10b0:	08 c1       	rjmp	.+528    	; 0x12c2 <MDIO_u8SetPinDirection+0x23e>
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	88 23       	and	r24, r24
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <MDIO_u8SetPinDirection+0x3c>
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <MDIO_u8SetPinDirection+0x3c>
    10be:	01 c1       	rjmp	.+514    	; 0x12c2 <MDIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3e 87       	std	Y+14, r19	; 0x0e
    10c8:	2d 87       	std	Y+13, r18	; 0x0d
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <MDIO_u8SetPinDirection+0x52>
    10d4:	4f c0       	rjmp	.+158    	; 0x1174 <MDIO_u8SetPinDirection+0xf0>
    10d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    10d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <MDIO_u8SetPinDirection+0x66>
    10e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	71 f0       	breq	.+28     	; 0x1104 <MDIO_u8SetPinDirection+0x80>
    10e8:	ed c0       	rjmp	.+474    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
    10ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <MDIO_u8SetPinDirection+0x72>
    10f4:	77 c0       	rjmp	.+238    	; 0x11e4 <MDIO_u8SetPinDirection+0x160>
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <MDIO_u8SetPinDirection+0x7e>
    1100:	a9 c0       	rjmp	.+338    	; 0x1254 <MDIO_u8SetPinDirection+0x1d0>
    1102:	e0 c0       	rjmp	.+448    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3c 87       	std	Y+12, r19	; 0x0c
    110c:	2b 87       	std	Y+11, r18	; 0x0b
    110e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1110:	9c 85       	ldd	r25, Y+12	; 0x0c
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	d1 f0       	breq	.+52     	; 0x114a <MDIO_u8SetPinDirection+0xc6>
    1116:	2b 85       	ldd	r18, Y+11	; 0x0b
    1118:	3c 85       	ldd	r19, Y+12	; 0x0c
    111a:	21 30       	cpi	r18, 0x01	; 1
    111c:	31 05       	cpc	r19, r1
    111e:	09 f0       	breq	.+2      	; 0x1122 <MDIO_u8SetPinDirection+0x9e>
    1120:	d1 c0       	rjmp	.+418    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
    1122:	aa e3       	ldi	r26, 0x3A	; 58
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <MDIO_u8SetPinDirection+0xbc>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <MDIO_u8SetPinDirection+0xb8>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	bd c0       	rjmp	.+378    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
    114a:	aa e3       	ldi	r26, 0x3A	; 58
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ea e3       	ldi	r30, 0x3A	; 58
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <MDIO_u8SetPinDirection+0xe4>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <MDIO_u8SetPinDirection+0xe0>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	a8 c0       	rjmp	.+336    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3a 87       	std	Y+10, r19	; 0x0a
    117c:	29 87       	std	Y+9, r18	; 0x09
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	d1 f0       	breq	.+52     	; 0x11ba <MDIO_u8SetPinDirection+0x136>
    1186:	29 85       	ldd	r18, Y+9	; 0x09
    1188:	3a 85       	ldd	r19, Y+10	; 0x0a
    118a:	21 30       	cpi	r18, 0x01	; 1
    118c:	31 05       	cpc	r19, r1
    118e:	09 f0       	breq	.+2      	; 0x1192 <MDIO_u8SetPinDirection+0x10e>
    1190:	99 c0       	rjmp	.+306    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
    1192:	a7 e3       	ldi	r26, 0x37	; 55
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <MDIO_u8SetPinDirection+0x12c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <MDIO_u8SetPinDirection+0x128>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	85 c0       	rjmp	.+266    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
    11ba:	a7 e3       	ldi	r26, 0x37	; 55
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e7 e3       	ldi	r30, 0x37	; 55
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <MDIO_u8SetPinDirection+0x154>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <MDIO_u8SetPinDirection+0x150>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	70 c0       	rjmp	.+224    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	38 87       	std	Y+8, r19	; 0x08
    11ec:	2f 83       	std	Y+7, r18	; 0x07
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	d1 f0       	breq	.+52     	; 0x122a <MDIO_u8SetPinDirection+0x1a6>
    11f6:	2f 81       	ldd	r18, Y+7	; 0x07
    11f8:	38 85       	ldd	r19, Y+8	; 0x08
    11fa:	21 30       	cpi	r18, 0x01	; 1
    11fc:	31 05       	cpc	r19, r1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <MDIO_u8SetPinDirection+0x17e>
    1200:	61 c0       	rjmp	.+194    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
    1202:	a4 e3       	ldi	r26, 0x34	; 52
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e4 e3       	ldi	r30, 0x34	; 52
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <MDIO_u8SetPinDirection+0x19c>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <MDIO_u8SetPinDirection+0x198>
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	4d c0       	rjmp	.+154    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
    122a:	a4 e3       	ldi	r26, 0x34	; 52
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e4 e3       	ldi	r30, 0x34	; 52
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <MDIO_u8SetPinDirection+0x1c4>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <MDIO_u8SetPinDirection+0x1c0>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	38 c0       	rjmp	.+112    	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3e 83       	std	Y+6, r19	; 0x06
    125c:	2d 83       	std	Y+5, r18	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	c9 f0       	breq	.+50     	; 0x1298 <MDIO_u8SetPinDirection+0x214>
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	21 30       	cpi	r18, 0x01	; 1
    126c:	31 05       	cpc	r19, r1
    126e:	51 f5       	brne	.+84     	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    1270:	a1 e3       	ldi	r26, 0x31	; 49
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e1 e3       	ldi	r30, 0x31	; 49
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <MDIO_u8SetPinDirection+0x20a>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <MDIO_u8SetPinDirection+0x206>
    1292:	84 2b       	or	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	16 c0       	rjmp	.+44     	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    1298:	a1 e3       	ldi	r26, 0x31	; 49
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e1 e3       	ldi	r30, 0x31	; 49
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <MDIO_u8SetPinDirection+0x232>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <MDIO_u8SetPinDirection+0x22e>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <MDIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    12c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c6:	2e 96       	adiw	r28, 0x0e	; 14
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	2e 97       	sbiw	r28, 0x0e	; 14
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	8a 83       	std	Y+2, r24	; 0x02
    12ee:	6b 83       	std	Y+3, r22	; 0x03
    12f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <MDIO_u8SetPinValue+0x26>
    12fc:	0c c1       	rjmp	.+536    	; 0x1516 <MDIO_u8SetPinValue+0x23e>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 30       	cpi	r24, 0x08	; 8
    1302:	08 f0       	brcs	.+2      	; 0x1306 <MDIO_u8SetPinValue+0x2e>
    1304:	08 c1       	rjmp	.+528    	; 0x1516 <MDIO_u8SetPinValue+0x23e>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	21 f0       	breq	.+8      	; 0x1314 <MDIO_u8SetPinValue+0x3c>
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	88 23       	and	r24, r24
    1310:	09 f0       	breq	.+2      	; 0x1314 <MDIO_u8SetPinValue+0x3c>
    1312:	01 c1       	rjmp	.+514    	; 0x1516 <MDIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3e 87       	std	Y+14, r19	; 0x0e
    131c:	2d 87       	std	Y+13, r18	; 0x0d
    131e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1320:	9e 85       	ldd	r25, Y+14	; 0x0e
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <MDIO_u8SetPinValue+0x52>
    1328:	4f c0       	rjmp	.+158    	; 0x13c8 <MDIO_u8SetPinValue+0xf0>
    132a:	2d 85       	ldd	r18, Y+13	; 0x0d
    132c:	3e 85       	ldd	r19, Y+14	; 0x0e
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <MDIO_u8SetPinValue+0x66>
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	71 f0       	breq	.+28     	; 0x1358 <MDIO_u8SetPinValue+0x80>
    133c:	ed c0       	rjmp	.+474    	; 0x1518 <MDIO_u8SetPinValue+0x240>
    133e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1340:	3e 85       	ldd	r19, Y+14	; 0x0e
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <MDIO_u8SetPinValue+0x72>
    1348:	77 c0       	rjmp	.+238    	; 0x1438 <MDIO_u8SetPinValue+0x160>
    134a:	8d 85       	ldd	r24, Y+13	; 0x0d
    134c:	9e 85       	ldd	r25, Y+14	; 0x0e
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <MDIO_u8SetPinValue+0x7e>
    1354:	a9 c0       	rjmp	.+338    	; 0x14a8 <MDIO_u8SetPinValue+0x1d0>
    1356:	e0 c0       	rjmp	.+448    	; 0x1518 <MDIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3c 87       	std	Y+12, r19	; 0x0c
    1360:	2b 87       	std	Y+11, r18	; 0x0b
    1362:	8b 85       	ldd	r24, Y+11	; 0x0b
    1364:	9c 85       	ldd	r25, Y+12	; 0x0c
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	d1 f0       	breq	.+52     	; 0x139e <MDIO_u8SetPinValue+0xc6>
    136a:	2b 85       	ldd	r18, Y+11	; 0x0b
    136c:	3c 85       	ldd	r19, Y+12	; 0x0c
    136e:	21 30       	cpi	r18, 0x01	; 1
    1370:	31 05       	cpc	r19, r1
    1372:	09 f0       	breq	.+2      	; 0x1376 <MDIO_u8SetPinValue+0x9e>
    1374:	d1 c0       	rjmp	.+418    	; 0x1518 <MDIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    1376:	ab e3       	ldi	r26, 0x3B	; 59
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <MDIO_u8SetPinValue+0xbc>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <MDIO_u8SetPinValue+0xb8>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	bd c0       	rjmp	.+378    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <MDIO_u8SetPinValue+0xe4>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <MDIO_u8SetPinValue+0xe0>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	a8 c0       	rjmp	.+336    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3a 87       	std	Y+10, r19	; 0x0a
    13d0:	29 87       	std	Y+9, r18	; 0x09
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	d1 f0       	breq	.+52     	; 0x140e <MDIO_u8SetPinValue+0x136>
    13da:	29 85       	ldd	r18, Y+9	; 0x09
    13dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13de:	21 30       	cpi	r18, 0x01	; 1
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <MDIO_u8SetPinValue+0x10e>
    13e4:	99 c0       	rjmp	.+306    	; 0x1518 <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    13e6:	a8 e3       	ldi	r26, 0x38	; 56
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <MDIO_u8SetPinValue+0x12c>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <MDIO_u8SetPinValue+0x128>
    1408:	84 2b       	or	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	85 c0       	rjmp	.+266    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    140e:	a8 e3       	ldi	r26, 0x38	; 56
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <MDIO_u8SetPinValue+0x154>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <MDIO_u8SetPinValue+0x150>
    1430:	80 95       	com	r24
    1432:	84 23       	and	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	70 c0       	rjmp	.+224    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	38 87       	std	Y+8, r19	; 0x08
    1440:	2f 83       	std	Y+7, r18	; 0x07
    1442:	8f 81       	ldd	r24, Y+7	; 0x07
    1444:	98 85       	ldd	r25, Y+8	; 0x08
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	d1 f0       	breq	.+52     	; 0x147e <MDIO_u8SetPinValue+0x1a6>
    144a:	2f 81       	ldd	r18, Y+7	; 0x07
    144c:	38 85       	ldd	r19, Y+8	; 0x08
    144e:	21 30       	cpi	r18, 0x01	; 1
    1450:	31 05       	cpc	r19, r1
    1452:	09 f0       	breq	.+2      	; 0x1456 <MDIO_u8SetPinValue+0x17e>
    1454:	61 c0       	rjmp	.+194    	; 0x1518 <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <MDIO_u8SetPinValue+0x19c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <MDIO_u8SetPinValue+0x198>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	4d c0       	rjmp	.+154    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    147e:	a5 e3       	ldi	r26, 0x35	; 53
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MDIO_u8SetPinValue+0x1c4>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MDIO_u8SetPinValue+0x1c0>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	38 c0       	rjmp	.+112    	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3e 83       	std	Y+6, r19	; 0x06
    14b0:	2d 83       	std	Y+5, r18	; 0x05
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	c9 f0       	breq	.+50     	; 0x14ec <MDIO_u8SetPinValue+0x214>
    14ba:	2d 81       	ldd	r18, Y+5	; 0x05
    14bc:	3e 81       	ldd	r19, Y+6	; 0x06
    14be:	21 30       	cpi	r18, 0x01	; 1
    14c0:	31 05       	cpc	r19, r1
    14c2:	51 f5       	brne	.+84     	; 0x1518 <MDIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    14c4:	a2 e3       	ldi	r26, 0x32	; 50
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e2 e3       	ldi	r30, 0x32	; 50
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <MDIO_u8SetPinValue+0x20a>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <MDIO_u8SetPinValue+0x206>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    14ec:	a2 e3       	ldi	r26, 0x32	; 50
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e2 e3       	ldi	r30, 0x32	; 50
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <MDIO_u8SetPinValue+0x232>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <MDIO_u8SetPinValue+0x22e>
    150e:	80 95       	com	r24
    1510:	84 23       	and	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <MDIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1516:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
}
    151a:	2e 96       	adiw	r28, 0x0e	; 14
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	27 97       	sbiw	r28, 0x07	; 7
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	6b 83       	std	Y+3, r22	; 0x03
    1544:	5d 83       	std	Y+5, r21	; 0x05
    1546:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	08 f0       	brcs	.+2      	; 0x1554 <MDIO_u8GetPinValue+0x28>
    1552:	ea c0       	rjmp	.+468    	; 0x1728 <MDIO_u8GetPinValue+0x1fc>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	08 f0       	brcs	.+2      	; 0x155c <MDIO_u8GetPinValue+0x30>
    155a:	e6 c0       	rjmp	.+460    	; 0x1728 <MDIO_u8GetPinValue+0x1fc>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	09 f4       	brne	.+2      	; 0x1566 <MDIO_u8GetPinValue+0x3a>
    1564:	e1 c0       	rjmp	.+450    	; 0x1728 <MDIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3f 83       	std	Y+7, r19	; 0x07
    156e:	2e 83       	std	Y+6, r18	; 0x06
    1570:	4e 81       	ldd	r20, Y+6	; 0x06
    1572:	5f 81       	ldd	r21, Y+7	; 0x07
    1574:	41 30       	cpi	r20, 0x01	; 1
    1576:	51 05       	cpc	r21, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <MDIO_u8GetPinValue+0x50>
    157a:	48 c0       	rjmp	.+144    	; 0x160c <MDIO_u8GetPinValue+0xe0>
    157c:	8e 81       	ldd	r24, Y+6	; 0x06
    157e:	9f 81       	ldd	r25, Y+7	; 0x07
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	91 05       	cpc	r25, r1
    1584:	34 f4       	brge	.+12     	; 0x1592 <MDIO_u8GetPinValue+0x66>
    1586:	2e 81       	ldd	r18, Y+6	; 0x06
    1588:	3f 81       	ldd	r19, Y+7	; 0x07
    158a:	21 15       	cp	r18, r1
    158c:	31 05       	cpc	r19, r1
    158e:	71 f0       	breq	.+28     	; 0x15ac <MDIO_u8GetPinValue+0x80>
    1590:	cc c0       	rjmp	.+408    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
    1592:	4e 81       	ldd	r20, Y+6	; 0x06
    1594:	5f 81       	ldd	r21, Y+7	; 0x07
    1596:	42 30       	cpi	r20, 0x02	; 2
    1598:	51 05       	cpc	r21, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <MDIO_u8GetPinValue+0x72>
    159c:	67 c0       	rjmp	.+206    	; 0x166c <MDIO_u8GetPinValue+0x140>
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <MDIO_u8GetPinValue+0x7e>
    15a8:	90 c0       	rjmp	.+288    	; 0x16ca <MDIO_u8GetPinValue+0x19e>
    15aa:	bf c0       	rjmp	.+382    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    15ac:	e9 e3       	ldi	r30, 0x39	; 57
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <MDIO_u8GetPinValue+0x98>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <MDIO_u8GetPinValue+0x94>
    15c8:	ca 01       	movw	r24, r20
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	90 70       	andi	r25, 0x00	; 0
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	21 f4       	brne	.+8      	; 0x15da <MDIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15d2:	ec 81       	ldd	r30, Y+4	; 0x04
    15d4:	fd 81       	ldd	r31, Y+5	; 0x05
    15d6:	10 82       	st	Z, r1
    15d8:	a8 c0       	rjmp	.+336    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    15da:	e9 e3       	ldi	r30, 0x39	; 57
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <MDIO_u8GetPinValue+0xc6>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <MDIO_u8GetPinValue+0xc2>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <MDIO_u8GetPinValue+0xd6>
    1600:	94 c0       	rjmp	.+296    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1602:	ec 81       	ldd	r30, Y+4	; 0x04
    1604:	fd 81       	ldd	r31, Y+5	; 0x05
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 83       	st	Z, r24
    160a:	8f c0       	rjmp	.+286    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    160c:	e6 e3       	ldi	r30, 0x36	; 54
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <MDIO_u8GetPinValue+0xf8>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <MDIO_u8GetPinValue+0xf4>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	21 f4       	brne	.+8      	; 0x163a <MDIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1632:	ec 81       	ldd	r30, Y+4	; 0x04
    1634:	fd 81       	ldd	r31, Y+5	; 0x05
    1636:	10 82       	st	Z, r1
    1638:	78 c0       	rjmp	.+240    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			    }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    163a:	e6 e3       	ldi	r30, 0x36	; 54
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <MDIO_u8GetPinValue+0x126>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <MDIO_u8GetPinValue+0x122>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	88 23       	and	r24, r24
    165e:	09 f4       	brne	.+2      	; 0x1662 <MDIO_u8GetPinValue+0x136>
    1660:	64 c0       	rjmp	.+200    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1662:	ec 81       	ldd	r30, Y+4	; 0x04
    1664:	fd 81       	ldd	r31, Y+5	; 0x05
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	80 83       	st	Z, r24
    166a:	5f c0       	rjmp	.+190    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    166c:	e3 e3       	ldi	r30, 0x33	; 51
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <MDIO_u8GetPinValue+0x158>
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	8a 95       	dec	r24
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <MDIO_u8GetPinValue+0x154>
    1688:	ca 01       	movw	r24, r20
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	21 f4       	brne	.+8      	; 0x169a <MDIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1692:	ec 81       	ldd	r30, Y+4	; 0x04
    1694:	fd 81       	ldd	r31, Y+5	; 0x05
    1696:	10 82       	st	Z, r1
    1698:	48 c0       	rjmp	.+144    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    169a:	e3 e3       	ldi	r30, 0x33	; 51
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a9 01       	movw	r20, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <MDIO_u8GetPinValue+0x186>
    16ae:	55 95       	asr	r21
    16b0:	47 95       	ror	r20
    16b2:	8a 95       	dec	r24
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <MDIO_u8GetPinValue+0x182>
    16b6:	ca 01       	movw	r24, r20
    16b8:	81 70       	andi	r24, 0x01	; 1
    16ba:	90 70       	andi	r25, 0x00	; 0
    16bc:	88 23       	and	r24, r24
    16be:	a9 f1       	breq	.+106    	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    16c0:	ec 81       	ldd	r30, Y+4	; 0x04
    16c2:	fd 81       	ldd	r31, Y+5	; 0x05
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 83       	st	Z, r24
    16c8:	30 c0       	rjmp	.+96     	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    16ca:	e0 e3       	ldi	r30, 0x30	; 48
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <MDIO_u8GetPinValue+0x1b6>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <MDIO_u8GetPinValue+0x1b2>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	90 70       	andi	r25, 0x00	; 0
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <MDIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	10 82       	st	Z, r1
    16f6:	19 c0       	rjmp	.+50     	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <MDIO_u8GetPinValue+0x1e4>
    170c:	55 95       	asr	r21
    170e:	47 95       	ror	r20
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <MDIO_u8GetPinValue+0x1e0>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	88 23       	and	r24, r24
    171c:	31 f0       	breq	.+12     	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    171e:	ec 81       	ldd	r30, Y+4	; 0x04
    1720:	fd 81       	ldd	r31, Y+5	; 0x05
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	80 83       	st	Z, r24
    1726:	01 c0       	rjmp	.+2      	; 0x172a <MDIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1728:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    172a:	89 81       	ldd	r24, Y+1	; 0x01
}
    172c:	27 96       	adiw	r28, 0x07	; 7
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <MDIO_u8SetPortDirection>:
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <MDIO_u8SetPortDirection+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <MDIO_u8SetPortDirection+0x8>
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortID)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3d 83       	std	Y+5, r19	; 0x05
    175c:	2c 83       	std	Y+4, r18	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	d1 f0       	breq	.+52     	; 0x179c <MDIO_u8SetPortDirection+0x5e>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <MDIO_u8SetPortDirection+0x3e>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	61 f0       	breq	.+24     	; 0x1792 <MDIO_u8SetPortDirection+0x54>
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <MDIO_u8SetPortDirection+0x7a>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <MDIO_u8SetPortDirection+0x68>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <MDIO_u8SetPortDirection+0x72>
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <MDIO_u8SetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:DDRA_u8_REG = Copy_u8PortDirection;break;
    1792:	ea e3       	ldi	r30, 0x3A	; 58
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	80 83       	st	Z, r24
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTB:DDRB_u8_REG = Copy_u8PortDirection;break;
    179c:	e7 e3       	ldi	r30, 0x37	; 55
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	80 83       	st	Z, r24
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTC:DDRC_u8_REG = Copy_u8PortDirection;break;
    17a6:	e4 e3       	ldi	r30, 0x34	; 52
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	80 83       	st	Z, r24
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTD:DDRD_u8_REG = Copy_u8PortDirection;break;
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	80 83       	st	Z, r24
		}
			return Local_u8ReturnState;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <MDIO_u8SetPortValue>:

u8 MDIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <MDIO_u8SetPortValue+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_u8SetPortValue+0x8>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	d1 f0       	breq	.+52     	; 0x1828 <MDIO_u8SetPortValue+0x5e>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <MDIO_u8SetPortValue+0x3e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 f0       	breq	.+24     	; 0x181e <MDIO_u8SetPortValue+0x54>
    1806:	1f c0       	rjmp	.+62     	; 0x1846 <MDIO_u8SetPortValue+0x7c>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	81 f0       	breq	.+32     	; 0x1832 <MDIO_u8SetPortValue+0x68>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	81 f0       	breq	.+32     	; 0x183c <MDIO_u8SetPortValue+0x72>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <MDIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    181e:	eb e3       	ldi	r30, 0x3B	; 59
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	80 83       	st	Z, r24
    1826:	10 c0       	rjmp	.+32     	; 0x1848 <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    1828:	e8 e3       	ldi	r30, 0x38	; 56
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	80 83       	st	Z, r24
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	80 83       	st	Z, r24
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	80 83       	st	Z, r24
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <MDIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1846:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <MDIO_u8Set4PinsValue>:

u8 MDIO_u8Set4PinsValue    (u8 Copy_u8PortID, u8 Copy_u8PinStart, u8 Copy_u8PortValue)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <MDIO_u8Set4PinsValue+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <MDIO_u8Set4PinsValue+0x8>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <MDIO_u8Set4PinsValue+0xa>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
    186c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinStart<=4)
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	85 30       	cpi	r24, 0x05	; 5
    1876:	08 f0       	brcs	.+2      	; 0x187a <MDIO_u8Set4PinsValue+0x20>
    1878:	c7 c0       	rjmp	.+398    	; 0x1a08 <MDIO_u8Set4PinsValue+0x1ae>
	{
		switch(Copy_u8PortValue)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3e 83       	std	Y+6, r19	; 0x06
    1882:	2d 83       	std	Y+5, r18	; 0x05
    1884:	6d 81       	ldd	r22, Y+5	; 0x05
    1886:	7e 81       	ldd	r23, Y+6	; 0x06
    1888:	61 30       	cpi	r22, 0x01	; 1
    188a:	71 05       	cpc	r23, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <MDIO_u8Set4PinsValue+0x36>
    188e:	41 c0       	rjmp	.+130    	; 0x1912 <MDIO_u8Set4PinsValue+0xb8>
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	91 05       	cpc	r25, r1
    1898:	34 f4       	brge	.+12     	; 0x18a6 <MDIO_u8Set4PinsValue+0x4c>
    189a:	2d 81       	ldd	r18, Y+5	; 0x05
    189c:	3e 81       	ldd	r19, Y+6	; 0x06
    189e:	21 15       	cp	r18, r1
    18a0:	31 05       	cpc	r19, r1
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <MDIO_u8Set4PinsValue+0x66>
    18a4:	b2 c0       	rjmp	.+356    	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>
    18a6:	6d 81       	ldd	r22, Y+5	; 0x05
    18a8:	7e 81       	ldd	r23, Y+6	; 0x06
    18aa:	62 30       	cpi	r22, 0x02	; 2
    18ac:	71 05       	cpc	r23, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <MDIO_u8Set4PinsValue+0x58>
    18b0:	59 c0       	rjmp	.+178    	; 0x1964 <MDIO_u8Set4PinsValue+0x10a>
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <MDIO_u8Set4PinsValue+0x64>
    18bc:	7c c0       	rjmp	.+248    	; 0x19b6 <MDIO_u8Set4PinsValue+0x15c>
    18be:	a5 c0       	rjmp	.+330    	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8f e0       	ldi	r24, 0x0F	; 15
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <MDIO_u8Set4PinsValue+0x82>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	2a 95       	dec	r18
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <MDIO_u8Set4PinsValue+0x7e>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
			PORTA_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b9 01       	movw	r22, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <MDIO_u8Set4PinsValue+0xac>
    1902:	66 0f       	add	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <MDIO_u8Set4PinsValue+0xa8>
    190a:	cb 01       	movw	r24, r22
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	7c c0       	rjmp	.+248    	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1912:	a8 e3       	ldi	r26, 0x38	; 56
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e8 e3       	ldi	r30, 0x38	; 56
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8f e0       	ldi	r24, 0x0F	; 15
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <MDIO_u8Set4PinsValue+0xd4>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	2a 95       	dec	r18
    1930:	e2 f7       	brpl	.-8      	; 0x192a <MDIO_u8Set4PinsValue+0xd0>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
			PORTB_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    1938:	a8 e3       	ldi	r26, 0x38	; 56
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e3       	ldi	r30, 0x38	; 56
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	b9 01       	movw	r22, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <MDIO_u8Set4PinsValue+0xfe>
    1954:	66 0f       	add	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <MDIO_u8Set4PinsValue+0xfa>
    195c:	cb 01       	movw	r24, r22
    195e:	84 2b       	or	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	53 c0       	rjmp	.+166    	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1964:	a5 e3       	ldi	r26, 0x35	; 53
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e5 e3       	ldi	r30, 0x35	; 53
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8f e0       	ldi	r24, 0x0F	; 15
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <MDIO_u8Set4PinsValue+0x126>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	2a 95       	dec	r18
    1982:	e2 f7       	brpl	.-8      	; 0x197c <MDIO_u8Set4PinsValue+0x122>
    1984:	80 95       	com	r24
    1986:	84 23       	and	r24, r20
    1988:	8c 93       	st	X, r24
			PORTC_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    198a:	a5 e3       	ldi	r26, 0x35	; 53
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e3       	ldi	r30, 0x35	; 53
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b9 01       	movw	r22, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <MDIO_u8Set4PinsValue+0x150>
    19a6:	66 0f       	add	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	8a 95       	dec	r24
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <MDIO_u8Set4PinsValue+0x14c>
    19ae:	cb 01       	movw	r24, r22
    19b0:	84 2b       	or	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	2a c0       	rjmp	.+84     	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTD:

			PORTD_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    19b6:	a2 e3       	ldi	r26, 0x32	; 50
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8f e0       	ldi	r24, 0x0F	; 15
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <MDIO_u8Set4PinsValue+0x178>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	2a 95       	dec	r18
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <MDIO_u8Set4PinsValue+0x174>
    19d6:	80 95       	com	r24
    19d8:	84 23       	and	r24, r20
    19da:	8c 93       	st	X, r24
			PORTD_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    19dc:	a2 e3       	ldi	r26, 0x32	; 50
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e2 e3       	ldi	r30, 0x32	; 50
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	b9 01       	movw	r22, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <MDIO_u8Set4PinsValue+0x1a2>
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <MDIO_u8Set4PinsValue+0x19e>
    1a00:	cb 01       	movw	r24, r22
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <MDIO_u8Set4PinsValue+0x1b0>

		}
	}
	else
		{
			Local_u8ReturnState = STD_TYPES_NOK;
    1a08:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8ReturnState;
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a0c:	26 96       	adiw	r28, 0x06	; 6
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <MDIO_u8GetPortValue>:


u8 MDIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <MDIO_u8GetPortValue+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <MDIO_u8GetPortValue+0x8>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <MDIO_u8GetPortValue+0xa>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
    1a2e:	7c 83       	std	Y+4, r23	; 0x04
    1a30:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	e9 f1       	breq	.+122    	; 0x1ab8 <MDIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3e 83       	std	Y+6, r19	; 0x06
    1a46:	2d 83       	std	Y+5, r18	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	e1 f0       	breq	.+56     	; 0x1a8a <MDIO_u8GetPortValue+0x6c>
    1a52:	2d 81       	ldd	r18, Y+5	; 0x05
    1a54:	3e 81       	ldd	r19, Y+6	; 0x06
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <MDIO_u8GetPortValue+0x48>
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <MDIO_u8GetPortValue+0x5e>
    1a64:	27 c0       	rjmp	.+78     	; 0x1ab4 <MDIO_u8GetPortValue+0x96>
    1a66:	2d 81       	ldd	r18, Y+5	; 0x05
    1a68:	3e 81       	ldd	r19, Y+6	; 0x06
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	a1 f0       	breq	.+40     	; 0x1a98 <MDIO_u8GetPortValue+0x7a>
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	b1 f0       	breq	.+44     	; 0x1aa6 <MDIO_u8GetPortValue+0x88>
    1a7a:	1c c0       	rjmp	.+56     	; 0x1ab4 <MDIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    1a7c:	e9 e3       	ldi	r30, 0x39	; 57
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	eb 81       	ldd	r30, Y+3	; 0x03
    1a84:	fc 81       	ldd	r31, Y+4	; 0x04
    1a86:	80 83       	st	Z, r24
    1a88:	18 c0       	rjmp	.+48     	; 0x1aba <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    1a8a:	e6 e3       	ldi	r30, 0x36	; 54
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	eb 81       	ldd	r30, Y+3	; 0x03
    1a92:	fc 81       	ldd	r31, Y+4	; 0x04
    1a94:	80 83       	st	Z, r24
    1a96:	11 c0       	rjmp	.+34     	; 0x1aba <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    1a98:	e3 e3       	ldi	r30, 0x33	; 51
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa2:	80 83       	st	Z, r24
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    1aa6:	e0 e3       	ldi	r30, 0x30	; 48
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	eb 81       	ldd	r30, Y+3	; 0x03
    1aae:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab0:	80 83       	st	Z, r24
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <MDIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <MDIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1ab8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	26 96       	adiw	r28, 0x06	; 6
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <GIE_Vid_Enable>:
#include "MGIE_config.h"
#include "MGIE_Register.h"


void GIE_Vid_Enable (void)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1ad6:	af e5       	ldi	r26, 0x5F	; 95
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ef e5       	ldi	r30, 0x5F	; 95
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    1af2:	af e5       	ldi	r26, 0x5F	; 95
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e5       	ldi	r30, 0x5F	; 95
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 77       	andi	r24, 0x7F	; 127
    1afe:	8c 93       	st	X, r24
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <INT0_SetCallBack>:
static void (*GPFunc2)(void)=NULL;
/******************************************************************/
/*Make a Set Call Back Function for every Interrupt peripherals in External Interrupts*/
			/*Set Call Back Functions for External Interrupt zero*/
void INT0_SetCallBack(void(*LocPFunc)(void))
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <INT0_SetCallBack+0x6>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	90 93 6b 00 	sts	0x006B, r25
    1b1c:	80 93 6a 00 	sts	0x006A, r24
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <INT1_SetCallBack>:
/*Set Call Back Functions for External Interrupt one*/

void INT1_SetCallBack(void(*LocPFunc)(void))
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <INT1_SetCallBack+0x6>
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	9a 83       	std	Y+2, r25	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	90 93 6d 00 	sts	0x006D, r25
    1b40:	80 93 6c 00 	sts	0x006C, r24
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <INT2_SetCallBack>:
/*Set Call Back Functions for External Interrupt two*/

void INT2_SetCallBack(void(*LocPFunc)(void))
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <INT2_SetCallBack+0x6>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	90 93 6f 00 	sts	0x006F, r25
    1b64:	80 93 6e 00 	sts	0x006E, r24
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <__vector_1>:
/***************************************************************************/
/*Make a ISR Function for every Interrupt peripherals in External Interrupt*/
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_1)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    1b9c:	80 91 6a 00 	lds	r24, 0x006A
    1ba0:	90 91 6b 00 	lds	r25, 0x006B
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <__vector_1+0x40>
	{
		GPFunc0();
    1ba8:	e0 91 6a 00 	lds	r30, 0x006A
    1bac:	f0 91 6b 00 	lds	r31, 0x006B
    1bb0:	09 95       	icall
	}
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__vector_2>:
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_2)
{
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	2f 93       	push	r18
    1be4:	3f 93       	push	r19
    1be6:	4f 93       	push	r20
    1be8:	5f 93       	push	r21
    1bea:	6f 93       	push	r22
    1bec:	7f 93       	push	r23
    1bee:	8f 93       	push	r24
    1bf0:	9f 93       	push	r25
    1bf2:	af 93       	push	r26
    1bf4:	bf 93       	push	r27
    1bf6:	ef 93       	push	r30
    1bf8:	ff 93       	push	r31
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    1c02:	80 91 6c 00 	lds	r24, 0x006C
    1c06:	90 91 6d 00 	lds	r25, 0x006D
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	29 f0       	breq	.+10     	; 0x1c18 <__vector_2+0x40>
	{
		GPFunc1();
    1c0e:	e0 91 6c 00 	lds	r30, 0x006C
    1c12:	f0 91 6d 00 	lds	r31, 0x006D
    1c16:	09 95       	icall
	}
}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	ff 91       	pop	r31
    1c1e:	ef 91       	pop	r30
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <__vector_3>:
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_3)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	2f 93       	push	r18
    1c4a:	3f 93       	push	r19
    1c4c:	4f 93       	push	r20
    1c4e:	5f 93       	push	r21
    1c50:	6f 93       	push	r22
    1c52:	7f 93       	push	r23
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	af 93       	push	r26
    1c5a:	bf 93       	push	r27
    1c5c:	ef 93       	push	r30
    1c5e:	ff 93       	push	r31
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    1c68:	80 91 6e 00 	lds	r24, 0x006E
    1c6c:	90 91 6f 00 	lds	r25, 0x006F
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <__vector_3+0x40>
	{
		GPFunc2();
    1c74:	e0 91 6e 00 	lds	r30, 0x006E
    1c78:	f0 91 6f 00 	lds	r31, 0x006F
    1c7c:	09 95       	icall
	}
}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	ff 91       	pop	r31
    1c84:	ef 91       	pop	r30
    1c86:	bf 91       	pop	r27
    1c88:	af 91       	pop	r26
    1c8a:	9f 91       	pop	r25
    1c8c:	8f 91       	pop	r24
    1c8e:	7f 91       	pop	r23
    1c90:	6f 91       	pop	r22
    1c92:	5f 91       	pop	r21
    1c94:	4f 91       	pop	r20
    1c96:	3f 91       	pop	r19
    1c98:	2f 91       	pop	r18
    1c9a:	0f 90       	pop	r0
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 90       	pop	r1
    1ca2:	18 95       	reti

00001ca4 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1cac:	ab e5       	ldi	r26, 0x5B	; 91
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e5       	ldi	r30, 0x5B	; 91
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 64       	ori	r24, 0x40	; 64
    1cb8:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1cc8:	a5 e5       	ldi	r26, 0x55	; 85
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e5       	ldi	r30, 0x55	; 85
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8d 7f       	andi	r24, 0xFD	; 253
    1cd4:	8c 93       	st	X, r24
	#endif
}
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1ce4:	ab e5       	ldi	r26, 0x5B	; 91
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	eb e5       	ldi	r30, 0x5B	; 91
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	80 68       	ori	r24, 0x80	; 128
    1cf0:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1cf2:	a5 e5       	ldi	r26, 0x55	; 85
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e5       	ldi	r30, 0x55	; 85
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8b 7f       	andi	r24, 0xFB	; 251
    1cfe:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    1d00:	a5 e5       	ldi	r26, 0x55	; 85
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e5       	ldi	r30, 0x55	; 85
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 60       	ori	r24, 0x08	; 8
    1d0c:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1d1c:	ab e5       	ldi	r26, 0x5B	; 91
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	eb e5       	ldi	r30, 0x5B	; 91
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	80 62       	ori	r24, 0x20	; 32
    1d28:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1d2a:	a4 e5       	ldi	r26, 0x54	; 84
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e4 e5       	ldi	r30, 0x54	; 84
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 7b       	andi	r24, 0xBF	; 191
    1d36:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <HLCD_VidInit>:




void HLCD_VidInit(void)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e8 97       	sbiw	r28, 0x38	; 56
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a8 e4       	ldi	r26, 0x48	; 72
    1d58:	b2 e4       	ldi	r27, 0x42	; 66
    1d5a:	8d ab       	std	Y+53, r24	; 0x35
    1d5c:	9e ab       	std	Y+54, r25	; 0x36
    1d5e:	af ab       	std	Y+55, r26	; 0x37
    1d60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6d a9       	ldd	r22, Y+53	; 0x35
    1d64:	7e a9       	ldd	r23, Y+54	; 0x36
    1d66:	8f a9       	ldd	r24, Y+55	; 0x37
    1d68:	98 ad       	ldd	r25, Y+56	; 0x38
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	89 ab       	std	Y+49, r24	; 0x31
    1d7c:	9a ab       	std	Y+50, r25	; 0x32
    1d7e:	ab ab       	std	Y+51, r26	; 0x33
    1d80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d82:	69 a9       	ldd	r22, Y+49	; 0x31
    1d84:	7a a9       	ldd	r23, Y+50	; 0x32
    1d86:	8b a9       	ldd	r24, Y+51	; 0x33
    1d88:	9c a9       	ldd	r25, Y+52	; 0x34
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <HLCD_VidInit+0x66>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	98 ab       	std	Y+48, r25	; 0x30
    1da0:	8f a7       	std	Y+47, r24	; 0x2f
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <HLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1da4:	69 a9       	ldd	r22, Y+49	; 0x31
    1da6:	7a a9       	ldd	r23, Y+50	; 0x32
    1da8:	8b a9       	ldd	r24, Y+51	; 0x33
    1daa:	9c a9       	ldd	r25, Y+52	; 0x34
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <HLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	98 ab       	std	Y+48, r25	; 0x30
    1de2:	8f a7       	std	Y+47, r24	; 0x2f
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <HLCD_VidInit+0xc6>
    1de6:	88 ec       	ldi	r24, 0xC8	; 200
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9e a7       	std	Y+46, r25	; 0x2e
    1dec:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1df0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <HLCD_VidInit+0xb4>
    1df6:	9e a7       	std	Y+46, r25	; 0x2e
    1df8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	98 ab       	std	Y+48, r25	; 0x30
    1e02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e06:	98 a9       	ldd	r25, Y+48	; 0x30
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <HLCD_VidInit+0xa8>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <HLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e10:	7a a9       	ldd	r23, Y+50	; 0x32
    1e12:	8b a9       	ldd	r24, Y+51	; 0x33
    1e14:	9c a9       	ldd	r25, Y+52	; 0x34
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	98 ab       	std	Y+48, r25	; 0x30
    1e20:	8f a7       	std	Y+47, r24	; 0x2f
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	9c a7       	std	Y+44, r25	; 0x2c
    1e28:	8b a7       	std	Y+43, r24	; 0x2b
    1e2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <HLCD_VidInit+0xf0>
    1e32:	9c a7       	std	Y+44, r25	; 0x2c
    1e34:	8b a7       	std	Y+43, r24	; 0x2b
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);

#elif MODE==8
	  /*set direction*/
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RS,DIO_u8_OUTPUT);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 42 08 	call	0x1084	; 0x1084 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RW,DIO_u8_OUTPUT);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 42 08 	call	0x1084	; 0x1084 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,EN,DIO_u8_OUTPUT);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 42 08 	call	0x1084	; 0x1084 <MDIO_u8SetPinDirection>
			MDIO_u8SetPortDirection(LCD_DATA_PORT,0XFF);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	0e 94 9f 0b 	call	0x173e	; 0x173e <MDIO_u8SetPortDirection>



		HLCD_VidWriteCommend(0B00111000);//function set
    1e5c:	88 e3       	ldi	r24, 0x38	; 56
    1e5e:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e8       	ldi	r26, 0x80	; 128
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	8f a3       	std	Y+39, r24	; 0x27
    1e6c:	98 a7       	std	Y+40, r25	; 0x28
    1e6e:	a9 a7       	std	Y+41, r26	; 0x29
    1e70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6f a1       	ldd	r22, Y+39	; 0x27
    1e74:	78 a5       	ldd	r23, Y+40	; 0x28
    1e76:	89 a5       	ldd	r24, Y+41	; 0x29
    1e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8b a3       	std	Y+35, r24	; 0x23
    1e8c:	9c a3       	std	Y+36, r25	; 0x24
    1e8e:	ad a3       	std	Y+37, r26	; 0x25
    1e90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e92:	6b a1       	ldd	r22, Y+35	; 0x23
    1e94:	7c a1       	ldd	r23, Y+36	; 0x24
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <HLCD_VidInit+0x176>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a a3       	std	Y+34, r25	; 0x22
    1eb0:	89 a3       	std	Y+33, r24	; 0x21
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <HLCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <HLCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ece:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9a a3       	std	Y+34, r25	; 0x22
    1ef2:	89 a3       	std	Y+33, r24	; 0x21
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <HLCD_VidInit+0x1d6>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	98 a3       	std	Y+32, r25	; 0x20
    1efc:	8f 8f       	std	Y+31, r24	; 0x1f
    1efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f00:	98 a1       	ldd	r25, Y+32	; 0x20
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <HLCD_VidInit+0x1c4>
    1f06:	98 a3       	std	Y+32, r25	; 0x20
    1f08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9a a3       	std	Y+34, r25	; 0x22
    1f12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <HLCD_VidInit+0x1b8>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <HLCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	9e 8f       	std	Y+30, r25	; 0x1e
    1f38:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD_VidInit+0x200>
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_VidWriteCommend(0B00001100);//screen on
    1f46:	8c e0       	ldi	r24, 0x0C	; 12
    1f48:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	89 8f       	std	Y+25, r24	; 0x19
    1f56:	9a 8f       	std	Y+26, r25	; 0x1a
    1f58:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8d 8b       	std	Y+21, r24	; 0x15
    1f76:	9e 8b       	std	Y+22, r25	; 0x16
    1f78:	af 8b       	std	Y+23, r26	; 0x17
    1f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f80:	8f 89       	ldd	r24, Y+23	; 0x17
    1f82:	98 8d       	ldd	r25, Y+24	; 0x18
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <HLCD_VidInit+0x260>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c 8b       	std	Y+20, r25	; 0x14
    1f9a:	8b 8b       	std	Y+19, r24	; 0x13
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <HLCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <HLCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9c 8b       	std	Y+20, r25	; 0x14
    1fdc:	8b 8b       	std	Y+19, r24	; 0x13
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <HLCD_VidInit+0x2c0>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
    1fe8:	89 89       	ldd	r24, Y+17	; 0x11
    1fea:	9a 89       	ldd	r25, Y+18	; 0x12
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <HLCD_VidInit+0x2ae>
    1ff0:	9a 8b       	std	Y+18, r25	; 0x12
    1ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9c 8b       	std	Y+20, r25	; 0x14
    1ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <HLCD_VidInit+0x2a2>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <HLCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	98 89       	ldd	r25, Y+16	; 0x10
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <HLCD_VidInit+0x2ea>
    202c:	98 8b       	std	Y+16, r25	; 0x10
    202e:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    HLCD_VidWriteCommend(0B00000001);//clear display
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e0       	ldi	r26, 0x00	; 0
    203c:	b0 e4       	ldi	r27, 0x40	; 64
    203e:	8b 87       	std	Y+11, r24	; 0x0b
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	ad 87       	std	Y+13, r26	; 0x0d
    2044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a ef       	ldi	r20, 0xFA	; 250
    2054:	54 e4       	ldi	r21, 0x44	; 68
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8f 83       	std	Y+7, r24	; 0x07
    2060:	98 87       	std	Y+8, r25	; 0x08
    2062:	a9 87       	std	Y+9, r26	; 0x09
    2064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <HLCD_VidInit+0x34a>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <HLCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <HLCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <HLCD_VidInit+0x3aa>
    20ca:	88 ec       	ldi	r24, 0xC8	; 200
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <HLCD_VidInit+0x398>
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <HLCD_VidInit+0x38c>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <HLCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <HLCD_VidInit+0x3d4>
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(2);
		HLCD_VidWriteCommend(0B00000010);//Return Home
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif+

}
    2120:	e8 96       	adiw	r28, 0x38	; 56
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <HLCD_VidWriteCommend>:
void HLCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	6d 97       	sbiw	r28, 0x1d	; 29
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */

#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,0);  //RS=0
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2160:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e0       	ldi	r26, 0x00	; 0
    2174:	b0 e4       	ldi	r27, 0x40	; 64
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	ab 8f       	std	Y+27, r26	; 0x1b
    217c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a ef       	ldi	r20, 0xFA	; 250
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8d 8b       	std	Y+21, r24	; 0x15
    2198:	9e 8b       	std	Y+22, r25	; 0x16
    219a:	af 8b       	std	Y+23, r26	; 0x17
    219c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <HLCD_VidWriteCommend+0x8e>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	3f c0       	rjmp	.+126    	; 0x223e <HLCD_VidWriteCommend+0x10c>
	else if (__tmp > 65535)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <HLCD_VidWriteCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <HLCD_VidWriteCommend+0xee>
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	9a 89       	ldd	r25, Y+18	; 0x12
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <HLCD_VidWriteCommend+0xdc>
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <HLCD_VidWriteCommend+0xd0>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <HLCD_VidWriteCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	98 8b       	std	Y+16, r25	; 0x10
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <HLCD_VidWriteCommend+0x118>
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8b 87       	std	Y+11, r24	; 0x0b
    2266:	9c 87       	std	Y+12, r25	; 0x0c
    2268:	ad 87       	std	Y+13, r26	; 0x0d
    226a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a ef       	ldi	r20, 0xFA	; 250
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8f 83       	std	Y+7, r24	; 0x07
    2286:	98 87       	std	Y+8, r25	; 0x08
    2288:	a9 87       	std	Y+9, r26	; 0x09
    228a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <HLCD_VidWriteCommend+0x17c>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <HLCD_VidWriteCommend+0x1fa>
	else if (__tmp > 65535)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <HLCD_VidWriteCommend+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <HLCD_VidWriteCommend+0x1dc>
    22f0:	88 ec       	ldi	r24, 0xC8	; 200
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <HLCD_VidWriteCommend+0x1ca>
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <HLCD_VidWriteCommend+0x1be>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <HLCD_VidWriteCommend+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <HLCD_VidWriteCommend+0x206>
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2340:	6d 96       	adiw	r28, 0x1d	; 29
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <HLCD_VidWriteData>:
void HLCD_VidWriteData(u8 LCD_u8Data)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	6d 97       	sbiw	r28, 0x1d	; 29
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8Set4PinsValue(LCD_DATA_PORT,4,LCD_u8Data);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,1);  //RS=1
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2380:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e0       	ldi	r26, 0x00	; 0
    2394:	b0 e4       	ldi	r27, 0x40	; 64
    2396:	89 8f       	std	Y+25, r24	; 0x19
    2398:	9a 8f       	std	Y+26, r25	; 0x1a
    239a:	ab 8f       	std	Y+27, r26	; 0x1b
    239c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	69 8d       	ldd	r22, Y+25	; 0x19
    23a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a ef       	ldi	r20, 0xFA	; 250
    23ac:	54 e4       	ldi	r21, 0x44	; 68
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <HLCD_VidWriteData+0x8e>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	3f c0       	rjmp	.+126    	; 0x245e <HLCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <HLCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <HLCD_VidWriteData+0xee>
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <HLCD_VidWriteData+0xdc>
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <HLCD_VidWriteData+0xd0>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <HLCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	98 89       	ldd	r25, Y+16	; 0x10
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <HLCD_VidWriteData+0x118>
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <MDIO_u8SetPinValue>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf e3       	ldi	r27, 0x3F	; 63
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <HLCD_VidWriteData+0x17c>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <HLCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <HLCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <HLCD_VidWriteData+0x1dc>
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <HLCD_VidWriteData+0x1ca>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <HLCD_VidWriteData+0x1be>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <HLCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <HLCD_VidWriteData+0x206>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2560:	6d 96       	adiw	r28, 0x1d	; 29
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <HLCD_VoidClearDisplay>:
void HLCD_VoidClearDisplay(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
#if	MODE==4
	HLCD_VidWriteCommend(0x01>>4);
	HLCD_VidWriteCommend(0x01);
#elif MODE==8
	HLCD_VidWriteCommend(0x01);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
	//_delay_ms(20);
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <HLCD_DisplayCharacter>:
void HLCD_DisplayCharacter(u8 Copy_u8Data)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	89 83       	std	Y+1, r24	; 0x01
#if	MODE==4
	HLCD_VidWriteData(Copy_u8Data>>4);
	HLCD_VidWriteData(Copy_u8Data);
#elif MODE==8
	HLCD_VidWriteData(Copy_u8Data);
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	0e 94 a9 11 	call	0x2352	; 0x2352 <HLCD_VidWriteData>
#else
#error "WRONG CHOOSE THE MODE"
#endif
}
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <HLCD_DisplayString>:
void HLCD_DisplayString(u8* PCopy_u8String)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <HLCD_DisplayString+0x6>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_u8Count=0;
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	0e c0       	rjmp	.+28     	; 0x25d0 <HLCD_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	80 81       	ld	r24, Z
    25c6:	0e 94 c3 12 	call	0x2586	; 0x2586 <HLCD_DisplayCharacter>
		Loc_u8Count++;
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	89 83       	std	Y+1, r24	; 0x01
}
void HLCD_DisplayString(u8* PCopy_u8String)
{

	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	29 f7       	brne	.-54     	; 0x25b4 <HLCD_DisplayString+0x14>
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}


}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <HLCD_VidWriteNumber>:
void HLCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	2c 97       	sbiw	r28, 0x0c	; 12
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	69 87       	std	Y+9, r22	; 0x09
    2614:	7a 87       	std	Y+10, r23	; 0x0a
    2616:	8b 87       	std	Y+11, r24	; 0x0b
    2618:	9c 87       	std	Y+12, r25	; 0x0c
    261a:	1d 82       	std	Y+5, r1	; 0x05
    261c:	1e 82       	std	Y+6, r1	; 0x06
    261e:	1f 82       	std	Y+7, r1	; 0x07
    2620:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2622:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	ab 85       	ldd	r26, Y+11	; 0x0b
    262a:	bc 85       	ldd	r27, Y+12	; 0x0c
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	a1 05       	cpc	r26, r1
    2630:	b1 05       	cpc	r27, r1
    2632:	09 f0       	breq	.+2      	; 0x2636 <HLCD_VidWriteNumber+0x40>
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <HLCD_VidWriteNumber+0xcc>
{
	HLCD_DisplayCharacter(48);
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	0e 94 c3 12 	call	0x2586	; 0x2586 <HLCD_DisplayCharacter>
    263c:	42 c0       	rjmp	.+132    	; 0x26c2 <HLCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	af 81       	ldd	r26, Y+7	; 0x07
    2644:	b8 85       	ldd	r27, Y+8	; 0x08
    2646:	2a e0       	ldi	r18, 0x0A	; 10
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 34 14 	call	0x2868	; 0x2868 <__mulsi3>
    2656:	7b 01       	movw	r14, r22
    2658:	8c 01       	movw	r16, r24
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2660:	bc 85       	ldd	r27, Y+12	; 0x0c
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8e 0d       	add	r24, r14
    2678:	9f 1d       	adc	r25, r15
    267a:	a0 1f       	adc	r26, r16
    267c:	b1 1f       	adc	r27, r17
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	af 83       	std	Y+7, r26	; 0x07
    2684:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	af 81       	ldd	r26, Y+7	; 0x07
    268c:	b8 85       	ldd	r27, Y+8	; 0x08
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	a1 05       	cpc	r26, r1
    2692:	b1 05       	cpc	r27, r1
    2694:	21 f4       	brne	.+8      	; 0x269e <HLCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2696:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    26a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    26b6:	da 01       	movw	r26, r20
    26b8:	c9 01       	movw	r24, r18
    26ba:	89 87       	std	Y+9, r24	; 0x09
    26bc:	9a 87       	std	Y+10, r25	; 0x0a
    26be:	ab 87       	std	Y+11, r26	; 0x0b
    26c0:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	HLCD_DisplayCharacter(48);
}
while(LOC_u32num>0)
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    26c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	a1 05       	cpc	r26, r1
    26ce:	b1 05       	cpc	r27, r1
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <HLCD_VidWriteNumber+0xde>
    26d2:	b5 cf       	rjmp	.-150    	; 0x263e <HLCD_VidWriteNumber+0x48>
    26d4:	25 c0       	rjmp	.+74     	; 0x2720 <HLCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	af 81       	ldd	r26, Y+7	; 0x07
    26dc:	b8 85       	ldd	r27, Y+8	; 0x08
    26de:	2a e0       	ldi	r18, 0x0A	; 10
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_DisplayCharacter(res+48);
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	80 5d       	subi	r24, 0xD0	; 208
    26f8:	0e 94 c3 12 	call	0x2586	; 0x2586 <HLCD_DisplayCharacter>
	revrese=revrese/10;
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	af 81       	ldd	r26, Y+7	; 0x07
    2702:	b8 85       	ldd	r27, Y+8	; 0x08
    2704:	2a e0       	ldi	r18, 0x0A	; 10
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    2714:	da 01       	movw	r26, r20
    2716:	c9 01       	movw	r24, r18
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	af 83       	std	Y+7, r26	; 0x07
    271e:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	af 81       	ldd	r26, Y+7	; 0x07
    2726:	b8 85       	ldd	r27, Y+8	; 0x08
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	a1 05       	cpc	r26, r1
    272c:	b1 05       	cpc	r27, r1
    272e:	99 f6       	brne	.-90     	; 0x26d6 <HLCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    2730:	8c 81       	ldd	r24, Y+4	; 0x04
    2732:	88 23       	and	r24, r24
    2734:	61 f4       	brne	.+24     	; 0x274e <HLCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2736:	19 82       	std	Y+1, r1	; 0x01
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <HLCD_VidWriteNumber+0x150>
	{
		HLCD_DisplayCharacter(48);
    273a:	80 e3       	ldi	r24, 0x30	; 48
    273c:	0e 94 c3 12 	call	0x2586	; 0x2586 <HLCD_DisplayCharacter>
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	99 81       	ldd	r25, Y+1	; 0x01
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	98 17       	cp	r25, r24
    274c:	b0 f3       	brcs	.-20     	; 0x273a <HLCD_VidWriteNumber+0x144>
	{
		HLCD_DisplayCharacter(48);
	}
}
}
    274e:	2c 96       	adiw	r28, 0x0c	; 12
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ff 90       	pop	r15
    2764:	ef 90       	pop	r14
    2766:	08 95       	ret

00002768 <HLCD_SetPosition>:
void HLCD_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <HLCD_SetPosition+0x6>
    276e:	00 d0       	rcall	.+0      	; 0x2770 <HLCD_SetPosition+0x8>
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	6a 83       	std	Y+2, r22	; 0x02
			HLCD_VidWriteCommend((192+Copy_u8PositionNumber));
			break;
		}

#elif MODE==8
		switch(Copy_u8LineNumber)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	3c 83       	std	Y+4, r19	; 0x04
    2780:	2b 83       	std	Y+3, r18	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	31 f0       	breq	.+12     	; 0x2796 <HLCD_SetPosition+0x2e>
    278a:	2b 81       	ldd	r18, Y+3	; 0x03
    278c:	3c 81       	ldd	r19, Y+4	; 0x04
    278e:	21 30       	cpi	r18, 0x01	; 1
    2790:	31 05       	cpc	r19, r1
    2792:	31 f0       	breq	.+12     	; 0x27a0 <HLCD_SetPosition+0x38>
    2794:	09 c0       	rjmp	.+18     	; 0x27a8 <HLCD_SetPosition+0x40>
				{

				case LCD_u8_LINE0 : HLCD_VidWriteCommend(128 + Copy_u8PositionNumber);break;
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	80 58       	subi	r24, 0x80	; 128
    279a:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <HLCD_SetPosition+0x40>

				case LCD_u8_LINE1 : HLCD_VidWriteCommend(192 + Copy_u8PositionNumber);break;
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	80 54       	subi	r24, 0x40	; 64
    27a4:	0e 94 99 10 	call	0x2132	; 0x2132 <HLCD_VidWriteCommend>
#error "WRONG CHOOSE THE MODE"
#endif



}
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <main>:
#include "../HAL/HLCD/HLCD_Interface.h"
#include "avr/delay.h"
void Timer_OV(void);
u8 Counter=0;
int main(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <main+0x6>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
	/*Global interrupt enable*/
	GIE_Vid_Enable();
    27c0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <GIE_Vid_Enable>
	/*Local Variable Definition*/
	u16 Local_TCNT_Value=0;
    27c4:	1a 82       	std	Y+2, r1	; 0x02
    27c6:	19 82       	std	Y+1, r1	; 0x01
	TIMER1_OV_SetCallBack(Timer_OV);
    27c8:	88 e2       	ldi	r24, 0x28	; 40
    27ca:	94 e1       	ldi	r25, 0x14	; 20
    27cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMER1_OV_SetCallBack>
	/*LCD INITIALIZATION*/
		HLCD_VidInit();
    27d0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <HLCD_VidInit>

	/*Timer 1 Initialization*/
	TIMER1_INIT();
    27d4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TIMER1_INIT>
	MDIO_u8SetPortDirection(DIO_u8_PORTB,DIO_u8_OUTPUT);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	0e 94 9f 0b 	call	0x173e	; 0x173e <MDIO_u8SetPortDirection>
	MDIO_u8SetPortValue(DIO_u8_PORTB,DIO_u8_HIGH);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8SetPortValue>
	MDIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
    27e8:	83 e0       	ldi	r24, 0x03	; 3
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 42 08 	call	0x1084	; 0x1084 <MDIO_u8SetPinDirection>
	MDIO_u8SetPortDirection(DIO_u8_PORTB,DIO_u8_OUTPUT);
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	0e 94 9f 0b 	call	0x173e	; 0x173e <MDIO_u8SetPortDirection>
	MDIO_u8SetPortValue(DIO_u8_PORTB,DIO_u8_HIGH);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_u8SetPortValue>
	MDIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_INPUT);
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 42 08 	call	0x1084	; 0x1084 <MDIO_u8SetPinDirection>
	Local_TCNT_Value=Timer1_U16GetTCNT1Value();
    280c:	0e 94 17 08 	call	0x102e	; 0x102e <Timer1_U16GetTCNT1Value>
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
	GIE_Vid_Disable();
    2814:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GIE_Vid_Disable>
	HLCD_SetPosition(0,0);
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	0e 94 b4 13 	call	0x2768	; 0x2768 <HLCD_SetPosition>
	HLCD_VidWriteNumber(Local_TCNT_Value);
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	cc 01       	movw	r24, r24
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <HLCD_VidWriteNumber>
	HLCD_SetPosition(1,0);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	0e 94 b4 13 	call	0x2768	; 0x2768 <HLCD_SetPosition>
	HLCD_VidWriteNumber(Counter);
    283a:	80 91 70 00 	lds	r24, 0x0070
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <HLCD_VidWriteNumber>
    284e:	ff cf       	rjmp	.-2      	; 0x284e <main+0x98>

00002850 <Timer_OV>:

	}
	return 0;
}
void Timer_OV(void)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	Counter++;
    2858:	80 91 70 00 	lds	r24, 0x0070
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	80 93 70 00 	sts	0x0070, r24
}
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <__mulsi3>:
    2868:	62 9f       	mul	r22, r18
    286a:	d0 01       	movw	r26, r0
    286c:	73 9f       	mul	r23, r19
    286e:	f0 01       	movw	r30, r0
    2870:	82 9f       	mul	r24, r18
    2872:	e0 0d       	add	r30, r0
    2874:	f1 1d       	adc	r31, r1
    2876:	64 9f       	mul	r22, r20
    2878:	e0 0d       	add	r30, r0
    287a:	f1 1d       	adc	r31, r1
    287c:	92 9f       	mul	r25, r18
    287e:	f0 0d       	add	r31, r0
    2880:	83 9f       	mul	r24, r19
    2882:	f0 0d       	add	r31, r0
    2884:	74 9f       	mul	r23, r20
    2886:	f0 0d       	add	r31, r0
    2888:	65 9f       	mul	r22, r21
    288a:	f0 0d       	add	r31, r0
    288c:	99 27       	eor	r25, r25
    288e:	72 9f       	mul	r23, r18
    2890:	b0 0d       	add	r27, r0
    2892:	e1 1d       	adc	r30, r1
    2894:	f9 1f       	adc	r31, r25
    2896:	63 9f       	mul	r22, r19
    2898:	b0 0d       	add	r27, r0
    289a:	e1 1d       	adc	r30, r1
    289c:	f9 1f       	adc	r31, r25
    289e:	bd 01       	movw	r22, r26
    28a0:	cf 01       	movw	r24, r30
    28a2:	11 24       	eor	r1, r1
    28a4:	08 95       	ret

000028a6 <__udivmodsi4>:
    28a6:	a1 e2       	ldi	r26, 0x21	; 33
    28a8:	1a 2e       	mov	r1, r26
    28aa:	aa 1b       	sub	r26, r26
    28ac:	bb 1b       	sub	r27, r27
    28ae:	fd 01       	movw	r30, r26
    28b0:	0d c0       	rjmp	.+26     	; 0x28cc <__udivmodsi4_ep>

000028b2 <__udivmodsi4_loop>:
    28b2:	aa 1f       	adc	r26, r26
    28b4:	bb 1f       	adc	r27, r27
    28b6:	ee 1f       	adc	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	a2 17       	cp	r26, r18
    28bc:	b3 07       	cpc	r27, r19
    28be:	e4 07       	cpc	r30, r20
    28c0:	f5 07       	cpc	r31, r21
    28c2:	20 f0       	brcs	.+8      	; 0x28cc <__udivmodsi4_ep>
    28c4:	a2 1b       	sub	r26, r18
    28c6:	b3 0b       	sbc	r27, r19
    28c8:	e4 0b       	sbc	r30, r20
    28ca:	f5 0b       	sbc	r31, r21

000028cc <__udivmodsi4_ep>:
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	1a 94       	dec	r1
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <__udivmodsi4_loop>
    28d8:	60 95       	com	r22
    28da:	70 95       	com	r23
    28dc:	80 95       	com	r24
    28de:	90 95       	com	r25
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	bd 01       	movw	r22, r26
    28e6:	cf 01       	movw	r24, r30
    28e8:	08 95       	ret

000028ea <__prologue_saves__>:
    28ea:	2f 92       	push	r2
    28ec:	3f 92       	push	r3
    28ee:	4f 92       	push	r4
    28f0:	5f 92       	push	r5
    28f2:	6f 92       	push	r6
    28f4:	7f 92       	push	r7
    28f6:	8f 92       	push	r8
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	ca 1b       	sub	r28, r26
    2914:	db 0b       	sbc	r29, r27
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	09 94       	ijmp

00002922 <__epilogue_restores__>:
    2922:	2a 88       	ldd	r2, Y+18	; 0x12
    2924:	39 88       	ldd	r3, Y+17	; 0x11
    2926:	48 88       	ldd	r4, Y+16	; 0x10
    2928:	5f 84       	ldd	r5, Y+15	; 0x0f
    292a:	6e 84       	ldd	r6, Y+14	; 0x0e
    292c:	7d 84       	ldd	r7, Y+13	; 0x0d
    292e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2930:	9b 84       	ldd	r9, Y+11	; 0x0b
    2932:	aa 84       	ldd	r10, Y+10	; 0x0a
    2934:	b9 84       	ldd	r11, Y+9	; 0x09
    2936:	c8 84       	ldd	r12, Y+8	; 0x08
    2938:	df 80       	ldd	r13, Y+7	; 0x07
    293a:	ee 80       	ldd	r14, Y+6	; 0x06
    293c:	fd 80       	ldd	r15, Y+5	; 0x05
    293e:	0c 81       	ldd	r16, Y+4	; 0x04
    2940:	1b 81       	ldd	r17, Y+3	; 0x03
    2942:	aa 81       	ldd	r26, Y+2	; 0x02
    2944:	b9 81       	ldd	r27, Y+1	; 0x01
    2946:	ce 0f       	add	r28, r30
    2948:	d1 1d       	adc	r29, r1
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	ed 01       	movw	r28, r26
    2956:	08 95       	ret

00002958 <_exit>:
    2958:	f8 94       	cli

0000295a <__stop_program>:
    295a:	ff cf       	rjmp	.-2      	; 0x295a <__stop_program>
