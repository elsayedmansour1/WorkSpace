
PWM_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000316c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  0000316c  00003200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800194  00800194  00003334  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  00003334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001152  00000000  00000000  00005b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000945b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a7e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000be6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_1>
       8:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_2>
       c:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_3>
      10:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_4>
      14:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_7>
      20:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_8>
      24:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_9>
      28:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_10>
      2c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <main>
      8a:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8d 18 	jmp	0x311a	; 0x311a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 56       	subi	r30, 0x6D	; 109
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T2)(void)=NULL;
static void (*GPFunc_T1)(void)=NULL;


void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER0_OV_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 95 01 	sts	0x0195, r25
     e44:	80 93 94 01 	sts	0x0194, r24
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <TIMER0_CM_SetCallBack+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	90 93 95 01 	sts	0x0195, r25
     e68:	80 93 94 01 	sts	0x0194, r24
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <TIMER1_OV_SetCallBack+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	90 93 99 01 	sts	0x0199, r25
     e8c:	80 93 98 01 	sts	0x0198, r24
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <TIMER1_CM_A_SetCallBack+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 99 01 	sts	0x0199, r25
     eb0:	80 93 98 01 	sts	0x0198, r24
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <TIMER1_CM_B_SetCallBack+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 99 01 	sts	0x0199, r25
     ed4:	80 93 98 01 	sts	0x0198, r24
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <TIMER2_OV_SetCallBack+0x6>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	90 93 97 01 	sts	0x0197, r25
     ef8:	80 93 96 01 	sts	0x0196, r24
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <TIMER2_CM_SetCallBack+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	90 93 97 01 	sts	0x0197, r25
     f1c:	80 93 96 01 	sts	0x0196, r24
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     f54:	80 91 94 01 	lds	r24, 0x0194
     f58:	90 91 95 01 	lds	r25, 0x0195
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	29 f0       	breq	.+10     	; 0xf6a <__vector_11+0x40>
	{
		GPFunc_T0();
     f60:	e0 91 94 01 	lds	r30, 0x0194
     f64:	f0 91 95 01 	lds	r31, 0x0195
     f68:	09 95       	icall
	}
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_10>:
ISR_TMR0_Comp()
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     fba:	80 91 94 01 	lds	r24, 0x0194
     fbe:	90 91 95 01 	lds	r25, 0x0195
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <__vector_10+0x40>
	{
		GPFunc_T0();
     fc6:	e0 91 94 01 	lds	r30, 0x0194
     fca:	f0 91 95 01 	lds	r31, 0x0195
     fce:	09 95       	icall
	}
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1020:	80 91 98 01 	lds	r24, 0x0198
    1024:	90 91 99 01 	lds	r25, 0x0199
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_9+0x40>
		{
			GPFunc_T1();
    102c:	e0 91 98 01 	lds	r30, 0x0198
    1030:	f0 91 99 01 	lds	r31, 0x0199
    1034:	09 95       	icall
		}
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_7>:
ISR_TMR1_CompA()
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1086:	80 91 98 01 	lds	r24, 0x0198
    108a:	90 91 99 01 	lds	r25, 0x0199
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	29 f0       	breq	.+10     	; 0x109c <__vector_7+0x40>
		{
			GPFunc_T1();
    1092:	e0 91 98 01 	lds	r30, 0x0198
    1096:	f0 91 99 01 	lds	r31, 0x0199
    109a:	09 95       	icall
		}
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <__vector_8>:
ISR_TMR1_CompB()
{
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    10ec:	80 91 98 01 	lds	r24, 0x0198
    10f0:	90 91 99 01 	lds	r25, 0x0199
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	29 f0       	breq	.+10     	; 0x1102 <__vector_8+0x40>
		{
			GPFunc_T1();
    10f8:	e0 91 98 01 	lds	r30, 0x0198
    10fc:	f0 91 99 01 	lds	r31, 0x0199
    1100:	09 95       	icall
		}
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1152:	80 91 96 01 	lds	r24, 0x0196
    1156:	90 91 97 01 	lds	r25, 0x0197
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	29 f0       	breq	.+10     	; 0x1168 <__vector_5+0x40>
	{
		GPFunc_T2();
    115e:	e0 91 96 01 	lds	r30, 0x0196
    1162:	f0 91 97 01 	lds	r31, 0x0197
    1166:	09 95       	icall
	}
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_4>:
ISR_TMR2_Comp()
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	2f 93       	push	r18
    119a:	3f 93       	push	r19
    119c:	4f 93       	push	r20
    119e:	5f 93       	push	r21
    11a0:	6f 93       	push	r22
    11a2:	7f 93       	push	r23
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	af 93       	push	r26
    11aa:	bf 93       	push	r27
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    11b8:	80 91 96 01 	lds	r24, 0x0196
    11bc:	90 91 97 01 	lds	r25, 0x0197
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	29 f0       	breq	.+10     	; 0x11ce <__vector_4+0x40>
	{
		GPFunc_T2();
    11c4:	e0 91 96 01 	lds	r30, 0x0196
    11c8:	f0 91 97 01 	lds	r31, 0x0197
    11cc:	09 95       	icall
	}
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	8c 93       	st	X, r24
    120a:	a3 e5       	ldi	r26, 0x53	; 83
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e3 e5       	ldi	r30, 0x53	; 83
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    1218:	a3 e5       	ldi	r26, 0x53	; 83
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e3 e5       	ldi	r30, 0x53	; 83
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 62       	ori	r24, 0x20	; 32
    1224:	8c 93       	st	X, r24
    1226:	a3 e5       	ldi	r26, 0x53	; 83
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e3 e5       	ldi	r30, 0x53	; 83
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 7e       	andi	r24, 0xEF	; 239
    1232:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    1234:	a3 e5       	ldi	r26, 0x53	; 83
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e3 e5       	ldi	r30, 0x53	; 83
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	8c 93       	st	X, r24
    1242:	a3 e5       	ldi	r26, 0x53	; 83
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e3 e5       	ldi	r30, 0x53	; 83
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	8c 93       	st	X, r24
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=625;		// For 50 Hz for servo motor
    126c:	e6 e4       	ldi	r30, 0x46	; 70
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	81 e7       	ldi	r24, 0x71	; 113
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
	prescaler_clk_256_1;
    1278:	ae e4       	ldi	r26, 0x4E	; 78
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	ee e4       	ldi	r30, 0x4E	; 78
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	8c 93       	st	X, r24
    1286:	ae e4       	ldi	r26, 0x4E	; 78
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ee e4       	ldi	r30, 0x4E	; 78
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	8c 93       	st	X, r24
    1294:	ae e4       	ldi	r26, 0x4E	; 78
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	ee e4       	ldi	r30, 0x4E	; 78
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8e 7f       	andi	r24, 0xFE	; 254
    12a0:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    12a2:	af e4       	ldi	r26, 0x4F	; 79
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ef e4       	ldi	r30, 0x4F	; 79
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	8c 93       	st	X, r24
    12b0:	af e4       	ldi	r26, 0x4F	; 79
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e4       	ldi	r30, 0x4F	; 79
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	8c 93       	st	X, r24
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	8c 93       	st	X, r24
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 61       	ori	r24, 0x10	; 16
    12d8:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    12da:	af e4       	ldi	r26, 0x4F	; 79
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ef e4       	ldi	r30, 0x4F	; 79
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	8c 93       	st	X, r24
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8f 7e       	andi	r24, 0xEF	; 239
    1302:	8c 93       	st	X, r24
    1304:	af e4       	ldi	r26, 0x4F	; 79
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e4       	ldi	r30, 0x4F	; 79
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	80 62       	ori	r24, 0x20	; 32
    1310:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_2;
	prescaler_clk_8_2;
	Non_PWM_Normal_OC0_disconnected_2;
	Compare_Match_Interrupt_Enable_2;
#elif Timer2_Mode==Fast_PWM_Timer2_Mode
	Fast_PWM_2;
    1320:	a5 e4       	ldi	r26, 0x45	; 69
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e4       	ldi	r30, 0x45	; 69
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	8c 93       	st	X, r24
    132e:	a5 e4       	ldi	r26, 0x45	; 69
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e4       	ldi	r30, 0x45	; 69
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 64       	ori	r24, 0x40	; 64
    133a:	8c 93       	st	X, r24
	NonInverted_Mode_2;
    133c:	a5 e4       	ldi	r26, 0x45	; 69
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e5 e4       	ldi	r30, 0x45	; 69
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 62       	ori	r24, 0x20	; 32
    1348:	8c 93       	st	X, r24
    134a:	a5 e4       	ldi	r26, 0x45	; 69
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e4       	ldi	r30, 0x45	; 69
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7e       	andi	r24, 0xEF	; 239
    1356:	8c 93       	st	X, r24
	prescaler_clk_256_2;
    1358:	a5 e4       	ldi	r26, 0x45	; 69
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e4       	ldi	r30, 0x45	; 69
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	8c 93       	st	X, r24
    1366:	a5 e4       	ldi	r26, 0x45	; 69
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e4       	ldi	r30, 0x45	; 69
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	8c 93       	st	X, r24
    1374:	a5 e4       	ldi	r26, 0x45	; 69
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e4       	ldi	r30, 0x45	; 69
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8e 7f       	andi	r24, 0xFE	; 254
    1380:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1390:	a9 e5       	ldi	r26, 0x59	; 89
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e9 e5       	ldi	r30, 0x59	; 89
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 62       	ori	r24, 0x20	; 32
    139c:	8c 93       	st	X, r24
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <Set_Duty_Cycle_TIMER_0+0xa>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <Set_Duty_Cycle_TIMER_0+0xc>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	69 83       	std	Y+1, r22	; 0x01
    13b6:	7a 83       	std	Y+2, r23	; 0x02
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    13bc:	69 81       	ldd	r22, Y+1	; 0x01
    13be:	7a 81       	ldd	r23, Y+2	; 0x02
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	48 ec       	ldi	r20, 0xC8	; 200
    13ca:	52 e4       	ldi	r21, 0x42	; 66
    13cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	ab 83       	std	Y+3, r26	; 0x03
    13da:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    13dc:	0c e5       	ldi	r16, 0x5C	; 92
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	69 81       	ldd	r22, Y+1	; 0x01
    13e2:	7a 81       	ldd	r23, Y+2	; 0x02
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	53 e4       	ldi	r21, 0x43	; 67
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	f8 01       	movw	r30, r16
    141a:	80 83       	st	Z, r24

}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	08 95       	ret

0000142e <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <Set_Duty_Cycle_TIMER_1_A+0xa>
    1438:	00 d0       	rcall	.+0      	; 0x143a <Set_Duty_Cycle_TIMER_1_A+0xc>
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	69 83       	std	Y+1, r22	; 0x01
    1440:	7a 83       	std	Y+2, r23	; 0x02
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1446:	69 81       	ldd	r22, Y+1	; 0x01
    1448:	7a 81       	ldd	r23, Y+2	; 0x02
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	48 ec       	ldi	r20, 0xC8	; 200
    1454:	52 e4       	ldi	r21, 0x42	; 66
    1456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	ab 83       	std	Y+3, r26	; 0x03
    1464:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    1466:	0a e4       	ldi	r16, 0x4A	; 74
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	e6 e4       	ldi	r30, 0x46	; 70
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	cc 01       	movw	r24, r24
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	3a 81       	ldd	r19, Y+2	; 0x02
    148c:	4b 81       	ldd	r20, Y+3	; 0x03
    148e:	5c 81       	ldd	r21, Y+4	; 0x04
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	f8 01       	movw	r30, r16
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <Set_Duty_Cycle_TIMER_1_B+0xa>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <Set_Duty_Cycle_TIMER_1_B+0xc>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	69 83       	std	Y+1, r22	; 0x01
    14e2:	7a 83       	std	Y+2, r23	; 0x02
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    14e8:	69 81       	ldd	r22, Y+1	; 0x01
    14ea:	7a 81       	ldd	r23, Y+2	; 0x02
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	48 ec       	ldi	r20, 0xC8	; 200
    14f6:	52 e4       	ldi	r21, 0x42	; 66
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	ab 83       	std	Y+3, r26	; 0x03
    1506:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    1508:	08 e4       	ldi	r16, 0x48	; 72
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	e6 e4       	ldi	r30, 0x46	; 70
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	cc 01       	movw	r24, r24
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	29 81       	ldd	r18, Y+1	; 0x01
    152c:	3a 81       	ldd	r19, Y+2	; 0x02
    152e:	4b 81       	ldd	r20, Y+3	; 0x03
    1530:	5c 81       	ldd	r21, Y+4	; 0x04
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	f8 01       	movw	r30, r16
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <Set_Duty_Cycle_TIMER_2+0xa>
    157c:	00 d0       	rcall	.+0      	; 0x157e <Set_Duty_Cycle_TIMER_2+0xc>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	69 83       	std	Y+1, r22	; 0x01
    1584:	7a 83       	std	Y+2, r23	; 0x02
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	7a 81       	ldd	r23, Y+2	; 0x02
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	48 ec       	ldi	r20, 0xC8	; 200
    1598:	52 e4       	ldi	r21, 0x42	; 66
    159a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	ab 83       	std	Y+3, r26	; 0x03
    15a8:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    15aa:	03 e4       	ldi	r16, 0x43	; 67
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	69 81       	ldd	r22, Y+1	; 0x01
    15b0:	7a 81       	ldd	r23, Y+2	; 0x02
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	f8 01       	movw	r30, r16
    15e8:	80 83       	st	Z, r24

}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1604:	af e5       	ldi	r26, 0x5F	; 95
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ef e5       	ldi	r30, 0x5F	; 95
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	8c 93       	st	X, r24
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    1620:	af e5       	ldi	r26, 0x5F	; 95
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ef e5       	ldi	r30, 0x5F	; 95
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8f 77       	andi	r24, 0x7F	; 127
    162c:	8c 93       	st	X, r24
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <INT0_SetCallBack+0x6>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	90 93 9b 01 	sts	0x019B, r25
    164a:	80 93 9a 01 	sts	0x019A, r24
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <INT1_SetCallBack+0x6>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	90 93 9d 01 	sts	0x019D, r25
    166e:	80 93 9c 01 	sts	0x019C, r24
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <INT2_SetCallBack+0x6>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	90 93 9f 01 	sts	0x019F, r25
    1692:	80 93 9e 01 	sts	0x019E, r24
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <__vector_1>:
ISR(__vector_1)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    16ca:	80 91 9a 01 	lds	r24, 0x019A
    16ce:	90 91 9b 01 	lds	r25, 0x019B
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <__vector_1+0x40>
	{
		GPFunc0();
    16d6:	e0 91 9a 01 	lds	r30, 0x019A
    16da:	f0 91 9b 01 	lds	r31, 0x019B
    16de:	09 95       	icall
	}
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_2>:
ISR(__vector_2)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    1730:	80 91 9c 01 	lds	r24, 0x019C
    1734:	90 91 9d 01 	lds	r25, 0x019D
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	29 f0       	breq	.+10     	; 0x1746 <__vector_2+0x40>
	{
		GPFunc1();
    173c:	e0 91 9c 01 	lds	r30, 0x019C
    1740:	f0 91 9d 01 	lds	r31, 0x019D
    1744:	09 95       	icall
	}
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_3>:
ISR(__vector_3)
{
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    1796:	80 91 9e 01 	lds	r24, 0x019E
    179a:	90 91 9f 01 	lds	r25, 0x019F
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	29 f0       	breq	.+10     	; 0x17ac <__vector_3+0x40>
	{
		GPFunc2();
    17a2:	e0 91 9e 01 	lds	r30, 0x019E
    17a6:	f0 91 9f 01 	lds	r31, 0x019F
    17aa:	09 95       	icall
	}
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    17da:	ab e5       	ldi	r26, 0x5B	; 91
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e5       	ldi	r30, 0x5B	; 91
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    17e8:	a5 e5       	ldi	r26, 0x55	; 85
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e5       	ldi	r30, 0x55	; 85
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    17f6:	a5 e5       	ldi	r26, 0x55	; 85
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e5 e5       	ldi	r30, 0x55	; 85
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	8d 7f       	andi	r24, 0xFD	; 253
    1802:	8c 93       	st	X, r24
	#endif
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1812:	ab e5       	ldi	r26, 0x5B	; 91
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e5       	ldi	r30, 0x5B	; 91
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 68       	ori	r24, 0x80	; 128
    181e:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1820:	a5 e5       	ldi	r26, 0x55	; 85
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e5       	ldi	r30, 0x55	; 85
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 60       	ori	r24, 0x08	; 8
    183a:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    184a:	ab e5       	ldi	r26, 0x5B	; 91
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e5       	ldi	r30, 0x5B	; 91
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 62       	ori	r24, 0x20	; 32
    1856:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1858:	a4 e5       	ldi	r26, 0x54	; 84
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e4 e5       	ldi	r30, 0x54	; 84
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8f 7b       	andi	r24, 0xBF	; 191
    1864:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	27 97       	sbiw	r28, 0x07	; 7
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
    1884:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	09 f0       	breq	.+2      	; 0x188e <DIO_VidSetPinDirection+0x22>
    188c:	6f c0       	rjmp	.+222    	; 0x196c <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3f 83       	std	Y+7, r19	; 0x07
    1896:	2e 83       	std	Y+6, r18	; 0x06
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	49 f1       	breq	.+82     	; 0x18f4 <DIO_VidSetPinDirection+0x88>
    18a2:	2e 81       	ldd	r18, Y+6	; 0x06
    18a4:	3f 81       	ldd	r19, Y+7	; 0x07
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <DIO_VidSetPinDirection+0x4a>
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	9f 81       	ldd	r25, Y+7	; 0x07
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	61 f0       	breq	.+24     	; 0x18cc <DIO_VidSetPinDirection+0x60>
    18b4:	d2 c0       	rjmp	.+420    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
    18b6:	2e 81       	ldd	r18, Y+6	; 0x06
    18b8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	71 f1       	breq	.+92     	; 0x191c <DIO_VidSetPinDirection+0xb0>
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	e9 f1       	breq	.+122    	; 0x1944 <DIO_VidSetPinDirection+0xd8>
    18ca:	c7 c0       	rjmp	.+398    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    18cc:	aa e3       	ldi	r26, 0x3A	; 58
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ea e3       	ldi	r30, 0x3A	; 58
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_VidSetPinDirection+0x7e>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_VidSetPinDirection+0x7a>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	b3 c0       	rjmp	.+358    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    18f4:	a7 e3       	ldi	r26, 0x37	; 55
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_VidSetPinDirection+0xa6>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_VidSetPinDirection+0xa2>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	9f c0       	rjmp	.+318    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    191c:	a4 e3       	ldi	r26, 0x34	; 52
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e3       	ldi	r30, 0x34	; 52
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_VidSetPinDirection+0xce>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_VidSetPinDirection+0xca>
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	8b c0       	rjmp	.+278    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1944:	a1 e3       	ldi	r26, 0x31	; 49
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e1 e3       	ldi	r30, 0x31	; 49
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_VidSetPinDirection+0xf6>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_VidSetPinDirection+0xf2>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	77 c0       	rjmp	.+238    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 23       	and	r24, r24
    1970:	09 f0       	breq	.+2      	; 0x1974 <DIO_VidSetPinDirection+0x108>
    1972:	73 c0       	rjmp	.+230    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3d 83       	std	Y+5, r19	; 0x05
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	91 05       	cpc	r25, r1
    1986:	59 f1       	breq	.+86     	; 0x19de <DIO_VidSetPinDirection+0x172>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <DIO_VidSetPinDirection+0x130>
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	9d 81       	ldd	r25, Y+5	; 0x05
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	69 f0       	breq	.+26     	; 0x19b4 <DIO_VidSetPinDirection+0x148>
    199a:	5f c0       	rjmp	.+190    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	89 f1       	breq	.+98     	; 0x1a08 <DIO_VidSetPinDirection+0x19c>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <DIO_VidSetPinDirection+0x146>
    19b0:	40 c0       	rjmp	.+128    	; 0x1a32 <DIO_VidSetPinDirection+0x1c6>
    19b2:	53 c0       	rjmp	.+166    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_VidSetPinDirection+0x166>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_VidSetPinDirection+0x162>
    19d6:	80 95       	com	r24
    19d8:	84 23       	and	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	3e c0       	rjmp	.+124    	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    19de:	a7 e3       	ldi	r26, 0x37	; 55
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e7 e3       	ldi	r30, 0x37	; 55
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_VidSetPinDirection+0x190>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <DIO_VidSetPinDirection+0x18c>
    1a00:	80 95       	com	r24
    1a02:	84 23       	and	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	29 c0       	rjmp	.+82     	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1a08:	a4 e3       	ldi	r26, 0x34	; 52
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e4 e3       	ldi	r30, 0x34	; 52
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_VidSetPinDirection+0x1ba>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_VidSetPinDirection+0x1b6>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1a32:	a1 e3       	ldi	r26, 0x31	; 49
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e1 e3       	ldi	r30, 0x31	; 49
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_VidSetPinDirection+0x1e4>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_VidSetPinDirection+0x1e0>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1a5a:	27 96       	adiw	r28, 0x07	; 7
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	27 97       	sbiw	r28, 0x07	; 7
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	6a 83       	std	Y+2, r22	; 0x02
    1a84:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <DIO_VidSetPinValue+0x22>
    1a8c:	6f c0       	rjmp	.+222    	; 0x1b6c <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3f 83       	std	Y+7, r19	; 0x07
    1a96:	2e 83       	std	Y+6, r18	; 0x06
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	49 f1       	breq	.+82     	; 0x1af4 <DIO_VidSetPinValue+0x88>
    1aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <DIO_VidSetPinValue+0x4a>
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <DIO_VidSetPinValue+0x60>
    1ab4:	d2 c0       	rjmp	.+420    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
    1ab6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab8:	3f 81       	ldd	r19, Y+7	; 0x07
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	71 f1       	breq	.+92     	; 0x1b1c <DIO_VidSetPinValue+0xb0>
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	e9 f1       	breq	.+122    	; 0x1b44 <DIO_VidSetPinValue+0xd8>
    1aca:	c7 c0       	rjmp	.+398    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1acc:	ab e3       	ldi	r26, 0x3B	; 59
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	eb e3       	ldi	r30, 0x3B	; 59
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_VidSetPinValue+0x7e>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <DIO_VidSetPinValue+0x7a>
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	b3 c0       	rjmp	.+358    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1af4:	a8 e3       	ldi	r26, 0x38	; 56
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e8 e3       	ldi	r30, 0x38	; 56
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_VidSetPinValue+0xa6>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_VidSetPinValue+0xa2>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	9f c0       	rjmp	.+318    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    1b1c:	a5 e3       	ldi	r26, 0x35	; 53
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e3       	ldi	r30, 0x35	; 53
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_VidSetPinValue+0xce>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_VidSetPinValue+0xca>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	8b c0       	rjmp	.+278    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1b44:	a2 e3       	ldi	r26, 0x32	; 50
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e2 e3       	ldi	r30, 0x32	; 50
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_VidSetPinValue+0xf6>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_VidSetPinValue+0xf2>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	77 c0       	rjmp	.+238    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <DIO_VidSetPinValue+0x108>
    1b72:	73 c0       	rjmp	.+230    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3d 83       	std	Y+5, r19	; 0x05
    1b7c:	2c 83       	std	Y+4, r18	; 0x04
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	59 f1       	breq	.+86     	; 0x1bde <DIO_VidSetPinValue+0x172>
    1b88:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <DIO_VidSetPinValue+0x130>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f0       	breq	.+26     	; 0x1bb4 <DIO_VidSetPinValue+0x148>
    1b9a:	5f c0       	rjmp	.+190    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
    1b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	89 f1       	breq	.+98     	; 0x1c08 <DIO_VidSetPinValue+0x19c>
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <DIO_VidSetPinValue+0x146>
    1bb0:	40 c0       	rjmp	.+128    	; 0x1c32 <DIO_VidSetPinValue+0x1c6>
    1bb2:	53 c0       	rjmp	.+166    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1bb4:	ab e3       	ldi	r26, 0x3B	; 59
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	eb e3       	ldi	r30, 0x3B	; 59
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_VidSetPinValue+0x166>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_VidSetPinValue+0x162>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	3e c0       	rjmp	.+124    	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    1bde:	a8 e3       	ldi	r26, 0x38	; 56
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e8 e3       	ldi	r30, 0x38	; 56
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_VidSetPinValue+0x190>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_VidSetPinValue+0x18c>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	29 c0       	rjmp	.+82     	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_VidSetPinValue+0x1ba>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_VidSetPinValue+0x1b6>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1c32:	a2 e3       	ldi	r26, 0x32	; 50
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e2 e3       	ldi	r30, 0x32	; 50
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_VidSetPinValue+0x1e4>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_VidSetPinValue+0x1e0>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1c5a:	27 96       	adiw	r28, 0x07	; 7
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <DIO_VidSetPortDirection+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <DIO_VidSetPortDirection+0x8>
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3c 83       	std	Y+4, r19	; 0x04
    1c84:	2b 83       	std	Y+3, r18	; 0x03
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	d1 f0       	breq	.+52     	; 0x1cc4 <DIO_VidSetPortDirection+0x58>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <DIO_VidSetPortDirection+0x38>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <DIO_VidSetPortDirection+0x4e>
    1ca2:	1e c0       	rjmp	.+60     	; 0x1ce0 <DIO_VidSetPortDirection+0x74>
    1ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <DIO_VidSetPortDirection+0x62>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	83 30       	cpi	r24, 0x03	; 3
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	81 f0       	breq	.+32     	; 0x1cd8 <DIO_VidSetPortDirection+0x6c>
    1cb8:	13 c0       	rjmp	.+38     	; 0x1ce0 <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1cba:	ea e3       	ldi	r30, 0x3A	; 58
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 83       	st	Z, r24
    1cc2:	0e c0       	rjmp	.+28     	; 0x1ce0 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    1cc4:	e7 e3       	ldi	r30, 0x37	; 55
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	80 83       	st	Z, r24
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    1cce:	e4 e3       	ldi	r30, 0x34	; 52
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	80 83       	st	Z, r24
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    1cd8:	e1 e3       	ldi	r30, 0x31	; 49
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
	}	
	
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <DIO_VidSetPortValue+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <DIO_VidSetPortValue+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	d1 f0       	breq	.+52     	; 0x1d46 <DIO_VidSetPortValue+0x58>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <DIO_VidSetPortValue+0x38>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <DIO_VidSetPortValue+0x4e>
    1d24:	1e c0       	rjmp	.+60     	; 0x1d62 <DIO_VidSetPortValue+0x74>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <DIO_VidSetPortValue+0x62>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	81 f0       	breq	.+32     	; 0x1d5a <DIO_VidSetPortValue+0x6c>
    1d3a:	13 c0       	rjmp	.+38     	; 0x1d62 <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    1d3c:	eb e3       	ldi	r30, 0x3B	; 59
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	80 83       	st	Z, r24
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 83       	st	Z, r24
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    1d50:	e5 e3       	ldi	r30, 0x35	; 53
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    1d5a:	e2 e3       	ldi	r30, 0x32	; 50
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 83       	st	Z, r24
	}	
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <DIO_u8GetPinValue+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <DIO_u8GetPinValue+0x8>
    1d78:	0f 92       	push	r0
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    1d82:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3d 83       	std	Y+5, r19	; 0x05
    1d8c:	2c 83       	std	Y+4, r18	; 0x04
    1d8e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d90:	5d 81       	ldd	r21, Y+5	; 0x05
    1d92:	41 30       	cpi	r20, 0x01	; 1
    1d94:	51 05       	cpc	r21, r1
    1d96:	41 f1       	breq	.+80     	; 0x1de8 <DIO_u8GetPinValue+0x78>
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	91 05       	cpc	r25, r1
    1da0:	34 f4       	brge	.+12     	; 0x1dae <DIO_u8GetPinValue+0x3e>
    1da2:	2c 81       	ldd	r18, Y+4	; 0x04
    1da4:	3d 81       	ldd	r19, Y+5	; 0x05
    1da6:	21 15       	cp	r18, r1
    1da8:	31 05       	cpc	r19, r1
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <DIO_u8GetPinValue+0x54>
    1dac:	52 c0       	rjmp	.+164    	; 0x1e52 <DIO_u8GetPinValue+0xe2>
    1dae:	4c 81       	ldd	r20, Y+4	; 0x04
    1db0:	5d 81       	ldd	r21, Y+5	; 0x05
    1db2:	42 30       	cpi	r20, 0x02	; 2
    1db4:	51 05       	cpc	r21, r1
    1db6:	51 f1       	breq	.+84     	; 0x1e0c <DIO_u8GetPinValue+0x9c>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	b9 f1       	breq	.+110    	; 0x1e30 <DIO_u8GetPinValue+0xc0>
    1dc2:	47 c0       	rjmp	.+142    	; 0x1e52 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    1dc4:	e9 e3       	ldi	r30, 0x39	; 57
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_u8GetPinValue+0x6c>
    1dd8:	55 95       	asr	r21
    1dda:	47 95       	ror	r20
    1ddc:	8a 95       	dec	r24
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <DIO_u8GetPinValue+0x68>
    1de0:	ca 01       	movw	r24, r20
    1de2:	81 70       	andi	r24, 0x01	; 1
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	35 c0       	rjmp	.+106    	; 0x1e52 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    1de8:	e6 e3       	ldi	r30, 0x36	; 54
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_u8GetPinValue+0x90>
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_u8GetPinValue+0x8c>
    1e04:	ca 01       	movw	r24, r20
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	23 c0       	rjmp	.+70     	; 0x1e52 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    1e0c:	e3 e3       	ldi	r30, 0x33	; 51
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_u8GetPinValue+0xb4>
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	8a 95       	dec	r24
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_u8GetPinValue+0xb0>
    1e28:	ca 01       	movw	r24, r20
    1e2a:	81 70       	andi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	11 c0       	rjmp	.+34     	; 0x1e52 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    1e30:	e0 e3       	ldi	r30, 0x30	; 48
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a9 01       	movw	r20, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_u8GetPinValue+0xd8>
    1e44:	55 95       	asr	r21
    1e46:	47 95       	ror	r20
    1e48:	8a 95       	dec	r24
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <DIO_u8GetPinValue+0xd4>
    1e4c:	ca 01       	movw	r24, r20
    1e4e:	81 70       	andi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_u8TogglePinValue+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_u8TogglePinValue+0x8>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3c 83       	std	Y+4, r19	; 0x04
    1e7c:	2b 83       	std	Y+3, r18	; 0x03
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	49 f1       	breq	.+82     	; 0x1eda <DIO_u8TogglePinValue+0x76>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <DIO_u8TogglePinValue+0x38>
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <DIO_u8TogglePinValue+0x4e>
    1e9a:	5a c0       	rjmp	.+180    	; 0x1f50 <DIO_u8TogglePinValue+0xec>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	71 f1       	breq	.+92     	; 0x1f02 <DIO_u8TogglePinValue+0x9e>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	91 05       	cpc	r25, r1
    1eae:	e9 f1       	breq	.+122    	; 0x1f2a <DIO_u8TogglePinValue+0xc6>
    1eb0:	4f c0       	rjmp	.+158    	; 0x1f50 <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    1eb2:	ab e3       	ldi	r26, 0x3B	; 59
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	eb e3       	ldi	r30, 0x3B	; 59
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8TogglePinValue+0x6c>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8TogglePinValue+0x68>
    1ed4:	84 27       	eor	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	3b c0       	rjmp	.+118    	; 0x1f50 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    1eda:	a8 e3       	ldi	r26, 0x38	; 56
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e8 e3       	ldi	r30, 0x38	; 56
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <DIO_u8TogglePinValue+0x94>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <DIO_u8TogglePinValue+0x90>
    1efc:	84 27       	eor	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	27 c0       	rjmp	.+78     	; 0x1f50 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_u8TogglePinValue+0xbc>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_u8TogglePinValue+0xb8>
    1f24:	84 27       	eor	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	13 c0       	rjmp	.+38     	; 0x1f50 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    1f2a:	a2 e3       	ldi	r26, 0x32	; 50
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e2 e3       	ldi	r30, 0x32	; 50
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <DIO_u8TogglePinValue+0xe4>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <DIO_u8TogglePinValue+0xe0>
    1f4c:	84 27       	eor	r24, r20
    1f4e:	8c 93       	st	X, r24
	}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <ADC_SetCallBack+0x6>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	90 93 a1 01 	sts	0x01A1, r25
    1f74:	80 93 a0 01 	sts	0x01A0, r24
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	2f 93       	push	r18
    1f8e:	3f 93       	push	r19
    1f90:	4f 93       	push	r20
    1f92:	5f 93       	push	r21
    1f94:	6f 93       	push	r22
    1f96:	7f 93       	push	r23
    1f98:	8f 93       	push	r24
    1f9a:	9f 93       	push	r25
    1f9c:	af 93       	push	r26
    1f9e:	bf 93       	push	r27
    1fa0:	ef 93       	push	r30
    1fa2:	ff 93       	push	r31
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    1fac:	80 91 a0 01 	lds	r24, 0x01A0
    1fb0:	90 91 a1 01 	lds	r25, 0x01A1
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <__vector_16+0x40>
	{
		GPFunc();
    1fb8:	e0 91 a0 01 	lds	r30, 0x01A0
    1fbc:	f0 91 a1 01 	lds	r31, 0x01A1
    1fc0:	09 95       	icall
	}
}
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	ff 91       	pop	r31
    1fc8:	ef 91       	pop	r30
    1fca:	bf 91       	pop	r27
    1fcc:	af 91       	pop	r26
    1fce:	9f 91       	pop	r25
    1fd0:	8f 91       	pop	r24
    1fd2:	7f 91       	pop	r23
    1fd4:	6f 91       	pop	r22
    1fd6:	5f 91       	pop	r21
    1fd8:	4f 91       	pop	r20
    1fda:	3f 91       	pop	r19
    1fdc:	2f 91       	pop	r18
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    1ff0:	a7 e2       	ldi	r26, 0x27	; 39
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e7 e2       	ldi	r30, 0x27	; 39
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 64       	ori	r24, 0x40	; 64
    1ffc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    1ffe:	a7 e2       	ldi	r26, 0x27	; 39
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e7 e2       	ldi	r30, 0x27	; 39
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 77       	andi	r24, 0x7F	; 127
    200a:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    200c:	a6 e2       	ldi	r26, 0x26	; 38
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e6 e2       	ldi	r30, 0x26	; 38
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8e 7f       	andi	r24, 0xFE	; 254
    2018:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	84 60       	ori	r24, 0x04	; 4
    2034:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    2036:	a7 e2       	ldi	r26, 0x27	; 39
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e7 e2       	ldi	r30, 0x27	; 39
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 7d       	andi	r24, 0xDF	; 223
    2042:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADATE);
		CLR_BIT(SFIOR,ADTS0);
		CLR_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	#elif	ADC_Mode==ADC_External_Interrupt_0_Trigger
		SET_BIT(ADCSRA,ADATE);
    2044:	a6 e2       	ldi	r26, 0x26	; 38
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e6 e2       	ldi	r30, 0x26	; 38
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	80 62       	ori	r24, 0x20	; 32
    2050:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    2052:	a0 e5       	ldi	r26, 0x50	; 80
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e0 e5       	ldi	r30, 0x50	; 80
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 7d       	andi	r24, 0xDF	; 223
    205e:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
    2060:	a0 e5       	ldi	r26, 0x50	; 80
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e0 e5       	ldi	r30, 0x50	; 80
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 64       	ori	r24, 0x40	; 64
    206c:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    206e:	a0 e5       	ldi	r26, 0x50	; 80
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e0 e5       	ldi	r30, 0x50	; 80
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8f 77       	andi	r24, 0x7F	; 127
    207a:	8c 93       	st	X, r24
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    207c:	a6 e2       	ldi	r26, 0x26	; 38
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e6 e2       	ldi	r30, 0x26	; 38
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 68       	ori	r24, 0x80	; 128
    2088:	8c 93       	st	X, r24
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    2098:	a6 e2       	ldi	r26, 0x26	; 38
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e6 e2       	ldi	r30, 0x26	; 38
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 64       	ori	r24, 0x40	; 64
    20a4:	8c 93       	st	X, r24
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	0f 92       	push	r0
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    20b8:	a7 e2       	ldi	r26, 0x27	; 39
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e7 e2       	ldi	r30, 0x27	; 39
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 7e       	andi	r24, 0xE0	; 224
    20c4:	8c 93       	st	X, r24
	ADMUX|=Channal;
    20c6:	a7 e2       	ldi	r26, 0x27	; 39
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e7 e2       	ldi	r30, 0x27	; 39
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	90 81       	ld	r25, Z
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	89 2b       	or	r24, r25
    20d4:	8c 93       	st	X, r24
}
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    20e6:	a6 e2       	ldi	r26, 0x26	; 38
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e6 e2       	ldi	r30, 0x26	; 38
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	88 60       	ori	r24, 0x08	; 8
    20f2:	8c 93       	st	X, r24
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    2102:	e6 e2       	ldi	r30, 0x26	; 38
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	82 95       	swap	r24
    210a:	8f 70       	andi	r24, 0x0F	; 15
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	a9 f3       	breq	.-22     	; 0x2102 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    2118:	a6 e2       	ldi	r26, 0x26	; 38
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e6 e2       	ldi	r30, 0x26	; 38
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 61       	ori	r24, 0x10	; 16
    2124:	8c 93       	st	X, r24
}
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <ADC_Get_Result+0x6>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    213a:	e4 e2       	ldi	r30, 0x24	; 36
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	6c 97       	sbiw	r28, 0x1c	; 28
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	64 e0       	ldi	r22, 0x04	; 4
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e8       	ldi	r26, 0x80	; 128
    2178:	bf e3       	ldi	r27, 0x3F	; 63
    217a:	89 8f       	std	Y+25, r24	; 0x19
    217c:	9a 8f       	std	Y+26, r25	; 0x1a
    217e:	ab 8f       	std	Y+27, r26	; 0x1b
    2180:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8d 8b       	std	Y+21, r24	; 0x15
    219c:	9e 8b       	std	Y+22, r25	; 0x16
    219e:	af 8b       	std	Y+23, r26	; 0x17
    21a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	69 8d       	ldd	r22, Y+25	; 0x19
    21de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9c 8b       	std	Y+20, r25	; 0x14
    2202:	8b 8b       	std	Y+19, r24	; 0x13
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_VidPulseEnable+0xd0>
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9a 8b       	std	Y+18, r25	; 0x12
    220c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220e:	89 89       	ldd	r24, Y+17	; 0x11
    2210:	9a 89       	ldd	r25, Y+18	; 0x12
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_VidPulseEnable+0xbe>
    2216:	9a 8b       	std	Y+18, r25	; 0x12
    2218:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9c 8b       	std	Y+20, r25	; 0x14
    2222:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_VidPulseEnable+0xb2>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9c 8b       	std	Y+20, r25	; 0x14
    2240:	8b 8b       	std	Y+19, r24	; 0x13
    2242:	8b 89       	ldd	r24, Y+19	; 0x13
    2244:	9c 89       	ldd	r25, Y+20	; 0x14
    2246:	98 8b       	std	Y+16, r25	; 0x10
    2248:	8f 87       	std	Y+15, r24	; 0x0f
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	98 89       	ldd	r25, Y+16	; 0x10
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_VidPulseEnable+0xfa>
    2252:	98 8b       	std	Y+16, r25	; 0x10
    2254:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	64 e0       	ldi	r22, 0x04	; 4
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	8b 87       	std	Y+11, r24	; 0x0b
    226a:	9c 87       	std	Y+12, r25	; 0x0c
    226c:	ad 87       	std	Y+13, r26	; 0x0d
    226e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	7c 85       	ldd	r23, Y+12	; 0x0c
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8f 83       	std	Y+7, r24	; 0x07
    228a:	98 87       	std	Y+8, r25	; 0x08
    228c:	a9 87       	std	Y+9, r26	; 0x09
    228e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9e 83       	std	Y+6, r25	; 0x06
    22f0:	8d 83       	std	Y+5, r24	; 0x05
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <LCD_VidPulseEnable+0x1be>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_VidPulseEnable+0x1ac>
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <LCD_VidPulseEnable+0x1a0>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_VidPulseEnable+0x1e8>
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2344:	6c 96       	adiw	r28, 0x1c	; 28
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_VidInit>:
void LCD_VidInit(void)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	e8 97       	sbiw	r28, 0x38	; 56
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a8 e4       	ldi	r26, 0x48	; 72
    2370:	b2 e4       	ldi	r27, 0x42	; 66
    2372:	8d ab       	std	Y+53, r24	; 0x35
    2374:	9e ab       	std	Y+54, r25	; 0x36
    2376:	af ab       	std	Y+55, r26	; 0x37
    2378:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6d a9       	ldd	r22, Y+53	; 0x35
    237c:	7e a9       	ldd	r23, Y+54	; 0x36
    237e:	8f a9       	ldd	r24, Y+55	; 0x37
    2380:	98 ad       	ldd	r25, Y+56	; 0x38
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a ef       	ldi	r20, 0xFA	; 250
    2388:	54 e4       	ldi	r21, 0x44	; 68
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	89 ab       	std	Y+49, r24	; 0x31
    2394:	9a ab       	std	Y+50, r25	; 0x32
    2396:	ab ab       	std	Y+51, r26	; 0x33
    2398:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239a:	69 a9       	ldd	r22, Y+49	; 0x31
    239c:	7a a9       	ldd	r23, Y+50	; 0x32
    239e:	8b a9       	ldd	r24, Y+51	; 0x33
    23a0:	9c a9       	ldd	r25, Y+52	; 0x34
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_VidInit+0x66>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	98 ab       	std	Y+48, r25	; 0x30
    23b8:	8f a7       	std	Y+47, r24	; 0x2f
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6d a9       	ldd	r22, Y+53	; 0x35
    23d6:	7e a9       	ldd	r23, Y+54	; 0x36
    23d8:	8f a9       	ldd	r24, Y+55	; 0x37
    23da:	98 ad       	ldd	r25, Y+56	; 0x38
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	98 ab       	std	Y+48, r25	; 0x30
    23fa:	8f a7       	std	Y+47, r24	; 0x2f
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_VidInit+0xc6>
    23fe:	88 ec       	ldi	r24, 0xC8	; 200
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9e a7       	std	Y+46, r25	; 0x2e
    2404:	8d a7       	std	Y+45, r24	; 0x2d
    2406:	8d a5       	ldd	r24, Y+45	; 0x2d
    2408:	9e a5       	ldd	r25, Y+46	; 0x2e
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_VidInit+0xb4>
    240e:	9e a7       	std	Y+46, r25	; 0x2e
    2410:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8f a5       	ldd	r24, Y+47	; 0x2f
    241e:	98 a9       	ldd	r25, Y+48	; 0x30
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_VidInit+0xa8>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	69 a9       	ldd	r22, Y+49	; 0x31
    2428:	7a a9       	ldd	r23, Y+50	; 0x32
    242a:	8b a9       	ldd	r24, Y+51	; 0x33
    242c:	9c a9       	ldd	r25, Y+52	; 0x34
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	98 ab       	std	Y+48, r25	; 0x30
    2438:	8f a7       	std	Y+47, r24	; 0x2f
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	9c a7       	std	Y+44, r25	; 0x2c
    2440:	8b a7       	std	Y+43, r24	; 0x2b
    2442:	8b a5       	ldd	r24, Y+43	; 0x2b
    2444:	9c a5       	ldd	r25, Y+44	; 0x2c
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_VidInit+0xf0>
    244a:	9c a7       	std	Y+44, r25	; 0x2c
    244c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		/* END OF DISPLAY CLEAR */

#elif MODE==8
	  /*set direction*/
		DIO_VidSetPortDirection(LCD_DATA_PORT,0XFF);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	6f ef       	ldi	r22, 0xFF	; 255
    2452:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DIO_VidSetPortDirection>
		DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	67 e0       	ldi	r22, 0x07	; 7
    245a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DIO_VidSetPortDirection>

		LCD_VidWriteCommend(0B00111000);//function set
    245e:	88 e3       	ldi	r24, 0x38	; 56
    2460:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e8       	ldi	r26, 0x80	; 128
    246a:	bf e3       	ldi	r27, 0x3F	; 63
    246c:	8f a3       	std	Y+39, r24	; 0x27
    246e:	98 a7       	std	Y+40, r25	; 0x28
    2470:	a9 a7       	std	Y+41, r26	; 0x29
    2472:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	6f a1       	ldd	r22, Y+39	; 0x27
    2476:	78 a5       	ldd	r23, Y+40	; 0x28
    2478:	89 a5       	ldd	r24, Y+41	; 0x29
    247a:	9a a5       	ldd	r25, Y+42	; 0x2a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a ef       	ldi	r20, 0xFA	; 250
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8b a3       	std	Y+35, r24	; 0x23
    248e:	9c a3       	std	Y+36, r25	; 0x24
    2490:	ad a3       	std	Y+37, r26	; 0x25
    2492:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2494:	6b a1       	ldd	r22, Y+35	; 0x23
    2496:	7c a1       	ldd	r23, Y+36	; 0x24
    2498:	8d a1       	ldd	r24, Y+37	; 0x25
    249a:	9e a1       	ldd	r25, Y+38	; 0x26
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <LCD_VidInit+0x160>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9a a3       	std	Y+34, r25	; 0x22
    24b2:	89 a3       	std	Y+33, r24	; 0x21
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <LCD_VidInit+0x1de>
	else if (__tmp > 65535)
    24b6:	6b a1       	ldd	r22, Y+35	; 0x23
    24b8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ba:	8d a1       	ldd	r24, Y+37	; 0x25
    24bc:	9e a1       	ldd	r25, Y+38	; 0x26
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <LCD_VidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	6f a1       	ldd	r22, Y+39	; 0x27
    24d0:	78 a5       	ldd	r23, Y+40	; 0x28
    24d2:	89 a5       	ldd	r24, Y+41	; 0x29
    24d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <LCD_VidInit+0x1c0>
    24f8:	88 ec       	ldi	r24, 0xC8	; 200
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	98 a3       	std	Y+32, r25	; 0x20
    24fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2500:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2502:	98 a1       	ldd	r25, Y+32	; 0x20
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_VidInit+0x1ae>
    2508:	98 a3       	std	Y+32, r25	; 0x20
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9a a3       	std	Y+34, r25	; 0x22
    2514:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	89 a1       	ldd	r24, Y+33	; 0x21
    2518:	9a a1       	ldd	r25, Y+34	; 0x22
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <LCD_VidInit+0x1a2>
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <LCD_VidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	6b a1       	ldd	r22, Y+35	; 0x23
    2522:	7c a1       	ldd	r23, Y+36	; 0x24
    2524:	8d a1       	ldd	r24, Y+37	; 0x25
    2526:	9e a1       	ldd	r25, Y+38	; 0x26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	9e 8f       	std	Y+30, r25	; 0x1e
    253a:	8d 8f       	std	Y+29, r24	; 0x1d
    253c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCD_VidInit+0x1ea>
    2544:	9e 8f       	std	Y+30, r25	; 0x1e
    2546:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidWriteCommend(0B00001100);//screen on
    2548:	8c e0       	ldi	r24, 0x0C	; 12
    254a:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e8       	ldi	r26, 0x80	; 128
    2554:	bf e3       	ldi	r27, 0x3F	; 63
    2556:	89 8f       	std	Y+25, r24	; 0x19
    2558:	9a 8f       	std	Y+26, r25	; 0x1a
    255a:	ab 8f       	std	Y+27, r26	; 0x1b
    255c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255e:	69 8d       	ldd	r22, Y+25	; 0x19
    2560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a ef       	ldi	r20, 0xFA	; 250
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8d 8b       	std	Y+21, r24	; 0x15
    2578:	9e 8b       	std	Y+22, r25	; 0x16
    257a:	af 8b       	std	Y+23, r26	; 0x17
    257c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_VidInit+0x24a>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 8b       	std	Y+20, r25	; 0x14
    259c:	8b 8b       	std	Y+19, r24	; 0x13
    259e:	3f c0       	rjmp	.+126    	; 0x261e <LCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    25a0:	6d 89       	ldd	r22, Y+21	; 0x15
    25a2:	7e 89       	ldd	r23, Y+22	; 0x16
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	4c f5       	brge	.+82     	; 0x260a <LCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	69 8d       	ldd	r22, Y+25	; 0x19
    25ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9c 8b       	std	Y+20, r25	; 0x14
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_VidInit+0x2aa>
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9a 8b       	std	Y+18, r25	; 0x12
    25e8:	89 8b       	std	Y+17, r24	; 0x11
    25ea:	89 89       	ldd	r24, Y+17	; 0x11
    25ec:	9a 89       	ldd	r25, Y+18	; 0x12
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_VidInit+0x298>
    25f2:	9a 8b       	std	Y+18, r25	; 0x12
    25f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9c 8b       	std	Y+20, r25	; 0x14
    25fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f7       	brne	.-38     	; 0x25e2 <LCD_VidInit+0x28c>
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <LCD_VidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	6d 89       	ldd	r22, Y+21	; 0x15
    260c:	7e 89       	ldd	r23, Y+22	; 0x16
    260e:	8f 89       	ldd	r24, Y+23	; 0x17
    2610:	98 8d       	ldd	r25, Y+24	; 0x18
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	8b 89       	ldd	r24, Y+19	; 0x13
    2620:	9c 89       	ldd	r25, Y+20	; 0x14
    2622:	98 8b       	std	Y+16, r25	; 0x10
    2624:	8f 87       	std	Y+15, r24	; 0x0f
    2626:	8f 85       	ldd	r24, Y+15	; 0x0f
    2628:	98 89       	ldd	r25, Y+16	; 0x10
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_VidInit+0x2d4>
    262e:	98 8b       	std	Y+16, r25	; 0x10
    2630:	8f 87       	std	Y+15, r24	; 0x0f
	          _delay_ms(1);
		LCD_VidWriteCommend(0B00000001);//clear display
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e4       	ldi	r27, 0x40	; 64
    2640:	8b 87       	std	Y+11, r24	; 0x0b
    2642:	9c 87       	std	Y+12, r25	; 0x0c
    2644:	ad 87       	std	Y+13, r26	; 0x0d
    2646:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8f 83       	std	Y+7, r24	; 0x07
    2662:	98 87       	std	Y+8, r25	; 0x08
    2664:	a9 87       	std	Y+9, r26	; 0x09
    2666:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <LCD_VidInit+0x334>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <LCD_VidInit+0x3b2>
	else if (__tmp > 65535)
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <LCD_VidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <LCD_VidInit+0x394>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <LCD_VidInit+0x382>
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <LCD_VidInit+0x376>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <LCD_VidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_VidInit+0x3be>
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
	          _delay_ms(2);
		LCD_VidWriteCommend(0B00000110);//Mode Set
    271c:	86 e0       	ldi	r24, 0x06	; 6
    271e:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000010);//Return Home
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2734:	e8 96       	adiw	r28, 0x38	; 56
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	89 83       	std	Y+1, r24	; 0x01
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();	
#elif MODE==8
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN0,0);  //RS=0
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN1,0);  //RW=0
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	61 e0       	ldi	r22, 0x01	; 1
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	69 81       	ldd	r22, Y+1	; 0x01
    276a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <DIO_VidSetPortValue>

	LCD_VidPulseEnable();
    276e:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_VidPulseEnable>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	6d 97       	sbiw	r28, 0x1d	; 29
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	8d 8f       	std	Y+29, r24	; 0x1d
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();
#elif MODE==8
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1);  //RS=0
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	62 e0       	ldi	r22, 0x02	; 2
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	63 e0       	ldi	r22, 0x03	; 3
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27a8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    27ac:	83 e0       	ldi	r24, 0x03	; 3
    27ae:	64 e0       	ldi	r22, 0x04	; 4
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a0 e8       	ldi	r26, 0x80	; 128
    27bc:	bf e3       	ldi	r27, 0x3F	; 63
    27be:	89 8f       	std	Y+25, r24	; 0x19
    27c0:	9a 8f       	std	Y+26, r25	; 0x1a
    27c2:	ab 8f       	std	Y+27, r26	; 0x1b
    27c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8d 8b       	std	Y+21, r24	; 0x15
    27e0:	9e 8b       	std	Y+22, r25	; 0x16
    27e2:	af 8b       	std	Y+23, r26	; 0x17
    27e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    2808:	6d 89       	ldd	r22, Y+21	; 0x15
    280a:	7e 89       	ldd	r23, Y+22	; 0x16
    280c:	8f 89       	ldd	r24, Y+23	; 0x17
    280e:	98 8d       	ldd	r25, Y+24	; 0x18
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	69 8d       	ldd	r22, Y+25	; 0x19
    2822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9c 8b       	std	Y+20, r25	; 0x14
    2846:	8b 8b       	std	Y+19, r24	; 0x13
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <LCD_VidWriteData+0xee>
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9a 8b       	std	Y+18, r25	; 0x12
    2850:	89 8b       	std	Y+17, r24	; 0x11
    2852:	89 89       	ldd	r24, Y+17	; 0x11
    2854:	9a 89       	ldd	r25, Y+18	; 0x12
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_VidWriteData+0xdc>
    285a:	9a 8b       	std	Y+18, r25	; 0x12
    285c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <LCD_VidWriteData+0xd0>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	8b 89       	ldd	r24, Y+19	; 0x13
    2888:	9c 89       	ldd	r25, Y+20	; 0x14
    288a:	98 8b       	std	Y+16, r25	; 0x10
    288c:	8f 87       	std	Y+15, r24	; 0x0f
    288e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2890:	98 89       	ldd	r25, Y+16	; 0x10
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_VidWriteData+0x118>
    2896:	98 8b       	std	Y+16, r25	; 0x10
    2898:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_VidSetPinValue>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e8       	ldi	r26, 0x80	; 128
    28aa:	bf e3       	ldi	r27, 0x3F	; 63
    28ac:	8b 87       	std	Y+11, r24	; 0x0b
    28ae:	9c 87       	std	Y+12, r25	; 0x0c
    28b0:	ad 87       	std	Y+13, r26	; 0x0d
    28b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8f 83       	std	Y+7, r24	; 0x07
    28ce:	98 87       	std	Y+8, r25	; 0x08
    28d0:	a9 87       	std	Y+9, r26	; 0x09
    28d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d4:	6f 81       	ldd	r22, Y+7	; 0x07
    28d6:	78 85       	ldd	r23, Y+8	; 0x08
    28d8:	89 85       	ldd	r24, Y+9	; 0x09
    28da:	9a 85       	ldd	r25, Y+10	; 0x0a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2910:	7c 85       	ldd	r23, Y+12	; 0x0c
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	9e 85       	ldd	r25, Y+14	; 0x0e
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <LCD_VidWriteData+0x1dc>
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_VidWriteData+0x1ca>
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <LCD_VidWriteData+0x1be>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6f 81       	ldd	r22, Y+7	; 0x07
    2962:	78 85       	ldd	r23, Y+8	; 0x08
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	9a 85       	ldd	r25, Y+10	; 0x0a
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_VidWriteData+0x206>
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2988:	6d 96       	adiw	r28, 0x1d	; 29
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <LCD_VidWriteString>:


void LCD_VidWriteString(char *ptr)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <LCD_VidWriteString+0x6>
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;i<100;i++)
    29aa:	19 82       	std	Y+1, r1	; 0x01
    29ac:	19 c0       	rjmp	.+50     	; 0x29e0 <LCD_VidWriteString+0x46>
	{
		if(ptr[i]=='\0')
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	9b 81       	ldd	r25, Y+3	; 0x03
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	80 81       	ld	r24, Z
    29c0:	88 23       	and	r24, r24
    29c2:	89 f0       	breq	.+34     	; 0x29e6 <LCD_VidWriteString+0x4c>
		    {
		    	break;
		    }
	LCD_VidWriteData(ptr[i]);
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	9b 81       	ldd	r25, Y+3	; 0x03
    29ce:	fc 01       	movw	r30, r24
    29d0:	e2 0f       	add	r30, r18
    29d2:	f3 1f       	adc	r31, r19
    29d4:	80 81       	ld	r24, Z
    29d6:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
}


void LCD_VidWriteString(char *ptr)
{
	for(u8 i=0;i<100;i++)
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	8f 5f       	subi	r24, 0xFF	; 255
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	84 36       	cpi	r24, 0x64	; 100
    29e4:	20 f3       	brcs	.-56     	; 0x29ae <LCD_VidWriteString+0x14>
		    }
	LCD_VidWriteData(ptr[i]);

	}

}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	2c 97       	sbiw	r28, 0x0c	; 12
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	69 87       	std	Y+9, r22	; 0x09
    2a10:	7a 87       	std	Y+10, r23	; 0x0a
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	1d 82       	std	Y+5, r1	; 0x05
    2a18:	1e 82       	std	Y+6, r1	; 0x06
    2a1a:	1f 82       	std	Y+7, r1	; 0x07
    2a1c:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2a1e:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a26:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	a1 05       	cpc	r26, r1
    2a2c:	b1 05       	cpc	r27, r1
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <LCD_VidWriteNumber+0x40>
    2a30:	46 c0       	rjmp	.+140    	; 0x2abe <LCD_VidWriteNumber+0xcc>
{
	LCD_VidWriteData(48);
    2a32:	80 e3       	ldi	r24, 0x30	; 48
    2a34:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
    2a38:	42 c0       	rjmp	.+132    	; 0x2abe <LCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	af 81       	ldd	r26, Y+7	; 0x07
    2a40:	b8 85       	ldd	r27, Y+8	; 0x08
    2a42:	2a e0       	ldi	r18, 0x0A	; 10
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 3c 18 	call	0x3078	; 0x3078 <__mulsi3>
    2a52:	7b 01       	movw	r14, r22
    2a54:	8c 01       	movw	r16, r24
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a5c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a5e:	2a e0       	ldi	r18, 0x0A	; 10
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8e 0d       	add	r24, r14
    2a74:	9f 1d       	adc	r25, r15
    2a76:	a0 1f       	adc	r26, r16
    2a78:	b1 1f       	adc	r27, r17
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	af 83       	std	Y+7, r26	; 0x07
    2a80:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	af 81       	ldd	r26, Y+7	; 0x07
    2a88:	b8 85       	ldd	r27, Y+8	; 0x08
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	a1 05       	cpc	r26, r1
    2a8e:	b1 05       	cpc	r27, r1
    2a90:	21 f4       	brne	.+8      	; 0x2a9a <LCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2a92:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2aa0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2aa2:	2a e0       	ldi	r18, 0x0A	; 10
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    2ab2:	da 01       	movw	r26, r20
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	89 87       	std	Y+9, r24	; 0x09
    2ab8:	9a 87       	std	Y+10, r25	; 0x0a
    2aba:	ab 87       	std	Y+11, r26	; 0x0b
    2abc:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_VidWriteData(48);
}
while(LOC_u32num>0)
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ac4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	a1 05       	cpc	r26, r1
    2aca:	b1 05       	cpc	r27, r1
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <LCD_VidWriteNumber+0xde>
    2ace:	b5 cf       	rjmp	.-150    	; 0x2a3a <LCD_VidWriteNumber+0x48>
    2ad0:	25 c0       	rjmp	.+74     	; 0x2b1c <LCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	af 81       	ldd	r26, Y+7	; 0x07
    2ad8:	b8 85       	ldd	r27, Y+8	; 0x08
    2ada:	2a e0       	ldi	r18, 0x0A	; 10
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(res+48);
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	80 5d       	subi	r24, 0xD0	; 208
    2af4:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
	revrese=revrese/10;
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	af 81       	ldd	r26, Y+7	; 0x07
    2afe:	b8 85       	ldd	r27, Y+8	; 0x08
    2b00:	2a e0       	ldi	r18, 0x0A	; 10
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    2b10:	da 01       	movw	r26, r20
    2b12:	c9 01       	movw	r24, r18
    2b14:	8d 83       	std	Y+5, r24	; 0x05
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	af 83       	std	Y+7, r26	; 0x07
    2b1a:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	af 81       	ldd	r26, Y+7	; 0x07
    2b22:	b8 85       	ldd	r27, Y+8	; 0x08
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	a1 05       	cpc	r26, r1
    2b28:	b1 05       	cpc	r27, r1
    2b2a:	99 f6       	brne	.-90     	; 0x2ad2 <LCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
    2b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2e:	88 23       	and	r24, r24
    2b30:	61 f4       	brne	.+24     	; 0x2b4a <LCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2b32:	19 82       	std	Y+1, r1	; 0x01
    2b34:	06 c0       	rjmp	.+12     	; 0x2b42 <LCD_VidWriteNumber+0x150>
	{
LCD_VidWriteData(48);
    2b36:	80 e3       	ldi	r24, 0x30	; 48
    2b38:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	99 81       	ldd	r25, Y+1	; 0x01
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	98 17       	cp	r25, r24
    2b48:	b0 f3       	brcs	.-20     	; 0x2b36 <LCD_VidWriteNumber+0x144>
	{
LCD_VidWriteData(48);
	}
}
}
    2b4a:	2c 96       	adiw	r28, 0x0c	; 12
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	08 95       	ret

00002b64 <LCD_GoToXY>:

void LCD_GoToXY(u8 row,u8 col)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <LCD_GoToXY+0x6>
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	88 23       	and	r24, r24
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <LCD_GoToXY+0x1e>
	{
		LCD_VidWriteCommend(128+col);
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	80 58       	subi	r24, 0x80	; 128
    2b7c:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
    2b80:	07 c0       	rjmp	.+14     	; 0x2b90 <LCD_GoToXY+0x2c>
	}
	else if (row==1)
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	81 30       	cpi	r24, 0x01	; 1
    2b86:	21 f4       	brne	.+8      	; 0x2b90 <LCD_GoToXY+0x2c>
	{
		LCD_VidWriteCommend(192+col);
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	80 54       	subi	r24, 0x40	; 64
    2b8c:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
	}
}
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <LCD_CONSTANT>:

void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
    2b9a:	0f 93       	push	r16
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	27 97       	sbiw	r28, 0x07	; 7
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	6c 83       	std	Y+4, r22	; 0x04
    2bb6:	4d 83       	std	Y+5, r20	; 0x05
    2bb8:	2e 83       	std	Y+6, r18	; 0x06
    2bba:	0f 83       	std	Y+7, r16	; 0x07
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	80 5c       	subi	r24, 0xC0	; 192
    2bc0:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		/*for face*/
for(u8 i=0;i<8;i++)
    2bc4:	19 82       	std	Y+1, r1	; 0x01
    2bc6:	0e c0       	rjmp	.+28     	; 0x2be4 <LCD_CONSTANT+0x4a>
	{
	LCD_VidWriteData(Arr[i]);
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	80 81       	ld	r24, Z
    2bda:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
		/*for face*/
for(u8 i=0;i<8;i++)
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	8f 5f       	subi	r24, 0xFF	; 255
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	88 30       	cpi	r24, 0x08	; 8
    2be8:	78 f3       	brcs	.-34     	; 0x2bc8 <LCD_CONSTANT+0x2e>
	{
	LCD_VidWriteData(Arr[i]);
	}

LCD_GoToXY(Row,Col);
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	6e 81       	ldd	r22, Y+6	; 0x06
    2bee:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <LCD_GoToXY>
LCD_VidWriteData(Data);
    2bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf4:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_VidWriteData>
}
    2bf8:	27 96       	adiw	r28, 0x07	; 7
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	0f 91       	pop	r16
    2c0a:	08 95       	ret

00002c0c <LCD_CLEAR>:
void LCD_CLEAR(u8 Row,u8 start,u8 end)
{
    2c0c:	0f 93       	push	r16
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	2b 97       	sbiw	r28, 0x0b	; 11
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	89 87       	std	Y+9, r24	; 0x09
    2c24:	6a 87       	std	Y+10, r22	; 0x0a
    2c26:	4b 87       	std	Y+11, r20	; 0x0b
	u8 empty[8]={0,0,0,0,0,0,0,0};
    2c28:	88 e0       	ldi	r24, 0x08	; 8
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	31 96       	adiw	r30, 0x01	; 1
    2c2e:	df 01       	movw	r26, r30
    2c30:	98 2f       	mov	r25, r24
    2c32:	1d 92       	st	X+, r1
    2c34:	9a 95       	dec	r25
    2c36:	e9 f7       	brne	.-6      	; 0x2c32 <LCD_CLEAR+0x26>
	while(1)
	{
		LCD_CONSTANT(empty,0,Row,start,0);
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	49 85       	ldd	r20, Y+9	; 0x09
    2c40:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_CONSTANT>
		  start++;
    2c48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	8a 87       	std	Y+10, r24	; 0x0a
		  if(start==end)
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c52:	98 17       	cp	r25, r24
    2c54:	89 f7       	brne	.-30     	; 0x2c38 <LCD_CLEAR+0x2c>
			  break;
		  }
	}


}
    2c56:	2b 96       	adiw	r28, 0x0b	; 11
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	0f 91       	pop	r16
    2c68:	08 95       	ret

00002c6a <main>:
#include "../MCAL/TIMER/TIMER_Interface.h"
#include "util/delay.h"


int main()
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	e8 97       	sbiw	r28, 0x38	; 56
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
	//set pin direction -->port B pin 3
	//DIO_VidSetPinDirection(DIO_PORTD,PIN4,OUTPUT);
	//initialization timer zero
	DIO_VidSetPinDirection(DIO_PORTD,PIN5,OUTPUT);
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	65 e0       	ldi	r22, 0x05	; 5
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 36 0c 	call	0x186c	; 0x186c <DIO_VidSetPinDirection>
	TIMER1_INIT();
    2c88:	0e 94 32 09 	call	0x1264	; 0x1264 <TIMER1_INIT>
	//initialization LCD
	LCD_VidInit();
    2c8c:	0e 94 ab 11 	call	0x2356	; 0x2356 <LCD_VidInit>
	LCD_VidWriteString("welcome elsayed");
    2c90:	80 e6       	ldi	r24, 0x60	; 96
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_VidWriteString>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	aa e7       	ldi	r26, 0x7A	; 122
    2c9e:	b4 e4       	ldi	r27, 0x44	; 68
    2ca0:	8d ab       	std	Y+53, r24	; 0x35
    2ca2:	9e ab       	std	Y+54, r25	; 0x36
    2ca4:	af ab       	std	Y+55, r26	; 0x37
    2ca6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	6d a9       	ldd	r22, Y+53	; 0x35
    2caa:	7e a9       	ldd	r23, Y+54	; 0x36
    2cac:	8f a9       	ldd	r24, Y+55	; 0x37
    2cae:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a ef       	ldi	r20, 0xFA	; 250
    2cb6:	54 e4       	ldi	r21, 0x44	; 68
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	89 ab       	std	Y+49, r24	; 0x31
    2cc2:	9a ab       	std	Y+50, r25	; 0x32
    2cc4:	ab ab       	std	Y+51, r26	; 0x33
    2cc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cca:	7a a9       	ldd	r23, Y+50	; 0x32
    2ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cce:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <main+0x80>
		__ticks = 1;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	98 ab       	std	Y+48, r25	; 0x30
    2ce6:	8f a7       	std	Y+47, r24	; 0x2f
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <main+0xfe>
	else if (__tmp > 65535)
    2cea:	69 a9       	ldd	r22, Y+49	; 0x31
    2cec:	7a a9       	ldd	r23, Y+50	; 0x32
    2cee:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	3f ef       	ldi	r19, 0xFF	; 255
    2cf6:	4f e7       	ldi	r20, 0x7F	; 127
    2cf8:	57 e4       	ldi	r21, 0x47	; 71
    2cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfe:	18 16       	cp	r1, r24
    2d00:	4c f5       	brge	.+82     	; 0x2d54 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	6d a9       	ldd	r22, Y+53	; 0x35
    2d04:	7e a9       	ldd	r23, Y+54	; 0x36
    2d06:	8f a9       	ldd	r24, Y+55	; 0x37
    2d08:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	98 ab       	std	Y+48, r25	; 0x30
    2d28:	8f a7       	std	Y+47, r24	; 0x2f
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <main+0xe0>
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9e a7       	std	Y+46, r25	; 0x2e
    2d32:	8d a7       	std	Y+45, r24	; 0x2d
    2d34:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d36:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <main+0xce>
    2d3c:	9e a7       	std	Y+46, r25	; 0x2e
    2d3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d42:	98 a9       	ldd	r25, Y+48	; 0x30
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	98 ab       	std	Y+48, r25	; 0x30
    2d48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <main+0xc2>
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	69 a9       	ldd	r22, Y+49	; 0x31
    2d56:	7a a9       	ldd	r23, Y+50	; 0x32
    2d58:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	98 ab       	std	Y+48, r25	; 0x30
    2d66:	8f a7       	std	Y+47, r24	; 0x2f
    2d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6c:	9c a7       	std	Y+44, r25	; 0x2c
    2d6e:	8b a7       	std	Y+43, r24	; 0x2b
    2d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d72:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <main+0x10a>
    2d78:	9c a7       	std	Y+44, r25	; 0x2c
    2d7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	//Super Loop{
	while(1)
	{

		LCD_VidWriteCommend(1);
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
	//Set Duty Cycle
		Set_Duty_Cycle_TIMER_1_A(2.5);
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	80 e2       	ldi	r24, 0x20	; 32
    2d88:	90 e4       	ldi	r25, 0x40	; 64
    2d8a:	0e 94 17 0a 	call	0x142e	; 0x142e <Set_Duty_Cycle_TIMER_1_A>
		LCD_VidWriteString("Angle=0");
    2d8e:	80 e7       	ldi	r24, 0x70	; 112
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_VidWriteString>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e4       	ldi	r25, 0x40	; 64
    2d9a:	ac e9       	ldi	r26, 0x9C	; 156
    2d9c:	b5 e4       	ldi	r27, 0x45	; 69
    2d9e:	8f a3       	std	Y+39, r24	; 0x27
    2da0:	98 a7       	std	Y+40, r25	; 0x28
    2da2:	a9 a7       	std	Y+41, r26	; 0x29
    2da4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da6:	6f a1       	ldd	r22, Y+39	; 0x27
    2da8:	78 a5       	ldd	r23, Y+40	; 0x28
    2daa:	89 a5       	ldd	r24, Y+41	; 0x29
    2dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a ef       	ldi	r20, 0xFA	; 250
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8b a3       	std	Y+35, r24	; 0x23
    2dc0:	9c a3       	std	Y+36, r25	; 0x24
    2dc2:	ad a3       	std	Y+37, r26	; 0x25
    2dc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dca:	8d a1       	ldd	r24, Y+37	; 0x25
    2dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e8       	ldi	r20, 0x80	; 128
    2dd4:	5f e3       	ldi	r21, 0x3F	; 63
    2dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dda:	88 23       	and	r24, r24
    2ddc:	2c f4       	brge	.+10     	; 0x2de8 <main+0x17e>
		__ticks = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9a a3       	std	Y+34, r25	; 0x22
    2de4:	89 a3       	std	Y+33, r24	; 0x21
    2de6:	3f c0       	rjmp	.+126    	; 0x2e66 <main+0x1fc>
	else if (__tmp > 65535)
    2de8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dea:	7c a1       	ldd	r23, Y+36	; 0x24
    2dec:	8d a1       	ldd	r24, Y+37	; 0x25
    2dee:	9e a1       	ldd	r25, Y+38	; 0x26
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	4c f5       	brge	.+82     	; 0x2e52 <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	6f a1       	ldd	r22, Y+39	; 0x27
    2e02:	78 a5       	ldd	r23, Y+40	; 0x28
    2e04:	89 a5       	ldd	r24, Y+41	; 0x29
    2e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e2       	ldi	r20, 0x20	; 32
    2e0e:	51 e4       	ldi	r21, 0x41	; 65
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9a a3       	std	Y+34, r25	; 0x22
    2e26:	89 a3       	std	Y+33, r24	; 0x21
    2e28:	0f c0       	rjmp	.+30     	; 0x2e48 <main+0x1de>
    2e2a:	88 ec       	ldi	r24, 0xC8	; 200
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	98 a3       	std	Y+32, r25	; 0x20
    2e30:	8f 8f       	std	Y+31, r24	; 0x1f
    2e32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e34:	98 a1       	ldd	r25, Y+32	; 0x20
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <main+0x1cc>
    2e3a:	98 a3       	std	Y+32, r25	; 0x20
    2e3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e40:	9a a1       	ldd	r25, Y+34	; 0x22
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	9a a3       	std	Y+34, r25	; 0x22
    2e46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	69 f7       	brne	.-38     	; 0x2e2a <main+0x1c0>
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e52:	6b a1       	ldd	r22, Y+35	; 0x23
    2e54:	7c a1       	ldd	r23, Y+36	; 0x24
    2e56:	8d a1       	ldd	r24, Y+37	; 0x25
    2e58:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9a a3       	std	Y+34, r25	; 0x22
    2e64:	89 a3       	std	Y+33, r24	; 0x21
    2e66:	89 a1       	ldd	r24, Y+33	; 0x21
    2e68:	9a a1       	ldd	r25, Y+34	; 0x22
    2e6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e6c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <main+0x208>
    2e76:	9e 8f       	std	Y+30, r25	; 0x1e
    2e78:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5000);
		LCD_VidWriteCommend(1);
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		Set_Duty_Cycle_TIMER_1_A(7.5);
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	70 e0       	ldi	r23, 0x00	; 0
    2e84:	80 ef       	ldi	r24, 0xF0	; 240
    2e86:	90 e4       	ldi	r25, 0x40	; 64
    2e88:	0e 94 17 0a 	call	0x142e	; 0x142e <Set_Duty_Cycle_TIMER_1_A>
		LCD_VidWriteString("Angle=90");
    2e8c:	88 e7       	ldi	r24, 0x78	; 120
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_VidWriteString>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e4       	ldi	r25, 0x40	; 64
    2e98:	ac e9       	ldi	r26, 0x9C	; 156
    2e9a:	b5 e4       	ldi	r27, 0x45	; 69
    2e9c:	89 8f       	std	Y+25, r24	; 0x19
    2e9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2ea0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ea2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a ef       	ldi	r20, 0xFA	; 250
    2eb2:	54 e4       	ldi	r21, 0x44	; 68
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	8d 8b       	std	Y+21, r24	; 0x15
    2ebe:	9e 8b       	std	Y+22, r25	; 0x16
    2ec0:	af 8b       	std	Y+23, r26	; 0x17
    2ec2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <main+0x27c>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9c 8b       	std	Y+20, r25	; 0x14
    2ee2:	8b 8b       	std	Y+19, r24	; 0x13
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <main+0x2fa>
	else if (__tmp > 65535)
    2ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eea:	8f 89       	ldd	r24, Y+23	; 0x17
    2eec:	98 8d       	ldd	r25, Y+24	; 0x18
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	69 8d       	ldd	r22, Y+25	; 0x19
    2f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <main+0x2dc>
    2f28:	88 ec       	ldi	r24, 0xC8	; 200
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	9a 8b       	std	Y+18, r25	; 0x12
    2f2e:	89 8b       	std	Y+17, r24	; 0x11
    2f30:	89 89       	ldd	r24, Y+17	; 0x11
    2f32:	9a 89       	ldd	r25, Y+18	; 0x12
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <main+0x2ca>
    2f38:	9a 8b       	std	Y+18, r25	; 0x12
    2f3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	9c 8b       	std	Y+20, r25	; 0x14
    2f44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	8b 89       	ldd	r24, Y+19	; 0x13
    2f48:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <main+0x2be>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	6d 89       	ldd	r22, Y+21	; 0x15
    2f52:	7e 89       	ldd	r23, Y+22	; 0x16
    2f54:	8f 89       	ldd	r24, Y+23	; 0x17
    2f56:	98 8d       	ldd	r25, Y+24	; 0x18
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9c 8b       	std	Y+20, r25	; 0x14
    2f62:	8b 8b       	std	Y+19, r24	; 0x13
    2f64:	8b 89       	ldd	r24, Y+19	; 0x13
    2f66:	9c 89       	ldd	r25, Y+20	; 0x14
    2f68:	98 8b       	std	Y+16, r25	; 0x10
    2f6a:	8f 87       	std	Y+15, r24	; 0x0f
    2f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6e:	98 89       	ldd	r25, Y+16	; 0x10
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <main+0x306>
    2f74:	98 8b       	std	Y+16, r25	; 0x10
    2f76:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5000);
		LCD_VidWriteCommend(1);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_VidWriteCommend>
		Set_Duty_Cycle_TIMER_1_A(12.5);
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	88 e4       	ldi	r24, 0x48	; 72
    2f84:	91 e4       	ldi	r25, 0x41	; 65
    2f86:	0e 94 17 0a 	call	0x142e	; 0x142e <Set_Duty_Cycle_TIMER_1_A>
		LCD_VidWriteString("Angle=180");
    2f8a:	81 e8       	ldi	r24, 0x81	; 129
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 cd 14 	call	0x299a	; 0x299a <LCD_VidWriteString>
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e4       	ldi	r25, 0x40	; 64
    2f96:	ac e9       	ldi	r26, 0x9C	; 156
    2f98:	b5 e4       	ldi	r27, 0x45	; 69
    2f9a:	8b 87       	std	Y+11, r24	; 0x0b
    2f9c:	9c 87       	std	Y+12, r25	; 0x0c
    2f9e:	ad 87       	std	Y+13, r26	; 0x0d
    2fa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	4a ef       	ldi	r20, 0xFA	; 250
    2fb0:	54 e4       	ldi	r21, 0x44	; 68
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	8f 83       	std	Y+7, r24	; 0x07
    2fbc:	98 87       	std	Y+8, r25	; 0x08
    2fbe:	a9 87       	std	Y+9, r26	; 0x09
    2fc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc4:	78 85       	ldd	r23, Y+8	; 0x08
    2fc6:	89 85       	ldd	r24, Y+9	; 0x09
    2fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e8       	ldi	r20, 0x80	; 128
    2fd0:	5f e3       	ldi	r21, 0x3F	; 63
    2fd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd6:	88 23       	and	r24, r24
    2fd8:	2c f4       	brge	.+10     	; 0x2fe4 <main+0x37a>
		__ticks = 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	3f c0       	rjmp	.+126    	; 0x3062 <main+0x3f8>
	else if (__tmp > 65535)
    2fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe6:	78 85       	ldd	r23, Y+8	; 0x08
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	3f ef       	ldi	r19, 0xFF	; 255
    2ff0:	4f e7       	ldi	r20, 0x7F	; 127
    2ff2:	57 e4       	ldi	r21, 0x47	; 71
    2ff4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	4c f5       	brge	.+82     	; 0x304e <main+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3000:	8d 85       	ldd	r24, Y+13	; 0x0d
    3002:	9e 85       	ldd	r25, Y+14	; 0x0e
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e2       	ldi	r20, 0x20	; 32
    300a:	51 e4       	ldi	r21, 0x41	; 65
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <main+0x3da>
    3026:	88 ec       	ldi	r24, 0xC8	; 200
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9c 83       	std	Y+4, r25	; 0x04
    302c:	8b 83       	std	Y+3, r24	; 0x03
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <main+0x3c8>
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	9e 83       	std	Y+6, r25	; 0x06
    3042:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	69 f7       	brne	.-38     	; 0x3026 <main+0x3bc>
    304c:	97 ce       	rjmp	.-722    	; 0x2d7c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304e:	6f 81       	ldd	r22, Y+7	; 0x07
    3050:	78 85       	ldd	r23, Y+8	; 0x08
    3052:	89 85       	ldd	r24, Y+9	; 0x09
    3054:	9a 85       	ldd	r25, Y+10	; 0x0a
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9e 83       	std	Y+6, r25	; 0x06
    3060:	8d 83       	std	Y+5, r24	; 0x05
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	9a 83       	std	Y+2, r25	; 0x02
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <main+0x404>
    3072:	9a 83       	std	Y+2, r25	; 0x02
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	82 ce       	rjmp	.-764    	; 0x2d7c <main+0x112>

00003078 <__mulsi3>:
    3078:	62 9f       	mul	r22, r18
    307a:	d0 01       	movw	r26, r0
    307c:	73 9f       	mul	r23, r19
    307e:	f0 01       	movw	r30, r0
    3080:	82 9f       	mul	r24, r18
    3082:	e0 0d       	add	r30, r0
    3084:	f1 1d       	adc	r31, r1
    3086:	64 9f       	mul	r22, r20
    3088:	e0 0d       	add	r30, r0
    308a:	f1 1d       	adc	r31, r1
    308c:	92 9f       	mul	r25, r18
    308e:	f0 0d       	add	r31, r0
    3090:	83 9f       	mul	r24, r19
    3092:	f0 0d       	add	r31, r0
    3094:	74 9f       	mul	r23, r20
    3096:	f0 0d       	add	r31, r0
    3098:	65 9f       	mul	r22, r21
    309a:	f0 0d       	add	r31, r0
    309c:	99 27       	eor	r25, r25
    309e:	72 9f       	mul	r23, r18
    30a0:	b0 0d       	add	r27, r0
    30a2:	e1 1d       	adc	r30, r1
    30a4:	f9 1f       	adc	r31, r25
    30a6:	63 9f       	mul	r22, r19
    30a8:	b0 0d       	add	r27, r0
    30aa:	e1 1d       	adc	r30, r1
    30ac:	f9 1f       	adc	r31, r25
    30ae:	bd 01       	movw	r22, r26
    30b0:	cf 01       	movw	r24, r30
    30b2:	11 24       	eor	r1, r1
    30b4:	08 95       	ret

000030b6 <__udivmodsi4>:
    30b6:	a1 e2       	ldi	r26, 0x21	; 33
    30b8:	1a 2e       	mov	r1, r26
    30ba:	aa 1b       	sub	r26, r26
    30bc:	bb 1b       	sub	r27, r27
    30be:	fd 01       	movw	r30, r26
    30c0:	0d c0       	rjmp	.+26     	; 0x30dc <__udivmodsi4_ep>

000030c2 <__udivmodsi4_loop>:
    30c2:	aa 1f       	adc	r26, r26
    30c4:	bb 1f       	adc	r27, r27
    30c6:	ee 1f       	adc	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	a2 17       	cp	r26, r18
    30cc:	b3 07       	cpc	r27, r19
    30ce:	e4 07       	cpc	r30, r20
    30d0:	f5 07       	cpc	r31, r21
    30d2:	20 f0       	brcs	.+8      	; 0x30dc <__udivmodsi4_ep>
    30d4:	a2 1b       	sub	r26, r18
    30d6:	b3 0b       	sbc	r27, r19
    30d8:	e4 0b       	sbc	r30, r20
    30da:	f5 0b       	sbc	r31, r21

000030dc <__udivmodsi4_ep>:
    30dc:	66 1f       	adc	r22, r22
    30de:	77 1f       	adc	r23, r23
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	1a 94       	dec	r1
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <__udivmodsi4_loop>
    30e8:	60 95       	com	r22
    30ea:	70 95       	com	r23
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	9b 01       	movw	r18, r22
    30f2:	ac 01       	movw	r20, r24
    30f4:	bd 01       	movw	r22, r26
    30f6:	cf 01       	movw	r24, r30
    30f8:	08 95       	ret

000030fa <__prologue_saves__>:
    30fa:	2f 92       	push	r2
    30fc:	3f 92       	push	r3
    30fe:	4f 92       	push	r4
    3100:	5f 92       	push	r5
    3102:	6f 92       	push	r6
    3104:	7f 92       	push	r7
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	ca 1b       	sub	r28, r26
    3124:	db 0b       	sbc	r29, r27
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	09 94       	ijmp

00003132 <__epilogue_restores__>:
    3132:	2a 88       	ldd	r2, Y+18	; 0x12
    3134:	39 88       	ldd	r3, Y+17	; 0x11
    3136:	48 88       	ldd	r4, Y+16	; 0x10
    3138:	5f 84       	ldd	r5, Y+15	; 0x0f
    313a:	6e 84       	ldd	r6, Y+14	; 0x0e
    313c:	7d 84       	ldd	r7, Y+13	; 0x0d
    313e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3140:	9b 84       	ldd	r9, Y+11	; 0x0b
    3142:	aa 84       	ldd	r10, Y+10	; 0x0a
    3144:	b9 84       	ldd	r11, Y+9	; 0x09
    3146:	c8 84       	ldd	r12, Y+8	; 0x08
    3148:	df 80       	ldd	r13, Y+7	; 0x07
    314a:	ee 80       	ldd	r14, Y+6	; 0x06
    314c:	fd 80       	ldd	r15, Y+5	; 0x05
    314e:	0c 81       	ldd	r16, Y+4	; 0x04
    3150:	1b 81       	ldd	r17, Y+3	; 0x03
    3152:	aa 81       	ldd	r26, Y+2	; 0x02
    3154:	b9 81       	ldd	r27, Y+1	; 0x01
    3156:	ce 0f       	add	r28, r30
    3158:	d1 1d       	adc	r29, r1
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	ed 01       	movw	r28, r26
    3166:	08 95       	ret

00003168 <_exit>:
    3168:	f8 94       	cli

0000316a <__stop_program>:
    316a:	ff cf       	rjmp	.-2      	; 0x316a <__stop_program>
