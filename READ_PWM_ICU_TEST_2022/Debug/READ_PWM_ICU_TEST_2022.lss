
READ_PWM_ICU_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00003494  00003528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800084  00800084  0000354c  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001611  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000080e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b3be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c340  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c782  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_1>
       8:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_2>
       c:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__vector_3>
      10:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_4>
      14:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_5>
      18:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_6>
      1c:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_7>
      20:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_8>
      24:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_9>
      28:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_10>
      2c:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <main>
      8a:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_INIT>:
#include"UART_Configuration.h"

u8 Temporary_REG=0;
u8 arr[5];
void UART_INIT(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	UBRRH=0;
     ca6:	e0 e4       	ldi	r30, 0x40	; 64
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
	UBRRL=51;
     cac:	e9 e2       	ldi	r30, 0x29	; 41
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	83 e3       	ldi	r24, 0x33	; 51
     cb2:	80 83       	st	Z, r24
	/*USART Control and Status Register B – UCSRB */
	Receiver_Enable;
     cb4:	aa e2       	ldi	r26, 0x2A	; 42
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ea e2       	ldi	r30, 0x2A	; 42
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 61       	ori	r24, 0x10	; 16
     cc0:	8c 93       	st	X, r24
	Transmitter_Enable;
     cc2:	aa e2       	ldi	r26, 0x2A	; 42
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e2       	ldi	r30, 0x2A	; 42
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	8c 93       	st	X, r24
	/*Character Size*/
	Eight_Bit;
     cd0:	aa e2       	ldi	r26, 0x2A	; 42
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ea e2       	ldi	r30, 0x2A	; 42
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	8c 93       	st	X, r24
     cde:	80 91 84 00 	lds	r24, 0x0084
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	80 93 84 00 	sts	0x0084, r24
     ce8:	80 91 84 00 	lds	r24, 0x0084
     cec:	82 60       	ori	r24, 0x02	; 2
     cee:	80 93 84 00 	sts	0x0084, r24
	/*Register Select*/
	SET_BIT( Temporary_REG , URSEL );
     cf2:	80 91 84 00 	lds	r24, 0x0084
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	80 93 84 00 	sts	0x0084, r24
	/*USART Mode Select*/
	CLR_BIT( Temporary_REG , UMSEL );
     cfc:	80 91 84 00 	lds	r24, 0x0084
     d00:	8f 7b       	andi	r24, 0xBF	; 191
     d02:	80 93 84 00 	sts	0x0084, r24
	/*Parity Mode*/
	CLR_BIT( Temporary_REG ,  UPM1 );
     d06:	80 91 84 00 	lds	r24, 0x0084
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	80 93 84 00 	sts	0x0084, r24
	CLR_BIT( Temporary_REG ,  UPM0 );
     d10:	80 91 84 00 	lds	r24, 0x0084
     d14:	8f 7e       	andi	r24, 0xEF	; 239
     d16:	80 93 84 00 	sts	0x0084, r24
	/*Stop Bit Select*/
	CLR_BIT( Temporary_REG ,  USBS );
     d1a:	80 91 84 00 	lds	r24, 0x0084
     d1e:	87 7f       	andi	r24, 0xF7	; 247
     d20:	80 93 84 00 	sts	0x0084, r24
	/*Clock Polarity*/
	CLR_BIT( Temporary_REG , UCPOL );
     d24:	80 91 84 00 	lds	r24, 0x0084
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	80 93 84 00 	sts	0x0084, r24
	/*MOVING DATA*/
	USCRC=Temporary_REG;
     d2e:	e0 e4       	ldi	r30, 0x40	; 64
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 91 84 00 	lds	r24, 0x0084
     d36:	80 83       	st	Z, r24
	

}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <UART_VoidSendChar>:
void UART_VoidSendChar(u8 u8Data)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	/*wait until Transmitter be Empty*/
	while(GET_BIT(UCSRA,UDRE)==0);
     d4a:	eb e2       	ldi	r30, 0x2B	; 43
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	82 95       	swap	r24
     d52:	86 95       	lsr	r24
     d54:	87 70       	andi	r24, 0x07	; 7
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	a1 f3       	breq	.-24     	; 0xd4a <UART_VoidSendChar+0xc>
	UDR=u8Data;
     d62:	ec e2       	ldi	r30, 0x2C	; 44
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	80 83       	st	Z, r24

}
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <UART_VoidGetChar>:
u8 UART_VoidGetChar(void)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	u8 u8Result=0;
     d7c:	19 82       	std	Y+1, r1	; 0x01
	/*wait until Receive Complete*/
	while(GET_BIT(UCSRA,RXC)==0);
     d7e:	eb e2       	ldi	r30, 0x2B	; 43
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 23       	and	r24, r24
     d86:	dc f7       	brge	.-10     	; 0xd7e <UART_VoidGetChar+0xc>
	/**/
	u8Result=UDR;
     d88:	ec e2       	ldi	r30, 0x2C	; 44
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Flag*/
	Trasmit_Complete;
     d90:	ab e2       	ldi	r26, 0x2B	; 43
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e2       	ldi	r30, 0x2B	; 43
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8c 93       	st	X, r24


	return u8Result;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <UART_VoidGetString>:
u8* UART_VoidGetString(void)
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62

	for(u8 count=0;count<3;count++)
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	0c c0       	rjmp	.+24     	; 0xdd2 <UART_VoidGetString+0x2a>
	{
		arr[count]=UART_VoidGetChar();
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	08 2f       	mov	r16, r24
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	0e 94 b9 06 	call	0xd72	; 0xd72 <UART_VoidGetChar>
     dc4:	f8 01       	movw	r30, r16
     dc6:	e1 56       	subi	r30, 0x61	; 97
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 83       	st	Z, r24
	return u8Result;
}
u8* UART_VoidGetString(void)
{

	for(u8 count=0;count<3;count++)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	88 f3       	brcs	.-30     	; 0xdba <UART_VoidGetString+0x12>
	{
		arr[count]=UART_VoidGetChar();
	}
	return arr;
     dd8:	8f e9       	ldi	r24, 0x9F	; 159
     dda:	90 e0       	ldi	r25, 0x00	; 0
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	08 95       	ret

00000de8 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWSR,1);
     df0:	a1 e2       	ldi	r26, 0x21	; 33
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e1 e2       	ldi	r30, 0x21	; 33
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     dfe:	a1 e2       	ldi	r26, 0x21	; 33
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e1 e2       	ldi	r30, 0x21	; 33
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWBR = 12;
     e0c:	e0 e2       	ldi	r30, 0x20	; 32
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8c e0       	ldi	r24, 0x0C	; 12
     e12:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     e14:	a6 e5       	ldi	r26, 0x56	; 86
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     e22:	a6 e5       	ldi	r26, 0x56	; 86
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e6 e5       	ldi	r30, 0x56	; 86
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	84 60       	ori	r24, 0x04	; 4
     e2e:	8c 93       	st	X, r24
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <TWI_u8SlaveInit>:

void   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8ErrorState = STD_TYPES_OK;
	/* Set Slave Adress IN TWAR REG */
	TWAR = Copy_u8SlaveAddress << 1;
     e42:	e2 e2       	ldi	r30, 0x22	; 34
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 0f       	add	r24, r24
     e4a:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     e4c:	a6 e5       	ldi	r26, 0x56	; 86
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e5       	ldi	r30, 0x56	; 86
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 64       	ori	r24, 0x40	; 64
     e58:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     e5a:	a6 e5       	ldi	r26, 0x56	; 86
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	8c 93       	st	X, r24
}
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     e7e:	a6 e5       	ldi	r26, 0x56	; 86
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 62       	ori	r24, 0x20	; 32
     e8a:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     e8c:	a6 e5       	ldi	r26, 0x56	; 86
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e5       	ldi	r30, 0x56	; 86
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     e9a:	e6 e5       	ldi	r30, 0x56	; 86
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	dc f7       	brge	.-10     	; 0xe9a <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x08 )
     ea4:	e1 e2       	ldi	r30, 0x21	; 33
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	88 7f       	andi	r24, 0xF8	; 248
     eb0:	90 70       	andi	r25, 0x00	; 0
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	91 05       	cpc	r25, r1
     eb6:	11 f0       	breq	.+4      	; 0xebc <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     ed4:	a6 e5       	ldi	r26, 0x56	; 86
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e5       	ldi	r30, 0x56	; 86
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 62       	ori	r24, 0x20	; 32
     ee0:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     ee2:	a6 e5       	ldi	r26, 0x56	; 86
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e5       	ldi	r30, 0x56	; 86
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 68       	ori	r24, 0x80	; 128
     eee:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     ef0:	e6 e5       	ldi	r30, 0x56	; 86
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 23       	and	r24, r24
     ef8:	dc f7       	brge	.-10     	; 0xef0 <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x10 )
     efa:	e1 e2       	ldi	r30, 0x21	; 33
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	88 7f       	andi	r24, 0xF8	; 248
     f06:	90 70       	andi	r25, 0x00	; 0
     f08:	80 31       	cpi	r24, 0x10	; 16
     f0a:	91 05       	cpc	r25, r1
     f0c:	11 f0       	breq	.+4      	; 0xf12 <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <TWI_enuSendSlaveWithWrite+0x6>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     f2c:	e3 e2       	ldi	r30, 0x23	; 35
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	88 0f       	add	r24, r24
     f34:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
     f36:	a3 e2       	ldi	r26, 0x23	; 35
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e2       	ldi	r30, 0x23	; 35
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     f44:	a6 e5       	ldi	r26, 0x56	; 86
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e5       	ldi	r30, 0x56	; 86
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7d       	andi	r24, 0xDF	; 223
     f50:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     f52:	a6 e5       	ldi	r26, 0x56	; 86
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     f60:	e6 e5       	ldi	r30, 0x56	; 86
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	88 23       	and	r24, r24
     f68:	dc f7       	brge	.-10     	; 0xf60 <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x18 )
     f6a:	e1 e2       	ldi	r30, 0x21	; 33
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 7f       	andi	r24, 0xF8	; 248
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 31       	cpi	r24, 0x18	; 24
     f7a:	91 05       	cpc	r25, r1
     f7c:	11 f0       	breq	.+4      	; 0xf82 <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f82:	89 81       	ldd	r24, Y+1	; 0x01
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <TWI_enuSendSlaveWithRead+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     f9e:	e3 e2       	ldi	r30, 0x23	; 35
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 0f       	add	r24, r24
     fa6:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
     fa8:	a3 e2       	ldi	r26, 0x23	; 35
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e3 e2       	ldi	r30, 0x23	; 35
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     fb6:	a6 e5       	ldi	r26, 0x56	; 86
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7d       	andi	r24, 0xDF	; 223
     fc2:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     fc4:	a6 e5       	ldi	r26, 0x56	; 86
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	dc f7       	brge	.-10     	; 0xfd2 <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x40 )
     fdc:	e1 e2       	ldi	r30, 0x21	; 33
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 7f       	andi	r24, 0xF8	; 248
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	80 34       	cpi	r24, 0x40	; 64
     fec:	91 05       	cpc	r25, r1
     fee:	11 f0       	breq	.+4      	; 0xff4 <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <TWI_enuSendDataByte+0x6>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWDR = Copy_u8Data;
    1010:	e3 e2       	ldi	r30, 0x23	; 35
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 83       	st	Z, r24

	/* Clear Flag */
	SET_BIT(TWCR,7);
    1018:	a6 e5       	ldi	r26, 0x56	; 86
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e6 e5       	ldi	r30, 0x56	; 86
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
    1026:	e6 e5       	ldi	r30, 0x56	; 86
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	dc f7       	brge	.-10     	; 0x1026 <TWI_enuSendDataByte+0x26>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x28 )
    1030:	e1 e2       	ldi	r30, 0x21	; 33
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	88 7f       	andi	r24, 0xF8	; 248
    103c:	90 70       	andi	r25, 0x00	; 0
    103e:	88 32       	cpi	r24, 0x28	; 40
    1040:	91 05       	cpc	r25, r1
    1042:	11 f0       	breq	.+4      	; 0x1048 <TWI_enuSendDataByte+0x48>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <TWI_enuReceiveDataByte+0x6>
    105a:	0f 92       	push	r0
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	01 f1       	breq	.+64     	; 0x10b0 <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWCR,7);
    1070:	a6 e5       	ldi	r26, 0x56	; 86
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e6 e5       	ldi	r30, 0x56	; 86
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWCR,7)));
    107e:	e6 e5       	ldi	r30, 0x56	; 86
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 23       	and	r24, r24
    1086:	dc f7       	brge	.-10     	; 0x107e <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWSR & 0xF8) != 0x50 )
    1088:	e1 e2       	ldi	r30, 0x21	; 33
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 7f       	andi	r24, 0xF8	; 248
    1094:	90 70       	andi	r25, 0x00	; 0
    1096:	80 35       	cpi	r24, 0x50	; 80
    1098:	91 05       	cpc	r25, r1
    109a:	19 f0       	breq	.+6      	; 0x10a2 <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWDR;
    10a2:	e3 e2       	ldi	r30, 0x23	; 35
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	80 83       	st	Z, r24
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
    10b0:	87 e0       	ldi	r24, 0x07	; 7
    10b2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWCR,4);
    10ca:	a6 e5       	ldi	r26, 0x56	; 86
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
    10d8:	a6 e5       	ldi	r26, 0x56	; 86
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e6 e5       	ldi	r30, 0x56	; 86
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	8c 93       	st	X, r24
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T1)(void)=NULL;
static void (*GPFunc_T1_OV)(void)=NULL;
static void (*GPFunc_T1_ICU)(void)=NULL;

void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <TIMER0_OV_SetCallBack+0x6>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	90 93 86 00 	sts	0x0086, r25
    1102:	80 93 85 00 	sts	0x0085, r24
}
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <TIMER0_CM_SetCallBack+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	90 93 86 00 	sts	0x0086, r25
    1126:	80 93 85 00 	sts	0x0085, r24
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <TIMER1_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <TIMER1_OV_SetCallBack+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_OV=LocalPFunc;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	90 93 8c 00 	sts	0x008C, r25
    114a:	80 93 8b 00 	sts	0x008B, r24
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <TIMER1_CM_A_SetCallBack+0x6>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	90 93 8a 00 	sts	0x008A, r25
    116e:	80 93 89 00 	sts	0x0089, r24
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <TIMER1_CM_B_SetCallBack+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1=LocalPFunc;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	90 93 8a 00 	sts	0x008A, r25
    1192:	80 93 89 00 	sts	0x0089, r24
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <TIMER1_ICU_SetCallBack>:
void TIMER1_ICU_SetCallBack(void (*LocalPFunc)(void))
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <TIMER1_ICU_SetCallBack+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_ICU=LocalPFunc;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	90 93 8e 00 	sts	0x008E, r25
    11b6:	80 93 8d 00 	sts	0x008D, r24
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <TIMER2_OV_SetCallBack+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	90 93 88 00 	sts	0x0088, r25
    11da:	80 93 87 00 	sts	0x0087, r24
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <TIMER2_CM_SetCallBack+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	90 93 88 00 	sts	0x0088, r25
    11fe:	80 93 87 00 	sts	0x0087, r24
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <__vector_11>:
////////////////////////////////////////////////////
ISR_TMR0_OVF()
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    1236:	80 91 85 00 	lds	r24, 0x0085
    123a:	90 91 86 00 	lds	r25, 0x0086
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	29 f0       	breq	.+10     	; 0x124c <__vector_11+0x40>
	{
		GPFunc_T0();
    1242:	e0 91 85 00 	lds	r30, 0x0085
    1246:	f0 91 86 00 	lds	r31, 0x0086
    124a:	09 95       	icall
	}
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_10>:
ISR_TMR0_Comp()
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
    129c:	80 91 85 00 	lds	r24, 0x0085
    12a0:	90 91 86 00 	lds	r25, 0x0086
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	29 f0       	breq	.+10     	; 0x12b2 <__vector_10+0x40>
	{
		GPFunc_T0();
    12a8:	e0 91 85 00 	lds	r30, 0x0085
    12ac:	f0 91 86 00 	lds	r31, 0x0086
    12b0:	09 95       	icall
	}
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_9>:
////////////////////////////////////////////////////
ISR_TMR1_OVF()
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1_OV!=NULL)
    1302:	80 91 8b 00 	lds	r24, 0x008B
    1306:	90 91 8c 00 	lds	r25, 0x008C
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	29 f0       	breq	.+10     	; 0x1318 <__vector_9+0x40>
		{
		GPFunc_T1_OV();
    130e:	e0 91 8b 00 	lds	r30, 0x008B
    1312:	f0 91 8c 00 	lds	r31, 0x008C
    1316:	09 95       	icall
		}
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_7>:
ISR_TMR1_CompA()
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1368:	80 91 89 00 	lds	r24, 0x0089
    136c:	90 91 8a 00 	lds	r25, 0x008A
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	29 f0       	breq	.+10     	; 0x137e <__vector_7+0x40>
		{
			GPFunc_T1();
    1374:	e0 91 89 00 	lds	r30, 0x0089
    1378:	f0 91 8a 00 	lds	r31, 0x008A
    137c:	09 95       	icall
		}
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_8>:
ISR_TMR1_CompB()
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    13ce:	80 91 89 00 	lds	r24, 0x0089
    13d2:	90 91 8a 00 	lds	r25, 0x008A
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <__vector_8+0x40>
		{
			GPFunc_T1();
    13da:	e0 91 89 00 	lds	r30, 0x0089
    13de:	f0 91 8a 00 	lds	r31, 0x008A
    13e2:	09 95       	icall
		}
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_6>:
/*ISR FOR ICU */
ISR_TMR1_Capt()
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1_ICU!=NULL)
    1434:	80 91 8d 00 	lds	r24, 0x008D
    1438:	90 91 8e 00 	lds	r25, 0x008E
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	29 f0       	breq	.+10     	; 0x144a <__vector_6+0x40>
		{
		GPFunc_T1_ICU();
    1440:	e0 91 8d 00 	lds	r30, 0x008D
    1444:	f0 91 8e 00 	lds	r31, 0x008E
    1448:	09 95       	icall
		}
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_5>:
////////////////////////////////////////////////////
ISR_TMR2_OVF()
{
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    149a:	80 91 87 00 	lds	r24, 0x0087
    149e:	90 91 88 00 	lds	r25, 0x0088
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <__vector_5+0x40>
	{
		GPFunc_T2();
    14a6:	e0 91 87 00 	lds	r30, 0x0087
    14aa:	f0 91 88 00 	lds	r31, 0x0088
    14ae:	09 95       	icall
	}
}
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_4>:
ISR_TMR2_Comp()
{
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1500:	80 91 87 00 	lds	r24, 0x0087
    1504:	90 91 88 00 	lds	r25, 0x0088
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	29 f0       	breq	.+10     	; 0x1516 <__vector_4+0x40>
	{
		GPFunc_T2();
    150c:	e0 91 87 00 	lds	r30, 0x0087
    1510:	f0 91 88 00 	lds	r31, 0x0088
    1514:	09 95       	icall
	}
}
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <TIMER0_INIT>:
////////////////////////////////////////////////////
/*******************************************************************************************************/
void TIMER0_INIT(void)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    1544:	a3 e5       	ldi	r26, 0x53	; 83
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e3 e5       	ldi	r30, 0x53	; 83
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 60       	ori	r24, 0x08	; 8
    1550:	8c 93       	st	X, r24
    1552:	a3 e5       	ldi	r26, 0x53	; 83
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e3 e5       	ldi	r30, 0x53	; 83
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    1560:	a3 e5       	ldi	r26, 0x53	; 83
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e3 e5       	ldi	r30, 0x53	; 83
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 62       	ori	r24, 0x20	; 32
    156c:	8c 93       	st	X, r24
    156e:	a3 e5       	ldi	r26, 0x53	; 83
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e3 e5       	ldi	r30, 0x53	; 83
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8f 7e       	andi	r24, 0xEF	; 239
    157a:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    157c:	a3 e5       	ldi	r26, 0x53	; 83
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e3 e5       	ldi	r30, 0x53	; 83
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	84 60       	ori	r24, 0x04	; 4
    1588:	8c 93       	st	X, r24
    158a:	a3 e5       	ldi	r26, 0x53	; 83
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e3 e5       	ldi	r30, 0x53	; 83
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8d 7f       	andi	r24, 0xFD	; 253
    1596:	8c 93       	st	X, r24
    1598:	a3 e5       	ldi	r26, 0x53	; 83
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e3 e5       	ldi	r30, 0x53	; 83
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8e 7f       	andi	r24, 0xFE	; 254
    15a4:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
#if Timer1_Mode==NORMAL_Timer_1
	//TCNT1=25206;
	NORMAL;
    15b4:	af e4       	ldi	r26, 0x4F	; 79
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	ef e4       	ldi	r30, 0x4F	; 79
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8e 7f       	andi	r24, 0xFE	; 254
    15c0:	8c 93       	st	X, r24
    15c2:	af e4       	ldi	r26, 0x4F	; 79
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ef e4       	ldi	r30, 0x4F	; 79
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8d 7f       	andi	r24, 0xFD	; 253
    15ce:	8c 93       	st	X, r24
    15d0:	ae e4       	ldi	r26, 0x4E	; 78
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ee e4       	ldi	r30, 0x4E	; 78
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	87 7f       	andi	r24, 0xF7	; 247
    15dc:	8c 93       	st	X, r24
    15de:	ae e4       	ldi	r26, 0x4E	; 78
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	ee e4       	ldi	r30, 0x4E	; 78
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 7e       	andi	r24, 0xEF	; 239
    15ea:	8c 93       	st	X, r24
	No_prescaling_1;
    15ec:	ae e4       	ldi	r26, 0x4E	; 78
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ee e4       	ldi	r30, 0x4E	; 78
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	8c 93       	st	X, r24
    15fa:	ae e4       	ldi	r26, 0x4E	; 78
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ee e4       	ldi	r30, 0x4E	; 78
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8d 7f       	andi	r24, 0xFD	; 253
    1606:	8c 93       	st	X, r24
    1608:	ae e4       	ldi	r26, 0x4E	; 78
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ee e4       	ldi	r30, 0x4E	; 78
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	81 60       	ori	r24, 0x01	; 1
    1614:	8c 93       	st	X, r24
	Normal_port_operation_1;
    1616:	af e4       	ldi	r26, 0x4F	; 79
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e4       	ldi	r30, 0x4F	; 79
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7b       	andi	r24, 0xBF	; 191
    1622:	8c 93       	st	X, r24
    1624:	af e4       	ldi	r26, 0x4F	; 79
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e4       	ldi	r30, 0x4F	; 79
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 77       	andi	r24, 0x7F	; 127
    1630:	8c 93       	st	X, r24
    1632:	af e4       	ldi	r26, 0x4F	; 79
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e4       	ldi	r30, 0x4F	; 79
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 7e       	andi	r24, 0xEF	; 239
    163e:	8c 93       	st	X, r24
    1640:	af e4       	ldi	r26, 0x4F	; 79
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ef e4       	ldi	r30, 0x4F	; 79
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 7d       	andi	r24, 0xDF	; 223
    164c:	8c 93       	st	X, r24
	Overflow_Interrupt_Enable_1;
    164e:	a9 e5       	ldi	r26, 0x59	; 89
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e9 e5       	ldi	r30, 0x59	; 89
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	84 60       	ori	r24, 0x04	; 4
    165a:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_2;
	prescaler_clk_8_2;
	Non_PWM_Normal_OC0_disconnected_2;
	Compare_Match_Interrupt_Enable_2;
#elif Timer2_Mode==Fast_PWM_Timer2_Mode
	Fast_PWM_2;
    166a:	a5 e4       	ldi	r26, 0x45	; 69
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e4       	ldi	r30, 0x45	; 69
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	8c 93       	st	X, r24
    1678:	a5 e4       	ldi	r26, 0x45	; 69
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e4       	ldi	r30, 0x45	; 69
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 64       	ori	r24, 0x40	; 64
    1684:	8c 93       	st	X, r24
	NonInverted_Mode_2;
    1686:	a5 e4       	ldi	r26, 0x45	; 69
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e4       	ldi	r30, 0x45	; 69
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	8c 93       	st	X, r24
    1694:	a5 e4       	ldi	r26, 0x45	; 69
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e4       	ldi	r30, 0x45	; 69
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
	No_prescaling_2;
    16a2:	a5 e4       	ldi	r26, 0x45	; 69
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e4       	ldi	r30, 0x45	; 69
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8b 7f       	andi	r24, 0xFB	; 251
    16ae:	8c 93       	st	X, r24
    16b0:	a5 e4       	ldi	r26, 0x45	; 69
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e4       	ldi	r30, 0x45	; 69
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8d 7f       	andi	r24, 0xFD	; 253
    16bc:	8c 93       	st	X, r24
    16be:	a5 e4       	ldi	r26, 0x45	; 69
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e4       	ldi	r30, 0x45	; 69
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Set_Duty_Cycle_TIMER_0+0xa>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <Set_Duty_Cycle_TIMER_0+0xc>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	69 83       	std	Y+1, r22	; 0x01
    16e4:	7a 83       	std	Y+2, r23	; 0x02
    16e6:	8b 83       	std	Y+3, r24	; 0x03
    16e8:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    16ea:	69 81       	ldd	r22, Y+1	; 0x01
    16ec:	7a 81       	ldd	r23, Y+2	; 0x02
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	48 ec       	ldi	r20, 0xC8	; 200
    16f8:	52 e4       	ldi	r21, 0x42	; 66
    16fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	ab 83       	std	Y+3, r26	; 0x03
    1708:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    170a:	0c e5       	ldi	r16, 0x5C	; 92
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	69 81       	ldd	r22, Y+1	; 0x01
    1710:	7a 81       	ldd	r23, Y+2	; 0x02
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	53 e4       	ldi	r21, 0x43	; 67
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	f8 01       	movw	r30, r16
    1748:	80 83       	st	Z, r24

}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <Set_Duty_Cycle_TIMER_1_A+0xa>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <Set_Duty_Cycle_TIMER_1_A+0xc>
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	69 83       	std	Y+1, r22	; 0x01
    176e:	7a 83       	std	Y+2, r23	; 0x02
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9c 83       	std	Y+4, r25	; 0x04
#if Timer1_Mode==NORMAL_Timer_1
	percentage_Value=percentage_Value/100;
    1774:	69 81       	ldd	r22, Y+1	; 0x01
    1776:	7a 81       	ldd	r23, Y+2	; 0x02
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	48 ec       	ldi	r20, 0xC8	; 200
    1782:	52 e4       	ldi	r21, 0x42	; 66
    1784:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	ab 83       	std	Y+3, r26	; 0x03
    1792:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*65535)-1;
    1794:	0a e4       	ldi	r16, 0x4A	; 74
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	69 81       	ldd	r22, Y+1	; 0x01
    179a:	7a 81       	ldd	r23, Y+2	; 0x02
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	f8 01       	movw	r30, r16
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <Set_Duty_Cycle_TIMER_1_B+0xa>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <Set_Duty_Cycle_TIMER_1_B+0xc>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	69 83       	std	Y+1, r22	; 0x01
    17fa:	7a 83       	std	Y+2, r23	; 0x02
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	9c 83       	std	Y+4, r25	; 0x04
#if Timer1_Mode==NORMAL_Timer_1
	percentage_Value=percentage_Value/100;
    1800:	69 81       	ldd	r22, Y+1	; 0x01
    1802:	7a 81       	ldd	r23, Y+2	; 0x02
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	48 ec       	ldi	r20, 0xC8	; 200
    180e:	52 e4       	ldi	r21, 0x42	; 66
    1810:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	ab 83       	std	Y+3, r26	; 0x03
    181e:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*65535)-1;
    1820:	08 e4       	ldi	r16, 0x48	; 72
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	69 81       	ldd	r22, Y+1	; 0x01
    1826:	7a 81       	ldd	r23, Y+2	; 0x02
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	f8 01       	movw	r30, r16
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <Set_Duty_Cycle_TIMER_2+0xa>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Set_Duty_Cycle_TIMER_2+0xc>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	69 83       	std	Y+1, r22	; 0x01
    1886:	7a 83       	std	Y+2, r23	; 0x02
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    188c:	69 81       	ldd	r22, Y+1	; 0x01
    188e:	7a 81       	ldd	r23, Y+2	; 0x02
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	48 ec       	ldi	r20, 0xC8	; 200
    189a:	52 e4       	ldi	r21, 0x42	; 66
    189c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	ab 83       	std	Y+3, r26	; 0x03
    18aa:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    18ac:	03 e4       	ldi	r16, 0x43	; 67
    18ae:	10 e0       	ldi	r17, 0x00	; 0
    18b0:	69 81       	ldd	r22, Y+1	; 0x01
    18b2:	7a 81       	ldd	r23, Y+2	; 0x02
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	53 e4       	ldi	r21, 0x43	; 67
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24

}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret

000018fe <TIMER1_Input_Capture_Enterrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Enterrupt_Enable(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1906:	a9 e5       	ldi	r26, 0x59	; 89
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e9 e5       	ldi	r30, 0x59	; 89
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 62       	ori	r24, 0x20	; 32
    1912:	8c 93       	st	X, r24
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <TIMER1_ICU_EdgeSelect>:
/********************************************************************************************************/
void TIMER1_ICU_EdgeSelect(u8 EdgeSelect)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
	if(EdgeSelect==Falling_edge)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	88 23       	and	r24, r24
    192a:	41 f4       	brne	.+16     	; 0x193c <TIMER1_ICU_EdgeSelect+0x22>
	{
		CLR_BIT(TCCR1B,ICES1);
    192c:	ae e4       	ldi	r26, 0x4E	; 78
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ee e4       	ldi	r30, 0x4E	; 78
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 7b       	andi	r24, 0xBF	; 191
    1938:	8c 93       	st	X, r24
    193a:	0a c0       	rjmp	.+20     	; 0x1950 <TIMER1_ICU_EdgeSelect+0x36>
	}
	else if(EdgeSelect==Rising_edge)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	39 f4       	brne	.+14     	; 0x1950 <TIMER1_ICU_EdgeSelect+0x36>
	{
		SET_BIT(TCCR1B,ICES1);
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	8c 93       	st	X, r24
	}
	else
	{
    #warning"wrong edge select"
	}
}
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <Get_Value_From_ICREG>:
/********************************************************************************************************/
u16 Get_Value_From_ICREG(void)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1960:	e6 e4       	ldi	r30, 0x46	; 70
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <GIE_Vid_Enable>:
#include"GIE_Reg.h"
#include"GIE_Config.h"


void GIE_Vid_Enable (void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    1976:	af e5       	ldi	r26, 0x5F	; 95
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ef e5       	ldi	r30, 0x5F	; 95
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	80 68       	ori	r24, 0x80	; 128
    1982:	8c 93       	st	X, r24
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    1992:	af e5       	ldi	r26, 0x5F	; 95
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef e5       	ldi	r30, 0x5F	; 95
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 77       	andi	r24, 0x7F	; 127
    199e:	8c 93       	st	X, r24
}
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <INT0_SetCallBack>:
static void (*GPFunc0)(void)=NULL;
static void (*GPFunc1)(void)=NULL;
static void (*GPFunc2)(void)=NULL;

void INT0_SetCallBack(void(*LocPFunc)(void))
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <INT0_SetCallBack+0x6>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	90 93 90 00 	sts	0x0090, r25
    19bc:	80 93 8f 00 	sts	0x008F, r24
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <INT1_SetCallBack>:
void INT1_SetCallBack(void(*LocPFunc)(void))
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <INT1_SetCallBack+0x6>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	90 93 92 00 	sts	0x0092, r25
    19e0:	80 93 91 00 	sts	0x0091, r24
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <INT2_SetCallBack>:
void INT2_SetCallBack(void(*LocPFunc)(void))
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <INT2_SetCallBack+0x6>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	90 93 94 00 	sts	0x0094, r25
    1a04:	80 93 93 00 	sts	0x0093, r24
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <__vector_1>:
ISR(__vector_1)
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	2f 93       	push	r18
    1a1e:	3f 93       	push	r19
    1a20:	4f 93       	push	r20
    1a22:	5f 93       	push	r21
    1a24:	6f 93       	push	r22
    1a26:	7f 93       	push	r23
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	af 93       	push	r26
    1a2e:	bf 93       	push	r27
    1a30:	ef 93       	push	r30
    1a32:	ff 93       	push	r31
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    1a3c:	80 91 8f 00 	lds	r24, 0x008F
    1a40:	90 91 90 00 	lds	r25, 0x0090
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__vector_1+0x40>
	{
		GPFunc0();
    1a48:	e0 91 8f 00 	lds	r30, 0x008F
    1a4c:	f0 91 90 00 	lds	r31, 0x0090
    1a50:	09 95       	icall
	}
}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <__vector_2>:
ISR(__vector_2)
{
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	11 24       	eor	r1, r1
    1a82:	2f 93       	push	r18
    1a84:	3f 93       	push	r19
    1a86:	4f 93       	push	r20
    1a88:	5f 93       	push	r21
    1a8a:	6f 93       	push	r22
    1a8c:	7f 93       	push	r23
    1a8e:	8f 93       	push	r24
    1a90:	9f 93       	push	r25
    1a92:	af 93       	push	r26
    1a94:	bf 93       	push	r27
    1a96:	ef 93       	push	r30
    1a98:	ff 93       	push	r31
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    1aa2:	80 91 91 00 	lds	r24, 0x0091
    1aa6:	90 91 92 00 	lds	r25, 0x0092
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <__vector_2+0x40>
	{
		GPFunc1();
    1aae:	e0 91 91 00 	lds	r30, 0x0091
    1ab2:	f0 91 92 00 	lds	r31, 0x0092
    1ab6:	09 95       	icall
	}
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	ff 91       	pop	r31
    1abe:	ef 91       	pop	r30
    1ac0:	bf 91       	pop	r27
    1ac2:	af 91       	pop	r26
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	7f 91       	pop	r23
    1aca:	6f 91       	pop	r22
    1acc:	5f 91       	pop	r21
    1ace:	4f 91       	pop	r20
    1ad0:	3f 91       	pop	r19
    1ad2:	2f 91       	pop	r18
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <__vector_3>:
ISR(__vector_3)
{
    1ade:	1f 92       	push	r1
    1ae0:	0f 92       	push	r0
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	0f 92       	push	r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	6f 93       	push	r22
    1af2:	7f 93       	push	r23
    1af4:	8f 93       	push	r24
    1af6:	9f 93       	push	r25
    1af8:	af 93       	push	r26
    1afa:	bf 93       	push	r27
    1afc:	ef 93       	push	r30
    1afe:	ff 93       	push	r31
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    1b08:	80 91 93 00 	lds	r24, 0x0093
    1b0c:	90 91 94 00 	lds	r25, 0x0094
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <__vector_3+0x40>
	{
		GPFunc2();
    1b14:	e0 91 93 00 	lds	r30, 0x0093
    1b18:	f0 91 94 00 	lds	r31, 0x0094
    1b1c:	09 95       	icall
	}
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	ff 91       	pop	r31
    1b24:	ef 91       	pop	r30
    1b26:	bf 91       	pop	r27
    1b28:	af 91       	pop	r26
    1b2a:	9f 91       	pop	r25
    1b2c:	8f 91       	pop	r24
    1b2e:	7f 91       	pop	r23
    1b30:	6f 91       	pop	r22
    1b32:	5f 91       	pop	r21
    1b34:	4f 91       	pop	r20
    1b36:	3f 91       	pop	r19
    1b38:	2f 91       	pop	r18
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0
    1b40:	1f 90       	pop	r1
    1b42:	18 95       	reti

00001b44 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    1b4c:	ab e5       	ldi	r26, 0x5B	; 91
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e5       	ldi	r30, 0x5B	; 91
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    1b5a:	a5 e5       	ldi	r26, 0x55	; 85
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e5       	ldi	r30, 0x55	; 85
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	81 60       	ori	r24, 0x01	; 1
    1b66:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    1b68:	a5 e5       	ldi	r26, 0x55	; 85
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e5 e5       	ldi	r30, 0x55	; 85
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	8c 93       	st	X, r24
	#endif
}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    1b84:	ab e5       	ldi	r26, 0x5B	; 91
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	eb e5       	ldi	r30, 0x5B	; 91
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 68       	ori	r24, 0x80	; 128
    1b90:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    1b92:	a5 e5       	ldi	r26, 0x55	; 85
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e5 e5       	ldi	r30, 0x55	; 85
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8b 7f       	andi	r24, 0xFB	; 251
    1b9e:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    1ba0:	a5 e5       	ldi	r26, 0x55	; 85
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e5       	ldi	r30, 0x55	; 85
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    1bbc:	ab e5       	ldi	r26, 0x5B	; 91
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	eb e5       	ldi	r30, 0x5B	; 91
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 62       	ori	r24, 0x20	; 32
    1bc8:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    1bca:	a4 e5       	ldi	r26, 0x54	; 84
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e4 e5       	ldi	r30, 0x54	; 84
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 7b       	andi	r24, 0xBF	; 191
    1bd6:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	27 97       	sbiw	r28, 0x07	; 7
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	6a 83       	std	Y+2, r22	; 0x02
    1bf6:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <DIO_VidSetPinDirection+0x22>
    1bfe:	6f c0       	rjmp	.+222    	; 0x1cde <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3f 83       	std	Y+7, r19	; 0x07
    1c08:	2e 83       	std	Y+6, r18	; 0x06
    1c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	49 f1       	breq	.+82     	; 0x1c66 <DIO_VidSetPinDirection+0x88>
    1c14:	2e 81       	ldd	r18, Y+6	; 0x06
    1c16:	3f 81       	ldd	r19, Y+7	; 0x07
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <DIO_VidSetPinDirection+0x4a>
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <DIO_VidSetPinDirection+0x60>
    1c26:	d2 c0       	rjmp	.+420    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
    1c28:	2e 81       	ldd	r18, Y+6	; 0x06
    1c2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	71 f1       	breq	.+92     	; 0x1c8e <DIO_VidSetPinDirection+0xb0>
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	9f 81       	ldd	r25, Y+7	; 0x07
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	e9 f1       	breq	.+122    	; 0x1cb6 <DIO_VidSetPinDirection+0xd8>
    1c3c:	c7 c0       	rjmp	.+398    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
    1c3e:	aa e3       	ldi	r26, 0x3A	; 58
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ea e3       	ldi	r30, 0x3A	; 58
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_VidSetPinDirection+0x7e>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_VidSetPinDirection+0x7a>
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	b3 c0       	rjmp	.+358    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
    1c66:	a7 e3       	ldi	r26, 0x37	; 55
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e7 e3       	ldi	r30, 0x37	; 55
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_VidSetPinDirection+0xa6>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_VidSetPinDirection+0xa2>
    1c88:	84 2b       	or	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	9f c0       	rjmp	.+318    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
    1c8e:	a4 e3       	ldi	r26, 0x34	; 52
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e4 e3       	ldi	r30, 0x34	; 52
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_VidSetPinDirection+0xce>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_VidSetPinDirection+0xca>
    1cb0:	84 2b       	or	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	8b c0       	rjmp	.+278    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
    1cb6:	a1 e3       	ldi	r26, 0x31	; 49
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e1 e3       	ldi	r30, 0x31	; 49
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_VidSetPinDirection+0xf6>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_VidSetPinDirection+0xf2>
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	77 c0       	rjmp	.+238    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <DIO_VidSetPinDirection+0x108>
    1ce4:	73 c0       	rjmp	.+230    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3d 83       	std	Y+5, r19	; 0x05
    1cee:	2c 83       	std	Y+4, r18	; 0x04
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	59 f1       	breq	.+86     	; 0x1d50 <DIO_VidSetPinDirection+0x172>
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfe:	22 30       	cpi	r18, 0x02	; 2
    1d00:	31 05       	cpc	r19, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <DIO_VidSetPinDirection+0x130>
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	9d 81       	ldd	r25, Y+5	; 0x05
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f0       	breq	.+26     	; 0x1d26 <DIO_VidSetPinDirection+0x148>
    1d0c:	5f c0       	rjmp	.+190    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
    1d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d10:	3d 81       	ldd	r19, Y+5	; 0x05
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	89 f1       	breq	.+98     	; 0x1d7a <DIO_VidSetPinDirection+0x19c>
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <DIO_VidSetPinDirection+0x146>
    1d22:	40 c0       	rjmp	.+128    	; 0x1da4 <DIO_VidSetPinDirection+0x1c6>
    1d24:	53 c0       	rjmp	.+166    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
    1d26:	aa e3       	ldi	r26, 0x3A	; 58
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e3       	ldi	r30, 0x3A	; 58
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_VidSetPinDirection+0x166>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_VidSetPinDirection+0x162>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	3e c0       	rjmp	.+124    	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
    1d50:	a7 e3       	ldi	r26, 0x37	; 55
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e7 e3       	ldi	r30, 0x37	; 55
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <DIO_VidSetPinDirection+0x190>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <DIO_VidSetPinDirection+0x18c>
    1d72:	80 95       	com	r24
    1d74:	84 23       	and	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	29 c0       	rjmp	.+82     	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
    1d7a:	a4 e3       	ldi	r26, 0x34	; 52
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e4 e3       	ldi	r30, 0x34	; 52
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_VidSetPinDirection+0x1ba>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_VidSetPinDirection+0x1b6>
    1d9c:	80 95       	com	r24
    1d9e:	84 23       	and	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
    1da4:	a1 e3       	ldi	r26, 0x31	; 49
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e1 e3       	ldi	r30, 0x31	; 49
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_VidSetPinDirection+0x1e4>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_VidSetPinDirection+0x1e0>
    1dc6:	80 95       	com	r24
    1dc8:	84 23       	and	r24, r20
    1dca:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1dcc:	27 96       	adiw	r28, 0x07	; 7
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	27 97       	sbiw	r28, 0x07	; 7
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	6a 83       	std	Y+2, r22	; 0x02
    1df6:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <DIO_VidSetPinValue+0x22>
    1dfe:	6f c0       	rjmp	.+222    	; 0x1ede <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	3f 83       	std	Y+7, r19	; 0x07
    1e08:	2e 83       	std	Y+6, r18	; 0x06
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	49 f1       	breq	.+82     	; 0x1e66 <DIO_VidSetPinValue+0x88>
    1e14:	2e 81       	ldd	r18, Y+6	; 0x06
    1e16:	3f 81       	ldd	r19, Y+7	; 0x07
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <DIO_VidSetPinValue+0x4a>
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <DIO_VidSetPinValue+0x60>
    1e26:	d2 c0       	rjmp	.+420    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
    1e28:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	71 f1       	breq	.+92     	; 0x1e8e <DIO_VidSetPinValue+0xb0>
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	83 30       	cpi	r24, 0x03	; 3
    1e38:	91 05       	cpc	r25, r1
    1e3a:	e9 f1       	breq	.+122    	; 0x1eb6 <DIO_VidSetPinValue+0xd8>
    1e3c:	c7 c0       	rjmp	.+398    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1e3e:	ab e3       	ldi	r26, 0x3B	; 59
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	eb e3       	ldi	r30, 0x3B	; 59
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_VidSetPinValue+0x7e>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_VidSetPinValue+0x7a>
    1e60:	84 2b       	or	r24, r20
    1e62:	8c 93       	st	X, r24
    1e64:	b3 c0       	rjmp	.+358    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    1e66:	a8 e3       	ldi	r26, 0x38	; 56
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e8 e3       	ldi	r30, 0x38	; 56
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	48 2f       	mov	r20, r24
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_VidSetPinValue+0xa6>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_VidSetPinValue+0xa2>
    1e88:	84 2b       	or	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	9f c0       	rjmp	.+318    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    1e8e:	a5 e3       	ldi	r26, 0x35	; 53
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e5 e3       	ldi	r30, 0x35	; 53
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_VidSetPinValue+0xce>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_VidSetPinValue+0xca>
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	8b c0       	rjmp	.+278    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <DIO_VidSetPinValue+0xf6>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <DIO_VidSetPinValue+0xf2>
    1ed8:	84 2b       	or	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	77 c0       	rjmp	.+238    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <DIO_VidSetPinValue+0x108>
    1ee4:	73 c0       	rjmp	.+230    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	3d 83       	std	Y+5, r19	; 0x05
    1eee:	2c 83       	std	Y+4, r18	; 0x04
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	59 f1       	breq	.+86     	; 0x1f50 <DIO_VidSetPinValue+0x172>
    1efa:	2c 81       	ldd	r18, Y+4	; 0x04
    1efc:	3d 81       	ldd	r19, Y+5	; 0x05
    1efe:	22 30       	cpi	r18, 0x02	; 2
    1f00:	31 05       	cpc	r19, r1
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <DIO_VidSetPinValue+0x130>
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f0       	breq	.+26     	; 0x1f26 <DIO_VidSetPinValue+0x148>
    1f0c:	5f c0       	rjmp	.+190    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
    1f0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f10:	3d 81       	ldd	r19, Y+5	; 0x05
    1f12:	22 30       	cpi	r18, 0x02	; 2
    1f14:	31 05       	cpc	r19, r1
    1f16:	89 f1       	breq	.+98     	; 0x1f7a <DIO_VidSetPinValue+0x19c>
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	83 30       	cpi	r24, 0x03	; 3
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <DIO_VidSetPinValue+0x146>
    1f22:	40 c0       	rjmp	.+128    	; 0x1fa4 <DIO_VidSetPinValue+0x1c6>
    1f24:	53 c0       	rjmp	.+166    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    1f26:	ab e3       	ldi	r26, 0x3B	; 59
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_VidSetPinValue+0x166>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_VidSetPinValue+0x162>
    1f48:	80 95       	com	r24
    1f4a:	84 23       	and	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	3e c0       	rjmp	.+124    	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    1f50:	a8 e3       	ldi	r26, 0x38	; 56
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e8 e3       	ldi	r30, 0x38	; 56
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 2e       	mov	r0, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_VidSetPinValue+0x190>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	0a 94       	dec	r0
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_VidSetPinValue+0x18c>
    1f72:	80 95       	com	r24
    1f74:	84 23       	and	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	29 c0       	rjmp	.+82     	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    1f7a:	a5 e3       	ldi	r26, 0x35	; 53
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e3       	ldi	r30, 0x35	; 53
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <DIO_VidSetPinValue+0x1ba>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <DIO_VidSetPinValue+0x1b6>
    1f9c:	80 95       	com	r24
    1f9e:	84 23       	and	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    1fa4:	a2 e3       	ldi	r26, 0x32	; 50
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e2 e3       	ldi	r30, 0x32	; 50
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <DIO_VidSetPinValue+0x1e4>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <DIO_VidSetPinValue+0x1e0>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1fcc:	27 96       	adiw	r28, 0x07	; 7
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <DIO_VidSetPortDirection+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <DIO_VidSetPortDirection+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	3c 83       	std	Y+4, r19	; 0x04
    1ff6:	2b 83       	std	Y+3, r18	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	91 05       	cpc	r25, r1
    2000:	d1 f0       	breq	.+52     	; 0x2036 <DIO_VidSetPortDirection+0x58>
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	2c f4       	brge	.+10     	; 0x2016 <DIO_VidSetPortDirection+0x38>
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	61 f0       	breq	.+24     	; 0x202c <DIO_VidSetPortDirection+0x4e>
    2014:	1e c0       	rjmp	.+60     	; 0x2052 <DIO_VidSetPortDirection+0x74>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	81 f0       	breq	.+32     	; 0x2040 <DIO_VidSetPortDirection+0x62>
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	91 05       	cpc	r25, r1
    2028:	81 f0       	breq	.+32     	; 0x204a <DIO_VidSetPortDirection+0x6c>
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    202c:	ea e3       	ldi	r30, 0x3A	; 58
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	80 83       	st	Z, r24
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    2036:	e7 e3       	ldi	r30, 0x37	; 55
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	80 83       	st	Z, r24
    203e:	09 c0       	rjmp	.+18     	; 0x2052 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    2040:	e4 e3       	ldi	r30, 0x34	; 52
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	80 83       	st	Z, r24
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    204a:	e1 e3       	ldi	r30, 0x31	; 49
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	80 83       	st	Z, r24
	}	
	
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_VidSetPortValue+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <DIO_VidSetPortValue+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3c 83       	std	Y+4, r19	; 0x04
    2078:	2b 83       	std	Y+3, r18	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	d1 f0       	breq	.+52     	; 0x20b8 <DIO_VidSetPortValue+0x58>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <DIO_VidSetPortValue+0x38>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 f0       	breq	.+24     	; 0x20ae <DIO_VidSetPortValue+0x4e>
    2096:	1e c0       	rjmp	.+60     	; 0x20d4 <DIO_VidSetPortValue+0x74>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	81 f0       	breq	.+32     	; 0x20c2 <DIO_VidSetPortValue+0x62>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <DIO_VidSetPortValue+0x6c>
    20ac:	13 c0       	rjmp	.+38     	; 0x20d4 <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    20ae:	eb e3       	ldi	r30, 0x3B	; 59
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	80 83       	st	Z, r24
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    20b8:	e8 e3       	ldi	r30, 0x38	; 56
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	80 83       	st	Z, r24
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    20c2:	e5 e3       	ldi	r30, 0x35	; 53
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	80 83       	st	Z, r24
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    20cc:	e2 e3       	ldi	r30, 0x32	; 50
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	80 83       	st	Z, r24
	}	
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <DIO_u8GetPinValue+0x6>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <DIO_u8GetPinValue+0x8>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    20f4:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	3d 83       	std	Y+5, r19	; 0x05
    20fe:	2c 83       	std	Y+4, r18	; 0x04
    2100:	4c 81       	ldd	r20, Y+4	; 0x04
    2102:	5d 81       	ldd	r21, Y+5	; 0x05
    2104:	41 30       	cpi	r20, 0x01	; 1
    2106:	51 05       	cpc	r21, r1
    2108:	41 f1       	breq	.+80     	; 0x215a <DIO_u8GetPinValue+0x78>
    210a:	8c 81       	ldd	r24, Y+4	; 0x04
    210c:	9d 81       	ldd	r25, Y+5	; 0x05
    210e:	82 30       	cpi	r24, 0x02	; 2
    2110:	91 05       	cpc	r25, r1
    2112:	34 f4       	brge	.+12     	; 0x2120 <DIO_u8GetPinValue+0x3e>
    2114:	2c 81       	ldd	r18, Y+4	; 0x04
    2116:	3d 81       	ldd	r19, Y+5	; 0x05
    2118:	21 15       	cp	r18, r1
    211a:	31 05       	cpc	r19, r1
    211c:	61 f0       	breq	.+24     	; 0x2136 <DIO_u8GetPinValue+0x54>
    211e:	52 c0       	rjmp	.+164    	; 0x21c4 <DIO_u8GetPinValue+0xe2>
    2120:	4c 81       	ldd	r20, Y+4	; 0x04
    2122:	5d 81       	ldd	r21, Y+5	; 0x05
    2124:	42 30       	cpi	r20, 0x02	; 2
    2126:	51 05       	cpc	r21, r1
    2128:	51 f1       	breq	.+84     	; 0x217e <DIO_u8GetPinValue+0x9c>
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	91 05       	cpc	r25, r1
    2132:	b9 f1       	breq	.+110    	; 0x21a2 <DIO_u8GetPinValue+0xc0>
    2134:	47 c0       	rjmp	.+142    	; 0x21c4 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    2136:	e9 e3       	ldi	r30, 0x39	; 57
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a9 01       	movw	r20, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_u8GetPinValue+0x6c>
    214a:	55 95       	asr	r21
    214c:	47 95       	ror	r20
    214e:	8a 95       	dec	r24
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_u8GetPinValue+0x68>
    2152:	ca 01       	movw	r24, r20
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	35 c0       	rjmp	.+106    	; 0x21c4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    215a:	e6 e3       	ldi	r30, 0x36	; 54
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a9 01       	movw	r20, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <DIO_u8GetPinValue+0x90>
    216e:	55 95       	asr	r21
    2170:	47 95       	ror	r20
    2172:	8a 95       	dec	r24
    2174:	e2 f7       	brpl	.-8      	; 0x216e <DIO_u8GetPinValue+0x8c>
    2176:	ca 01       	movw	r24, r20
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	23 c0       	rjmp	.+70     	; 0x21c4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    217e:	e3 e3       	ldi	r30, 0x33	; 51
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_u8GetPinValue+0xb4>
    2192:	55 95       	asr	r21
    2194:	47 95       	ror	r20
    2196:	8a 95       	dec	r24
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_u8GetPinValue+0xb0>
    219a:	ca 01       	movw	r24, r20
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	11 c0       	rjmp	.+34     	; 0x21c4 <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    21a2:	e0 e3       	ldi	r30, 0x30	; 48
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a9 01       	movw	r20, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <DIO_u8GetPinValue+0xd8>
    21b6:	55 95       	asr	r21
    21b8:	47 95       	ror	r20
    21ba:	8a 95       	dec	r24
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <DIO_u8GetPinValue+0xd4>
    21be:	ca 01       	movw	r24, r20
    21c0:	81 70       	andi	r24, 0x01	; 1
    21c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <DIO_u8TogglePinValue+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <DIO_u8TogglePinValue+0x8>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3c 83       	std	Y+4, r19	; 0x04
    21ee:	2b 83       	std	Y+3, r18	; 0x03
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	91 05       	cpc	r25, r1
    21f8:	49 f1       	breq	.+82     	; 0x224c <DIO_u8TogglePinValue+0x76>
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	22 30       	cpi	r18, 0x02	; 2
    2200:	31 05       	cpc	r19, r1
    2202:	2c f4       	brge	.+10     	; 0x220e <DIO_u8TogglePinValue+0x38>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 f0       	breq	.+24     	; 0x2224 <DIO_u8TogglePinValue+0x4e>
    220c:	5a c0       	rjmp	.+180    	; 0x22c2 <DIO_u8TogglePinValue+0xec>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	71 f1       	breq	.+92     	; 0x2274 <DIO_u8TogglePinValue+0x9e>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	e9 f1       	breq	.+122    	; 0x229c <DIO_u8TogglePinValue+0xc6>
    2222:	4f c0       	rjmp	.+158    	; 0x22c2 <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    2224:	ab e3       	ldi	r26, 0x3B	; 59
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	eb e3       	ldi	r30, 0x3B	; 59
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	48 2f       	mov	r20, r24
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 2e       	mov	r0, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <DIO_u8TogglePinValue+0x6c>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	0a 94       	dec	r0
    2244:	e2 f7       	brpl	.-8      	; 0x223e <DIO_u8TogglePinValue+0x68>
    2246:	84 27       	eor	r24, r20
    2248:	8c 93       	st	X, r24
    224a:	3b c0       	rjmp	.+118    	; 0x22c2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    224c:	a8 e3       	ldi	r26, 0x38	; 56
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e8 e3       	ldi	r30, 0x38	; 56
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_u8TogglePinValue+0x94>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_u8TogglePinValue+0x90>
    226e:	84 27       	eor	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	27 c0       	rjmp	.+78     	; 0x22c2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    2274:	a5 e3       	ldi	r26, 0x35	; 53
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e3       	ldi	r30, 0x35	; 53
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_u8TogglePinValue+0xbc>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_u8TogglePinValue+0xb8>
    2296:	84 27       	eor	r24, r20
    2298:	8c 93       	st	X, r24
    229a:	13 c0       	rjmp	.+38     	; 0x22c2 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    229c:	a2 e3       	ldi	r26, 0x32	; 50
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e2 e3       	ldi	r30, 0x32	; 50
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_u8TogglePinValue+0xe4>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_u8TogglePinValue+0xe0>
    22be:	84 27       	eor	r24, r20
    22c0:	8c 93       	st	X, r24
	}
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <ADC_SetCallBack+0x6>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	90 93 96 00 	sts	0x0096, r25
    22e6:	80 93 95 00 	sts	0x0095, r24
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    22f4:	1f 92       	push	r1
    22f6:	0f 92       	push	r0
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	0f 92       	push	r0
    22fc:	11 24       	eor	r1, r1
    22fe:	2f 93       	push	r18
    2300:	3f 93       	push	r19
    2302:	4f 93       	push	r20
    2304:	5f 93       	push	r21
    2306:	6f 93       	push	r22
    2308:	7f 93       	push	r23
    230a:	8f 93       	push	r24
    230c:	9f 93       	push	r25
    230e:	af 93       	push	r26
    2310:	bf 93       	push	r27
    2312:	ef 93       	push	r30
    2314:	ff 93       	push	r31
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    231e:	80 91 95 00 	lds	r24, 0x0095
    2322:	90 91 96 00 	lds	r25, 0x0096
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	29 f0       	breq	.+10     	; 0x2334 <__vector_16+0x40>
	{
		GPFunc();
    232a:	e0 91 95 00 	lds	r30, 0x0095
    232e:	f0 91 96 00 	lds	r31, 0x0096
    2332:	09 95       	icall
	}
}
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	bf 91       	pop	r27
    233e:	af 91       	pop	r26
    2340:	9f 91       	pop	r25
    2342:	8f 91       	pop	r24
    2344:	7f 91       	pop	r23
    2346:	6f 91       	pop	r22
    2348:	5f 91       	pop	r21
    234a:	4f 91       	pop	r20
    234c:	3f 91       	pop	r19
    234e:	2f 91       	pop	r18
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    2362:	a7 e2       	ldi	r26, 0x27	; 39
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e7 e2       	ldi	r30, 0x27	; 39
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 64       	ori	r24, 0x40	; 64
    236e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2370:	a7 e2       	ldi	r26, 0x27	; 39
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e7 e2       	ldi	r30, 0x27	; 39
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8f 77       	andi	r24, 0x7F	; 127
    237c:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    237e:	a6 e2       	ldi	r26, 0x26	; 38
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e6 e2       	ldi	r30, 0x26	; 38
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	8e 7f       	andi	r24, 0xFE	; 254
    238a:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    238c:	a6 e2       	ldi	r26, 0x26	; 38
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e6 e2       	ldi	r30, 0x26	; 38
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	82 60       	ori	r24, 0x02	; 2
    2398:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    239a:	a6 e2       	ldi	r26, 0x26	; 38
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e6 e2       	ldi	r30, 0x26	; 38
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	84 60       	ori	r24, 0x04	; 4
    23a6:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    23a8:	a7 e2       	ldi	r26, 0x27	; 39
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e7 e2       	ldi	r30, 0x27	; 39
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8f 7d       	andi	r24, 0xDF	; 223
    23b4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADATE);
		CLR_BIT(SFIOR,ADTS0);
		CLR_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	#elif	ADC_Mode==ADC_External_Interrupt_0_Trigger
		SET_BIT(ADCSRA,ADATE);
    23b6:	a6 e2       	ldi	r26, 0x26	; 38
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e6 e2       	ldi	r30, 0x26	; 38
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	80 62       	ori	r24, 0x20	; 32
    23c2:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    23c4:	a0 e5       	ldi	r26, 0x50	; 80
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e0 e5       	ldi	r30, 0x50	; 80
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 7d       	andi	r24, 0xDF	; 223
    23d0:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
    23d2:	a0 e5       	ldi	r26, 0x50	; 80
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e0 e5       	ldi	r30, 0x50	; 80
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	80 64       	ori	r24, 0x40	; 64
    23de:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    23e0:	a0 e5       	ldi	r26, 0x50	; 80
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e0 e5       	ldi	r30, 0x50	; 80
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	8f 77       	andi	r24, 0x7F	; 127
    23ec:	8c 93       	st	X, r24
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    23ee:	a6 e2       	ldi	r26, 0x26	; 38
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e6 e2       	ldi	r30, 0x26	; 38
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	8c 93       	st	X, r24
}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    240a:	a6 e2       	ldi	r26, 0x26	; 38
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e6 e2       	ldi	r30, 0x26	; 38
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 64       	ori	r24, 0x40	; 64
    2416:	8c 93       	st	X, r24
}
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <ADC_Select_Channal>:
void ADC_Select_Channal(u8 Channal)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    242a:	a7 e2       	ldi	r26, 0x27	; 39
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e7 e2       	ldi	r30, 0x27	; 39
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	80 7e       	andi	r24, 0xE0	; 224
    2436:	8c 93       	st	X, r24
	ADMUX|=Channal;
    2438:	a7 e2       	ldi	r26, 0x27	; 39
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e2       	ldi	r30, 0x27	; 39
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	90 81       	ld	r25, Z
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	89 2b       	or	r24, r25
    2446:	8c 93       	st	X, r24
}
    2448:	0f 90       	pop	r0
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2458:	a6 e2       	ldi	r26, 0x26	; 38
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e6 e2       	ldi	r30, 0x26	; 38
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	88 60       	ori	r24, 0x08	; 8
    2464:	8c 93       	st	X, r24
}
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    2474:	e6 e2       	ldi	r30, 0x26	; 38
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	82 95       	swap	r24
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	88 2f       	mov	r24, r24
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	81 70       	andi	r24, 0x01	; 1
    2484:	90 70       	andi	r25, 0x00	; 0
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	a9 f3       	breq	.-22     	; 0x2474 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    248a:	a6 e2       	ldi	r26, 0x26	; 38
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e6 e2       	ldi	r30, 0x26	; 38
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 61       	ori	r24, 0x10	; 16
    2496:	8c 93       	st	X, r24
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <ADC_Get_Result+0x6>
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    24ac:	e4 e2       	ldi	r30, 0x24	; 36
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	e9 81       	ldd	r30, Y+1	; 0x01
    24b6:	fa 81       	ldd	r31, Y+2	; 0x02
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	6c 97       	sbiw	r28, 0x1c	; 28
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e8       	ldi	r26, 0x80	; 128
    24ea:	bf e3       	ldi	r27, 0x3F	; 63
    24ec:	89 8f       	std	Y+25, r24	; 0x19
    24ee:	9a 8f       	std	Y+26, r25	; 0x1a
    24f0:	ab 8f       	std	Y+27, r26	; 0x1b
    24f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	69 8d       	ldd	r22, Y+25	; 0x19
    24f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8d 8b       	std	Y+21, r24	; 0x15
    250e:	9e 8b       	std	Y+22, r25	; 0x16
    2510:	af 8b       	std	Y+23, r26	; 0x17
    2512:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    2536:	6d 89       	ldd	r22, Y+21	; 0x15
    2538:	7e 89       	ldd	r23, Y+22	; 0x16
    253a:	8f 89       	ldd	r24, Y+23	; 0x17
    253c:	98 8d       	ldd	r25, Y+24	; 0x18
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	69 8d       	ldd	r22, Y+25	; 0x19
    2550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_VidPulseEnable+0xd0>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2580:	89 89       	ldd	r24, Y+17	; 0x11
    2582:	9a 89       	ldd	r25, Y+18	; 0x12
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_VidPulseEnable+0xbe>
    2588:	9a 8b       	std	Y+18, r25	; 0x12
    258a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9c 8b       	std	Y+20, r25	; 0x14
    2594:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8b 89       	ldd	r24, Y+19	; 0x13
    2598:	9c 89       	ldd	r25, Y+20	; 0x14
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_VidPulseEnable+0xb2>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6d 89       	ldd	r22, Y+21	; 0x15
    25a2:	7e 89       	ldd	r23, Y+22	; 0x16
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	8b 89       	ldd	r24, Y+19	; 0x13
    25b6:	9c 89       	ldd	r25, Y+20	; 0x14
    25b8:	98 8b       	std	Y+16, r25	; 0x10
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	98 89       	ldd	r25, Y+16	; 0x10
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_VidPulseEnable+0xfa>
    25c4:	98 8b       	std	Y+16, r25	; 0x10
    25c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	9c 87       	std	Y+12, r25	; 0x0c
    25de:	ad 87       	std	Y+13, r26	; 0x0d
    25e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f 83       	std	Y+7, r24	; 0x07
    25fc:	98 87       	std	Y+8, r25	; 0x08
    25fe:	a9 87       	std	Y+9, r26	; 0x09
    2600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_VidPulseEnable+0x1be>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_VidPulseEnable+0x1ac>
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_VidPulseEnable+0x1a0>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_VidPulseEnable+0x1e8>
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    26b6:	6c 96       	adiw	r28, 0x1c	; 28
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_VidInit>:
void LCD_VidInit(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	e8 97       	sbiw	r28, 0x38	; 56
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a8 e4       	ldi	r26, 0x48	; 72
    26e2:	b2 e4       	ldi	r27, 0x42	; 66
    26e4:	8d ab       	std	Y+53, r24	; 0x35
    26e6:	9e ab       	std	Y+54, r25	; 0x36
    26e8:	af ab       	std	Y+55, r26	; 0x37
    26ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6d a9       	ldd	r22, Y+53	; 0x35
    26ee:	7e a9       	ldd	r23, Y+54	; 0x36
    26f0:	8f a9       	ldd	r24, Y+55	; 0x37
    26f2:	98 ad       	ldd	r25, Y+56	; 0x38
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	89 ab       	std	Y+49, r24	; 0x31
    2706:	9a ab       	std	Y+50, r25	; 0x32
    2708:	ab ab       	std	Y+51, r26	; 0x33
    270a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    270c:	69 a9       	ldd	r22, Y+49	; 0x31
    270e:	7a a9       	ldd	r23, Y+50	; 0x32
    2710:	8b a9       	ldd	r24, Y+51	; 0x33
    2712:	9c a9       	ldd	r25, Y+52	; 0x34
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <LCD_VidInit+0x66>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	98 ab       	std	Y+48, r25	; 0x30
    272a:	8f a7       	std	Y+47, r24	; 0x2f
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    272e:	69 a9       	ldd	r22, Y+49	; 0x31
    2730:	7a a9       	ldd	r23, Y+50	; 0x32
    2732:	8b a9       	ldd	r24, Y+51	; 0x33
    2734:	9c a9       	ldd	r25, Y+52	; 0x34
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6d a9       	ldd	r22, Y+53	; 0x35
    2748:	7e a9       	ldd	r23, Y+54	; 0x36
    274a:	8f a9       	ldd	r24, Y+55	; 0x37
    274c:	98 ad       	ldd	r25, Y+56	; 0x38
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	98 ab       	std	Y+48, r25	; 0x30
    276c:	8f a7       	std	Y+47, r24	; 0x2f
    276e:	0f c0       	rjmp	.+30     	; 0x278e <LCD_VidInit+0xc6>
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9e a7       	std	Y+46, r25	; 0x2e
    2776:	8d a7       	std	Y+45, r24	; 0x2d
    2778:	8d a5       	ldd	r24, Y+45	; 0x2d
    277a:	9e a5       	ldd	r25, Y+46	; 0x2e
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_VidInit+0xb4>
    2780:	9e a7       	std	Y+46, r25	; 0x2e
    2782:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8f a5       	ldd	r24, Y+47	; 0x2f
    2786:	98 a9       	ldd	r25, Y+48	; 0x30
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	98 ab       	std	Y+48, r25	; 0x30
    278c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2790:	98 a9       	ldd	r25, Y+48	; 0x30
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <LCD_VidInit+0xa8>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	69 a9       	ldd	r22, Y+49	; 0x31
    279a:	7a a9       	ldd	r23, Y+50	; 0x32
    279c:	8b a9       	ldd	r24, Y+51	; 0x33
    279e:	9c a9       	ldd	r25, Y+52	; 0x34
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	98 ab       	std	Y+48, r25	; 0x30
    27aa:	8f a7       	std	Y+47, r24	; 0x2f
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	9c a7       	std	Y+44, r25	; 0x2c
    27b2:	8b a7       	std	Y+43, r24	; 0x2b
    27b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_VidInit+0xf0>
    27bc:	9c a7       	std	Y+44, r25	; 0x2c
    27be:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		/* END OF DISPLAY CLEAR */

#elif MODE==8
	  /*set direction*/
		DIO_VidSetPortDirection(LCD_DATA_PORT,0XFF);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	6f ef       	ldi	r22, 0xFF	; 255
    27c4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_VidSetPortDirection>
		DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	67 e0       	ldi	r22, 0x07	; 7
    27cc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_VidSetPortDirection>

		LCD_VidWriteCommend(0B00111000);//function set
    27d0:	88 e3       	ldi	r24, 0x38	; 56
    27d2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e8       	ldi	r26, 0x80	; 128
    27dc:	bf e3       	ldi	r27, 0x3F	; 63
    27de:	8f a3       	std	Y+39, r24	; 0x27
    27e0:	98 a7       	std	Y+40, r25	; 0x28
    27e2:	a9 a7       	std	Y+41, r26	; 0x29
    27e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e6:	6f a1       	ldd	r22, Y+39	; 0x27
    27e8:	78 a5       	ldd	r23, Y+40	; 0x28
    27ea:	89 a5       	ldd	r24, Y+41	; 0x29
    27ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4a ef       	ldi	r20, 0xFA	; 250
    27f4:	54 e4       	ldi	r21, 0x44	; 68
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8b a3       	std	Y+35, r24	; 0x23
    2800:	9c a3       	std	Y+36, r25	; 0x24
    2802:	ad a3       	std	Y+37, r26	; 0x25
    2804:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2806:	6b a1       	ldd	r22, Y+35	; 0x23
    2808:	7c a1       	ldd	r23, Y+36	; 0x24
    280a:	8d a1       	ldd	r24, Y+37	; 0x25
    280c:	9e a1       	ldd	r25, Y+38	; 0x26
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e8       	ldi	r20, 0x80	; 128
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281a:	88 23       	and	r24, r24
    281c:	2c f4       	brge	.+10     	; 0x2828 <LCD_VidInit+0x160>
		__ticks = 1;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9a a3       	std	Y+34, r25	; 0x22
    2824:	89 a3       	std	Y+33, r24	; 0x21
    2826:	3f c0       	rjmp	.+126    	; 0x28a6 <LCD_VidInit+0x1de>
	else if (__tmp > 65535)
    2828:	6b a1       	ldd	r22, Y+35	; 0x23
    282a:	7c a1       	ldd	r23, Y+36	; 0x24
    282c:	8d a1       	ldd	r24, Y+37	; 0x25
    282e:	9e a1       	ldd	r25, Y+38	; 0x26
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	3f ef       	ldi	r19, 0xFF	; 255
    2834:	4f e7       	ldi	r20, 0x7F	; 127
    2836:	57 e4       	ldi	r21, 0x47	; 71
    2838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283c:	18 16       	cp	r1, r24
    283e:	4c f5       	brge	.+82     	; 0x2892 <LCD_VidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2840:	6f a1       	ldd	r22, Y+39	; 0x27
    2842:	78 a5       	ldd	r23, Y+40	; 0x28
    2844:	89 a5       	ldd	r24, Y+41	; 0x29
    2846:	9a a5       	ldd	r25, Y+42	; 0x2a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9a a3       	std	Y+34, r25	; 0x22
    2866:	89 a3       	std	Y+33, r24	; 0x21
    2868:	0f c0       	rjmp	.+30     	; 0x2888 <LCD_VidInit+0x1c0>
    286a:	88 ec       	ldi	r24, 0xC8	; 200
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	98 a3       	std	Y+32, r25	; 0x20
    2870:	8f 8f       	std	Y+31, r24	; 0x1f
    2872:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2874:	98 a1       	ldd	r25, Y+32	; 0x20
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_VidInit+0x1ae>
    287a:	98 a3       	std	Y+32, r25	; 0x20
    287c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287e:	89 a1       	ldd	r24, Y+33	; 0x21
    2880:	9a a1       	ldd	r25, Y+34	; 0x22
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	9a a3       	std	Y+34, r25	; 0x22
    2886:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2888:	89 a1       	ldd	r24, Y+33	; 0x21
    288a:	9a a1       	ldd	r25, Y+34	; 0x22
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	69 f7       	brne	.-38     	; 0x286a <LCD_VidInit+0x1a2>
    2890:	14 c0       	rjmp	.+40     	; 0x28ba <LCD_VidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2892:	6b a1       	ldd	r22, Y+35	; 0x23
    2894:	7c a1       	ldd	r23, Y+36	; 0x24
    2896:	8d a1       	ldd	r24, Y+37	; 0x25
    2898:	9e a1       	ldd	r25, Y+38	; 0x26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	89 a1       	ldd	r24, Y+33	; 0x21
    28a8:	9a a1       	ldd	r25, Y+34	; 0x22
    28aa:	9e 8f       	std	Y+30, r25	; 0x1e
    28ac:	8d 8f       	std	Y+29, r24	; 0x1d
    28ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_VidInit+0x1ea>
    28b6:	9e 8f       	std	Y+30, r25	; 0x1e
    28b8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidWriteCommend(0B00001100);//screen on
    28ba:	8c e0       	ldi	r24, 0x0C	; 12
    28bc:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e8       	ldi	r26, 0x80	; 128
    28c6:	bf e3       	ldi	r27, 0x3F	; 63
    28c8:	89 8f       	std	Y+25, r24	; 0x19
    28ca:	9a 8f       	std	Y+26, r25	; 0x1a
    28cc:	ab 8f       	std	Y+27, r26	; 0x1b
    28ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	69 8d       	ldd	r22, Y+25	; 0x19
    28d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8d 8b       	std	Y+21, r24	; 0x15
    28ea:	9e 8b       	std	Y+22, r25	; 0x16
    28ec:	af 8b       	std	Y+23, r26	; 0x17
    28ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <LCD_VidInit+0x24a>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <LCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    2912:	6d 89       	ldd	r22, Y+21	; 0x15
    2914:	7e 89       	ldd	r23, Y+22	; 0x16
    2916:	8f 89       	ldd	r24, Y+23	; 0x17
    2918:	98 8d       	ldd	r25, Y+24	; 0x18
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <LCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	69 8d       	ldd	r22, Y+25	; 0x19
    292c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	8b 8b       	std	Y+19, r24	; 0x13
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <LCD_VidInit+0x2aa>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
    295c:	89 89       	ldd	r24, Y+17	; 0x11
    295e:	9a 89       	ldd	r25, Y+18	; 0x12
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_VidInit+0x298>
    2964:	9a 8b       	std	Y+18, r25	; 0x12
    2966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8b 89       	ldd	r24, Y+19	; 0x13
    296a:	9c 89       	ldd	r25, Y+20	; 0x14
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <LCD_VidInit+0x28c>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <LCD_VidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	6d 89       	ldd	r22, Y+21	; 0x15
    297e:	7e 89       	ldd	r23, Y+22	; 0x16
    2980:	8f 89       	ldd	r24, Y+23	; 0x17
    2982:	98 8d       	ldd	r25, Y+24	; 0x18
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	8b 89       	ldd	r24, Y+19	; 0x13
    2992:	9c 89       	ldd	r25, Y+20	; 0x14
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	8f 87       	std	Y+15, r24	; 0x0f
    2998:	8f 85       	ldd	r24, Y+15	; 0x0f
    299a:	98 89       	ldd	r25, Y+16	; 0x10
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_VidInit+0x2d4>
    29a0:	98 8b       	std	Y+16, r25	; 0x10
    29a2:	8f 87       	std	Y+15, r24	; 0x0f
	          _delay_ms(1);
		LCD_VidWriteCommend(0B00000001);//clear display
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e4       	ldi	r27, 0x40	; 64
    29b2:	8b 87       	std	Y+11, r24	; 0x0b
    29b4:	9c 87       	std	Y+12, r25	; 0x0c
    29b6:	ad 87       	std	Y+13, r26	; 0x0d
    29b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	98 87       	std	Y+8, r25	; 0x08
    29d6:	a9 87       	std	Y+9, r26	; 0x09
    29d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_VidInit+0x334>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_VidInit+0x3b2>
	else if (__tmp > 65535)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_VidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_VidInit+0x394>
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_VidInit+0x382>
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_VidInit+0x376>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_VidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_VidInit+0x3be>
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
	          _delay_ms(2);
		LCD_VidWriteCommend(0B00000110);//Mode Set
    2a8e:	86 e0       	ldi	r24, 0x06	; 6
    2a90:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000010);//Return Home
    2a94:	82 e0       	ldi	r24, 0x02	; 2
    2a96:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(0B00000001);//clear display
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2aa6:	e8 96       	adiw	r28, 0x38	; 56
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	0f 92       	push	r0
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	89 83       	std	Y+1, r24	; 0x01
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();	
#elif MODE==8
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN0,0);  //RS=0
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,PIN1,0);  //RW=0
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	61 e0       	ldi	r22, 0x01	; 1
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	69 81       	ldd	r22, Y+1	; 0x01
    2adc:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_VidSetPortValue>

	LCD_VidPulseEnable();
    2ae0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_VidPulseEnable>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	6d 97       	sbiw	r28, 0x1d	; 29
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	8d 8f       	std	Y+29, r24	; 0x1d
		//send LEAST SIGNIFICANT 4-bits
		DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data<<4); /* out the required command to the data bus D0 --> D7 */
		_delay_ms(1);
		LCD_VidPulseEnable();
#elif MODE==8
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1);  //RS=0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	61 e0       	ldi	r22, 0x01	; 1
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b1a:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_VidSetPortValue>

	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a0 e8       	ldi	r26, 0x80	; 128
    2b2e:	bf e3       	ldi	r27, 0x3F	; 63
    2b30:	89 8f       	std	Y+25, r24	; 0x19
    2b32:	9a 8f       	std	Y+26, r25	; 0x1a
    2b34:	ab 8f       	std	Y+27, r26	; 0x1b
    2b36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b38:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	4a ef       	ldi	r20, 0xFA	; 250
    2b46:	54 e4       	ldi	r21, 0x44	; 68
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8d 8b       	std	Y+21, r24	; 0x15
    2b52:	9e 8b       	std	Y+22, r25	; 0x16
    2b54:	af 8b       	std	Y+23, r26	; 0x17
    2b56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b58:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	2c f4       	brge	.+10     	; 0x2b7a <LCD_VidWriteData+0x8e>
		__ticks = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
    2b78:	3f c0       	rjmp	.+126    	; 0x2bf8 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    2b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b80:	98 8d       	ldd	r25, Y+24	; 0x18
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	3f ef       	ldi	r19, 0xFF	; 255
    2b86:	4f e7       	ldi	r20, 0x7F	; 127
    2b88:	57 e4       	ldi	r21, 0x47	; 71
    2b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8e:	18 16       	cp	r1, r24
    2b90:	4c f5       	brge	.+82     	; 0x2be4 <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	69 8d       	ldd	r22, Y+25	; 0x19
    2b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	51 e4       	ldi	r21, 0x41	; 65
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	8b 8b       	std	Y+19, r24	; 0x13
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <LCD_VidWriteData+0xee>
    2bbc:	88 ec       	ldi	r24, 0xC8	; 200
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9a 8b       	std	Y+18, r25	; 0x12
    2bc2:	89 8b       	std	Y+17, r24	; 0x11
    2bc4:	89 89       	ldd	r24, Y+17	; 0x11
    2bc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_VidWriteData+0xdc>
    2bcc:	9a 8b       	std	Y+18, r25	; 0x12
    2bce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	9c 8b       	std	Y+20, r25	; 0x14
    2bd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bda:	8b 89       	ldd	r24, Y+19	; 0x13
    2bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	69 f7       	brne	.-38     	; 0x2bbc <LCD_VidWriteData+0xd0>
    2be2:	14 c0       	rjmp	.+40     	; 0x2c0c <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	6d 89       	ldd	r22, Y+21	; 0x15
    2be6:	7e 89       	ldd	r23, Y+22	; 0x16
    2be8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bea:	98 8d       	ldd	r25, Y+24	; 0x18
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
    2bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfc:	98 8b       	std	Y+16, r25	; 0x10
    2bfe:	8f 87       	std	Y+15, r24	; 0x0f
    2c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c02:	98 89       	ldd	r25, Y+16	; 0x10
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <LCD_VidWriteData+0x118>
    2c08:	98 8b       	std	Y+16, r25	; 0x10
    2c0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	62 e0       	ldi	r22, 0x02	; 2
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e8       	ldi	r26, 0x80	; 128
    2c1c:	bf e3       	ldi	r27, 0x3F	; 63
    2c1e:	8b 87       	std	Y+11, r24	; 0x0b
    2c20:	9c 87       	std	Y+12, r25	; 0x0c
    2c22:	ad 87       	std	Y+13, r26	; 0x0d
    2c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4a ef       	ldi	r20, 0xFA	; 250
    2c34:	54 e4       	ldi	r21, 0x44	; 68
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	8f 83       	std	Y+7, r24	; 0x07
    2c40:	98 87       	std	Y+8, r25	; 0x08
    2c42:	a9 87       	std	Y+9, r26	; 0x09
    2c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c46:	6f 81       	ldd	r22, Y+7	; 0x07
    2c48:	78 85       	ldd	r23, Y+8	; 0x08
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e8       	ldi	r20, 0x80	; 128
    2c54:	5f e3       	ldi	r21, 0x3F	; 63
    2c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5a:	88 23       	and	r24, r24
    2c5c:	2c f4       	brge	.+10     	; 0x2c68 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
    2c66:	3f c0       	rjmp	.+126    	; 0x2ce6 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	3f ef       	ldi	r19, 0xFF	; 255
    2c74:	4f e7       	ldi	r20, 0x7F	; 127
    2c76:	57 e4       	ldi	r21, 0x47	; 71
    2c78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	4c f5       	brge	.+82     	; 0x2cd2 <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e2       	ldi	r20, 0x20	; 32
    2c8e:	51 e4       	ldi	r21, 0x41	; 65
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	bc 01       	movw	r22, r24
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	0f c0       	rjmp	.+30     	; 0x2cc8 <LCD_VidWriteData+0x1dc>
    2caa:	88 ec       	ldi	r24, 0xC8	; 200
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9c 83       	std	Y+4, r25	; 0x04
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <LCD_VidWriteData+0x1ca>
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	69 f7       	brne	.-38     	; 0x2caa <LCD_VidWriteData+0x1be>
    2cd0:	14 c0       	rjmp	.+40     	; 0x2cfa <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd4:	78 85       	ldd	r23, Y+8	; 0x08
    2cd6:	89 85       	ldd	r24, Y+9	; 0x09
    2cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <LCD_VidWriteData+0x206>
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2cfa:	6d 96       	adiw	r28, 0x1d	; 29
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <LCD_VidWriteString>:


void LCD_VidWriteString(u8 *ptr)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <LCD_VidWriteString+0x6>
    2d12:	0f 92       	push	r0
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9b 83       	std	Y+3, r25	; 0x03
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;i<100;i++)
    2d1c:	19 82       	std	Y+1, r1	; 0x01
    2d1e:	19 c0       	rjmp	.+50     	; 0x2d52 <LCD_VidWriteString+0x46>
	{
		if(ptr[i]=='\0')
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	e2 0f       	add	r30, r18
    2d2e:	f3 1f       	adc	r31, r19
    2d30:	80 81       	ld	r24, Z
    2d32:	88 23       	and	r24, r24
    2d34:	89 f0       	breq	.+34     	; 0x2d58 <LCD_VidWriteString+0x4c>
		    {
		    	break;
		    }
	LCD_VidWriteData(ptr[i]);
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	fc 01       	movw	r30, r24
    2d42:	e2 0f       	add	r30, r18
    2d44:	f3 1f       	adc	r31, r19
    2d46:	80 81       	ld	r24, Z
    2d48:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
}


void LCD_VidWriteString(u8 *ptr)
{
	for(u8 i=0;i<100;i++)
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	84 36       	cpi	r24, 0x64	; 100
    2d56:	20 f3       	brcs	.-56     	; 0x2d20 <LCD_VidWriteString+0x14>
		    }
	LCD_VidWriteData(ptr[i]);

	}

}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <LCD_VidWriteNumber>:

void LCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	2c 97       	sbiw	r28, 0x0c	; 12
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	69 87       	std	Y+9, r22	; 0x09
    2d82:	7a 87       	std	Y+10, r23	; 0x0a
    2d84:	8b 87       	std	Y+11, r24	; 0x0b
    2d86:	9c 87       	std	Y+12, r25	; 0x0c
    2d88:	1d 82       	std	Y+5, r1	; 0x05
    2d8a:	1e 82       	std	Y+6, r1	; 0x06
    2d8c:	1f 82       	std	Y+7, r1	; 0x07
    2d8e:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2d90:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d98:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	a1 05       	cpc	r26, r1
    2d9e:	b1 05       	cpc	r27, r1
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <LCD_VidWriteNumber+0x40>
    2da2:	46 c0       	rjmp	.+140    	; 0x2e30 <LCD_VidWriteNumber+0xcc>
{
	LCD_VidWriteData(48);
    2da4:	80 e3       	ldi	r24, 0x30	; 48
    2da6:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
    2daa:	42 c0       	rjmp	.+132    	; 0x2e30 <LCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2dac:	8d 81       	ldd	r24, Y+5	; 0x05
    2dae:	9e 81       	ldd	r25, Y+6	; 0x06
    2db0:	af 81       	ldd	r26, Y+7	; 0x07
    2db2:	b8 85       	ldd	r27, Y+8	; 0x08
    2db4:	2a e0       	ldi	r18, 0x0A	; 10
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__mulsi3>
    2dc4:	7b 01       	movw	r14, r22
    2dc6:	8c 01       	movw	r16, r24
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	ab 85       	ldd	r26, Y+11	; 0x0b
    2dce:	bc 85       	ldd	r27, Y+12	; 0x0c
    2dd0:	2a e0       	ldi	r18, 0x0A	; 10
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 ef 19 	call	0x33de	; 0x33de <__udivmodsi4>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8e 0d       	add	r24, r14
    2de6:	9f 1d       	adc	r25, r15
    2de8:	a0 1f       	adc	r26, r16
    2dea:	b1 1f       	adc	r27, r17
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	af 83       	std	Y+7, r26	; 0x07
    2df2:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2df4:	8d 81       	ldd	r24, Y+5	; 0x05
    2df6:	9e 81       	ldd	r25, Y+6	; 0x06
    2df8:	af 81       	ldd	r26, Y+7	; 0x07
    2dfa:	b8 85       	ldd	r27, Y+8	; 0x08
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	a1 05       	cpc	r26, r1
    2e00:	b1 05       	cpc	r27, r1
    2e02:	21 f4       	brne	.+8      	; 0x2e0c <LCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2e04:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2e0c:	89 85       	ldd	r24, Y+9	; 0x09
    2e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e10:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e12:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e14:	2a e0       	ldi	r18, 0x0A	; 10
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	50 e0       	ldi	r21, 0x00	; 0
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 ef 19 	call	0x33de	; 0x33de <__udivmodsi4>
    2e24:	da 01       	movw	r26, r20
    2e26:	c9 01       	movw	r24, r18
    2e28:	89 87       	std	Y+9, r24	; 0x09
    2e2a:	9a 87       	std	Y+10, r25	; 0x0a
    2e2c:	ab 87       	std	Y+11, r26	; 0x0b
    2e2e:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_VidWriteData(48);
}
while(LOC_u32num>0)
    2e30:	89 85       	ldd	r24, Y+9	; 0x09
    2e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e34:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e36:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	a1 05       	cpc	r26, r1
    2e3c:	b1 05       	cpc	r27, r1
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <LCD_VidWriteNumber+0xde>
    2e40:	b5 cf       	rjmp	.-150    	; 0x2dac <LCD_VidWriteNumber+0x48>
    2e42:	25 c0       	rjmp	.+74     	; 0x2e8e <LCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	af 81       	ldd	r26, Y+7	; 0x07
    2e4a:	b8 85       	ldd	r27, Y+8	; 0x08
    2e4c:	2a e0       	ldi	r18, 0x0A	; 10
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	0e 94 ef 19 	call	0x33de	; 0x33de <__udivmodsi4>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidWriteData(res+48);
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	80 5d       	subi	r24, 0xD0	; 208
    2e66:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
	revrese=revrese/10;
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	af 81       	ldd	r26, Y+7	; 0x07
    2e70:	b8 85       	ldd	r27, Y+8	; 0x08
    2e72:	2a e0       	ldi	r18, 0x0A	; 10
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 ef 19 	call	0x33de	; 0x33de <__udivmodsi4>
    2e82:	da 01       	movw	r26, r20
    2e84:	c9 01       	movw	r24, r18
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	af 83       	std	Y+7, r26	; 0x07
    2e8c:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	af 81       	ldd	r26, Y+7	; 0x07
    2e94:	b8 85       	ldd	r27, Y+8	; 0x08
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	a1 05       	cpc	r26, r1
    2e9a:	b1 05       	cpc	r27, r1
    2e9c:	99 f6       	brne	.-90     	; 0x2e44 <LCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	88 23       	and	r24, r24
    2ea2:	61 f4       	brne	.+24     	; 0x2ebc <LCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    2ea4:	19 82       	std	Y+1, r1	; 0x01
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <LCD_VidWriteNumber+0x150>
	{
LCD_VidWriteData(48);
    2ea8:	80 e3       	ldi	r24, 0x30	; 48
    2eaa:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
	LCD_VidWriteData(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	99 81       	ldd	r25, Y+1	; 0x01
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	98 17       	cp	r25, r24
    2eba:	b0 f3       	brcs	.-20     	; 0x2ea8 <LCD_VidWriteNumber+0x144>
	{
LCD_VidWriteData(48);
	}
}
}
    2ebc:	2c 96       	adiw	r28, 0x0c	; 12
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	08 95       	ret

00002ed6 <LCD_GoToXY>:

void LCD_GoToXY(u8 row,u8 col)
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <LCD_GoToXY+0x6>
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	88 23       	and	r24, r24
    2ee8:	29 f4       	brne	.+10     	; 0x2ef4 <LCD_GoToXY+0x1e>
	{
		LCD_VidWriteCommend(128+col);
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	80 58       	subi	r24, 0x80	; 128
    2eee:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
    2ef2:	07 c0       	rjmp	.+14     	; 0x2f02 <LCD_GoToXY+0x2c>
	}
	else if (row==1)
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	81 30       	cpi	r24, 0x01	; 1
    2ef8:	21 f4       	brne	.+8      	; 0x2f02 <LCD_GoToXY+0x2c>
	{
		LCD_VidWriteCommend(192+col);
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	80 54       	subi	r24, 0x40	; 64
    2efe:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
	}
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <LCD_CONSTANT>:

void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
    2f0c:	0f 93       	push	r16
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	27 97       	sbiw	r28, 0x07	; 7
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	9b 83       	std	Y+3, r25	; 0x03
    2f24:	8a 83       	std	Y+2, r24	; 0x02
    2f26:	6c 83       	std	Y+4, r22	; 0x04
    2f28:	4d 83       	std	Y+5, r20	; 0x05
    2f2a:	2e 83       	std	Y+6, r18	; 0x06
    2f2c:	0f 83       	std	Y+7, r16	; 0x07
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	80 5c       	subi	r24, 0xC0	; 192
    2f32:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
		/*for face*/
for(u8 i=0;i<8;i++)
    2f36:	19 82       	std	Y+1, r1	; 0x01
    2f38:	0e c0       	rjmp	.+28     	; 0x2f56 <LCD_CONSTANT+0x4a>
	{
	LCD_VidWriteData(Arr[i]);
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	fc 01       	movw	r30, r24
    2f46:	e2 0f       	add	r30, r18
    2f48:	f3 1f       	adc	r31, r19
    2f4a:	80 81       	ld	r24, Z
    2f4c:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
void LCD_CONSTANT(u8 *Arr,u8 Adress,u8 Row,u8 Col,u8 Data)
{
//	LCD_VidWriteCommend(1);
	LCD_VidWriteCommend(Adress+64);
		/*for face*/
for(u8 i=0;i<8;i++)
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	88 30       	cpi	r24, 0x08	; 8
    2f5a:	78 f3       	brcs	.-34     	; 0x2f3a <LCD_CONSTANT+0x2e>
	{
	LCD_VidWriteData(Arr[i]);
	}

LCD_GoToXY(Row,Col);
    2f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5e:	6e 81       	ldd	r22, Y+6	; 0x06
    2f60:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_GoToXY>
LCD_VidWriteData(Data);
    2f64:	8f 81       	ldd	r24, Y+7	; 0x07
    2f66:	0e 94 76 15 	call	0x2aec	; 0x2aec <LCD_VidWriteData>
}
    2f6a:	27 96       	adiw	r28, 0x07	; 7
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	0f 91       	pop	r16
    2f7c:	08 95       	ret

00002f7e <LCD_CLEAR>:
void LCD_CLEAR(u8 Row,u8 start,u8 end)
{
    2f7e:	0f 93       	push	r16
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	2b 97       	sbiw	r28, 0x0b	; 11
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	89 87       	std	Y+9, r24	; 0x09
    2f96:	6a 87       	std	Y+10, r22	; 0x0a
    2f98:	4b 87       	std	Y+11, r20	; 0x0b
	u8 empty[8]={0,0,0,0,0,0,0,0};
    2f9a:	88 e0       	ldi	r24, 0x08	; 8
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	31 96       	adiw	r30, 0x01	; 1
    2fa0:	df 01       	movw	r26, r30
    2fa2:	98 2f       	mov	r25, r24
    2fa4:	1d 92       	st	X+, r1
    2fa6:	9a 95       	dec	r25
    2fa8:	e9 f7       	brne	.-6      	; 0x2fa4 <LCD_CLEAR+0x26>
	while(1)
	{
		LCD_CONSTANT(empty,0,Row,start,0);
    2faa:	ce 01       	movw	r24, r28
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	60 e0       	ldi	r22, 0x00	; 0
    2fb0:	49 85       	ldd	r20, Y+9	; 0x09
    2fb2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fb4:	00 e0       	ldi	r16, 0x00	; 0
    2fb6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_CONSTANT>
		  start++;
    2fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	8a 87       	std	Y+10, r24	; 0x0a
		  if(start==end)
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fc4:	98 17       	cp	r25, r24
    2fc6:	89 f7       	brne	.-30     	; 0x2faa <LCD_CLEAR+0x2c>
			  break;
		  }
	}


}
    2fc8:	2b 96       	adiw	r28, 0x0b	; 11
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	0f 91       	pop	r16
    2fda:	08 95       	ret

00002fdc <main>:
volatile u16 ICR2_Value=0;
volatile u16 ICR3_Value=0;
u8 Flag=0;
u8 OV=0;
int main()
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	a0 97       	sbiw	r28, 0x20	; 32
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
	/*1-Variable definition*/
	u16 Ton=0;
    2ff0:	18 a2       	std	Y+32, r1	; 0x20
    2ff2:	1f 8e       	std	Y+31, r1	; 0x1f
	u16 Toff=0;
    2ff4:	1e 8e       	std	Y+30, r1	; 0x1e
    2ff6:	1d 8e       	std	Y+29, r1	; 0x1d
	//set pin direction
	DIO_VidSetPinDirection(DIO_PORTD,PIN7,OUTPUT);//PIN FOR PWM IN TIMER 1
    2ff8:	83 e0       	ldi	r24, 0x03	; 3
    2ffa:	67 e0       	ldi	r22, 0x07	; 7
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_VidSetPinDirection>
	//set direction of PIN2 IN PORTD as input
	DIO_VidSetPinDirection(DIO_PORTD,PIN6,INPUT);
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	66 e0       	ldi	r22, 0x06	; 6
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <DIO_VidSetPinDirection>
	//activity pull up resistor
	DIO_VidSetPinValue(DIO_PORTD,PIN6,HIGH);
    300c:	83 e0       	ldi	r24, 0x03	; 3
    300e:	66 e0       	ldi	r22, 0x06	; 6
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <DIO_VidSetPinValue>
	/*2-lcd initialization*/
	LCD_VidInit();
    3016:	0e 94 64 13 	call	0x26c8	; 0x26c8 <LCD_VidInit>
	LCD_VidWriteString("Welcome elsayed");
    301a:	80 e6       	ldi	r24, 0x60	; 96
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <LCD_VidWriteString>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	aa e7       	ldi	r26, 0x7A	; 122
    3028:	b4 e4       	ldi	r27, 0x44	; 68
    302a:	89 8f       	std	Y+25, r24	; 0x19
    302c:	9a 8f       	std	Y+26, r25	; 0x1a
    302e:	ab 8f       	std	Y+27, r26	; 0x1b
    3030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	69 8d       	ldd	r22, Y+25	; 0x19
    3034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	4a ef       	ldi	r20, 0xFA	; 250
    3040:	54 e4       	ldi	r21, 0x44	; 68
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	8d 8b       	std	Y+21, r24	; 0x15
    304c:	9e 8b       	std	Y+22, r25	; 0x16
    304e:	af 8b       	std	Y+23, r26	; 0x17
    3050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3052:	6d 89       	ldd	r22, Y+21	; 0x15
    3054:	7e 89       	ldd	r23, Y+22	; 0x16
    3056:	8f 89       	ldd	r24, Y+23	; 0x17
    3058:	98 8d       	ldd	r25, Y+24	; 0x18
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e8       	ldi	r20, 0x80	; 128
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3066:	88 23       	and	r24, r24
    3068:	2c f4       	brge	.+10     	; 0x3074 <main+0x98>
		__ticks = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
    3072:	3f c0       	rjmp	.+126    	; 0x30f2 <main+0x116>
	else if (__tmp > 65535)
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	57 e4       	ldi	r21, 0x47	; 71
    3084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3088:	18 16       	cp	r1, r24
    308a:	4c f5       	brge	.+82     	; 0x30de <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308c:	69 8d       	ldd	r22, Y+25	; 0x19
    308e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e2       	ldi	r20, 0x20	; 32
    309a:	51 e4       	ldi	r21, 0x41	; 65
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <main+0xf8>
    30b6:	88 ec       	ldi	r24, 0xC8	; 200
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9a 8b       	std	Y+18, r25	; 0x12
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	89 89       	ldd	r24, Y+17	; 0x11
    30c0:	9a 89       	ldd	r25, Y+18	; 0x12
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <main+0xe6>
    30c6:	9a 8b       	std	Y+18, r25	; 0x12
    30c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ca:	8b 89       	ldd	r24, Y+19	; 0x13
    30cc:	9c 89       	ldd	r25, Y+20	; 0x14
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	9c 8b       	std	Y+20, r25	; 0x14
    30d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d4:	8b 89       	ldd	r24, Y+19	; 0x13
    30d6:	9c 89       	ldd	r25, Y+20	; 0x14
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	69 f7       	brne	.-38     	; 0x30b6 <main+0xda>
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	6d 89       	ldd	r22, Y+21	; 0x15
    30e0:	7e 89       	ldd	r23, Y+22	; 0x16
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9c 8b       	std	Y+20, r25	; 0x14
    30f0:	8b 8b       	std	Y+19, r24	; 0x13
    30f2:	8b 89       	ldd	r24, Y+19	; 0x13
    30f4:	9c 89       	ldd	r25, Y+20	; 0x14
    30f6:	98 8b       	std	Y+16, r25	; 0x10
    30f8:	8f 87       	std	Y+15, r24	; 0x0f
    30fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fc:	98 89       	ldd	r25, Y+16	; 0x10
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <main+0x122>
    3102:	98 8b       	std	Y+16, r25	; 0x10
    3104:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	/*3-global interrupt enable*/
	GIE_Vid_Enable();
    3106:	0e 94 b7 0c 	call	0x196e	; 0x196e <GIE_Vid_Enable>
	/*7-set call back function*/
	TIMER1_ICU_SetCallBack(ICU_func);
    310a:	8e e5       	ldi	r24, 0x5E	; 94
    310c:	99 e1       	ldi	r25, 0x19	; 25
    310e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <TIMER1_ICU_SetCallBack>
	TIMER1_OV_SetCallBack(timer1_OV);
    3112:	84 ec       	ldi	r24, 0xC4	; 196
    3114:	99 e1       	ldi	r25, 0x19	; 25
    3116:	0e 94 9a 08 	call	0x1134	; 0x1134 <TIMER1_OV_SetCallBack>
	/*4-timer two initialization*/
	TIMER2_INIT();
    311a:	0e 94 31 0b 	call	0x1662	; 0x1662 <TIMER2_INIT>
	/*5-timer one initialization*/
	TIMER1_INIT();
    311e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <TIMER1_INIT>

	/*ICU edge select*/
	TIMER1_ICU_EdgeSelect(Rising_edge);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	0e 94 8d 0c 	call	0x191a	; 0x191a <TIMER1_ICU_EdgeSelect>

	/*8-ICU interrupt enable*/
	TIMER1_Input_Capture_Enterrupt_Enable();
    3128:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <TIMER1_Input_Capture_Enterrupt_Enable>
	/*9-super loop*/
	while(1)
	{
		if(Flag==3)
    312c:	80 91 9d 00 	lds	r24, 0x009D
    3130:	83 30       	cpi	r24, 0x03	; 3
    3132:	e1 f7       	brne	.-8      	; 0x312c <main+0x150>
		{
			/*6-set duty cycle of timer two*/
			Set_Duty_Cycle_TIMER_2(90);
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	70 e0       	ldi	r23, 0x00	; 0
    3138:	84 eb       	ldi	r24, 0xB4	; 180
    313a:	92 e4       	ldi	r25, 0x42	; 66
    313c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <Set_Duty_Cycle_TIMER_2>
			/*to clear lcd*/
			LCD_VidWriteCommend(1);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_VidWriteCommend>
			Ton =(u8)ICR2_Value-(u8)ICR1_Value;
    3146:	80 91 99 00 	lds	r24, 0x0099
    314a:	90 91 9a 00 	lds	r25, 0x009A
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	80 91 97 00 	lds	r24, 0x0097
    3156:	90 91 98 00 	lds	r25, 0x0098
    315a:	88 2f       	mov	r24, r24
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	a9 01       	movw	r20, r18
    3160:	48 1b       	sub	r20, r24
    3162:	59 0b       	sbc	r21, r25
    3164:	ca 01       	movw	r24, r20
    3166:	98 a3       	std	Y+32, r25	; 0x20
    3168:	8f 8f       	std	Y+31, r24	; 0x1f
			Toff=(u8)ICR3_Value-(u8)ICR2_Value;
    316a:	80 91 9b 00 	lds	r24, 0x009B
    316e:	90 91 9c 00 	lds	r25, 0x009C
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	80 91 99 00 	lds	r24, 0x0099
    317a:	90 91 9a 00 	lds	r25, 0x009A
    317e:	88 2f       	mov	r24, r24
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a9 01       	movw	r20, r18
    3184:	48 1b       	sub	r20, r24
    3186:	59 0b       	sbc	r21, r25
    3188:	ca 01       	movw	r24, r20
    318a:	9e 8f       	std	Y+30, r25	; 0x1e
    318c:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_VidWriteString("Ton=");
    318e:	80 e7       	ldi	r24, 0x70	; 112
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <LCD_VidWriteString>
			LCD_VidWriteNumber((u8)Ton);
    3196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_VidWriteNumber>
			LCD_GoToXY(1,0);
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_GoToXY>
			LCD_VidWriteString("Toff=");
    31b0:	85 e7       	ldi	r24, 0x75	; 117
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <LCD_VidWriteString>
			LCD_VidWriteNumber((u8)Toff);
    31b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ba:	88 2f       	mov	r24, r24
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a0 e0       	ldi	r26, 0x00	; 0
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_VidWriteNumber>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a6 e9       	ldi	r26, 0x96	; 150
    31d0:	b3 e4       	ldi	r27, 0x43	; 67
    31d2:	8b 87       	std	Y+11, r24	; 0x0b
    31d4:	9c 87       	std	Y+12, r25	; 0x0c
    31d6:	ad 87       	std	Y+13, r26	; 0x0d
    31d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6b 85       	ldd	r22, Y+11	; 0x0b
    31dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31de:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a ef       	ldi	r20, 0xFA	; 250
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8f 83       	std	Y+7, r24	; 0x07
    31f4:	98 87       	std	Y+8, r25	; 0x08
    31f6:	a9 87       	std	Y+9, r26	; 0x09
    31f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <main+0x240>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	3f c0       	rjmp	.+126    	; 0x329a <main+0x2be>
	else if (__tmp > 65535)
    321c:	6f 81       	ldd	r22, Y+7	; 0x07
    321e:	78 85       	ldd	r23, Y+8	; 0x08
    3220:	89 85       	ldd	r24, Y+9	; 0x09
    3222:	9a 85       	ldd	r25, Y+10	; 0x0a
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <main+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6b 85       	ldd	r22, Y+11	; 0x0b
    3236:	7c 85       	ldd	r23, Y+12	; 0x0c
    3238:	8d 85       	ldd	r24, Y+13	; 0x0d
    323a:	9e 85       	ldd	r25, Y+14	; 0x0e
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	0f c0       	rjmp	.+30     	; 0x327c <main+0x2a0>
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <main+0x28e>
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8d 81       	ldd	r24, Y+5	; 0x05
    327e:	9e 81       	ldd	r25, Y+6	; 0x06
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <main+0x282>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <main+0x2ca>
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			Flag=0;
    32ae:	10 92 9d 00 	sts	0x009D, r1
			Ton=0;
    32b2:	18 a2       	std	Y+32, r1	; 0x20
    32b4:	1f 8e       	std	Y+31, r1	; 0x1f
			Toff=0;
    32b6:	1e 8e       	std	Y+30, r1	; 0x1e
    32b8:	1d 8e       	std	Y+29, r1	; 0x1d
    32ba:	38 cf       	rjmp	.-400    	; 0x312c <main+0x150>

000032bc <ICU_func>:
		}
	}
	return 0;
}
void ICU_func(void)
{
    32bc:	0f 93       	push	r16
    32be:	1f 93       	push	r17
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    32c8:	80 91 9d 00 	lds	r24, 0x009D
    32cc:	88 23       	and	r24, r24
    32ce:	79 f4       	brne	.+30     	; 0x32ee <ICU_func+0x32>
	{
	ICR1_Value= Get_Value_From_ICREG();
    32d0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Get_Value_From_ICREG>
    32d4:	90 93 98 00 	sts	0x0098, r25
    32d8:	80 93 97 00 	sts	0x0097, r24
	OV=0;
    32dc:	10 92 9e 00 	sts	0x009E, r1
	Flag=1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	80 93 9d 00 	sts	0x009D, r24
	TIMER1_ICU_EdgeSelect(Falling_edge);
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	0e 94 8d 0c 	call	0x191a	; 0x191a <TIMER1_ICU_EdgeSelect>
    32ec:	48 c0       	rjmp	.+144    	; 0x337e <ICU_func+0xc2>
	}
	else if(Flag==1)
    32ee:	80 91 9d 00 	lds	r24, 0x009D
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	11 f5       	brne	.+68     	; 0x333a <ICU_func+0x7e>
	{
	ICR2_Value= Get_Value_From_ICREG()+OV*65535;
    32f6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Get_Value_From_ICREG>
    32fa:	8c 01       	movw	r16, r24
    32fc:	80 91 9e 00 	lds	r24, 0x009E
    3300:	88 2f       	mov	r24, r24
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	a0 e0       	ldi	r26, 0x00	; 0
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	2f ef       	ldi	r18, 0xFF	; 255
    330a:	3f ef       	ldi	r19, 0xFF	; 255
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	bc 01       	movw	r22, r24
    3312:	cd 01       	movw	r24, r26
    3314:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__mulsi3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	80 0f       	add	r24, r16
    331e:	91 1f       	adc	r25, r17
    3320:	90 93 9a 00 	sts	0x009A, r25
    3324:	80 93 99 00 	sts	0x0099, r24
	OV=0;
    3328:	10 92 9e 00 	sts	0x009E, r1
	Flag=2;
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	80 93 9d 00 	sts	0x009D, r24
	TIMER1_ICU_EdgeSelect(Rising_edge);
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	0e 94 8d 0c 	call	0x191a	; 0x191a <TIMER1_ICU_EdgeSelect>
    3338:	22 c0       	rjmp	.+68     	; 0x337e <ICU_func+0xc2>
	}
	else if(Flag==2)
    333a:	80 91 9d 00 	lds	r24, 0x009D
    333e:	82 30       	cpi	r24, 0x02	; 2
    3340:	f1 f4       	brne	.+60     	; 0x337e <ICU_func+0xc2>
	{
	ICR3_Value= Get_Value_From_ICREG()+OV*65535;
    3342:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Get_Value_From_ICREG>
    3346:	8c 01       	movw	r16, r24
    3348:	80 91 9e 00 	lds	r24, 0x009E
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	2f ef       	ldi	r18, 0xFF	; 255
    3356:	3f ef       	ldi	r19, 0xFF	; 255
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__mulsi3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	80 0f       	add	r24, r16
    336a:	91 1f       	adc	r25, r17
    336c:	90 93 9c 00 	sts	0x009C, r25
    3370:	80 93 9b 00 	sts	0x009B, r24
	OV=0;
    3374:	10 92 9e 00 	sts	0x009E, r1
	Flag=3;
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	80 93 9d 00 	sts	0x009D, r24
	}



}
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	08 95       	ret

00003388 <timer1_OV>:
void timer1_OV(void)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
	OV++;
    3390:	80 91 9e 00 	lds	r24, 0x009E
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	80 93 9e 00 	sts	0x009E, r24
}
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	08 95       	ret

000033a0 <__mulsi3>:
    33a0:	62 9f       	mul	r22, r18
    33a2:	d0 01       	movw	r26, r0
    33a4:	73 9f       	mul	r23, r19
    33a6:	f0 01       	movw	r30, r0
    33a8:	82 9f       	mul	r24, r18
    33aa:	e0 0d       	add	r30, r0
    33ac:	f1 1d       	adc	r31, r1
    33ae:	64 9f       	mul	r22, r20
    33b0:	e0 0d       	add	r30, r0
    33b2:	f1 1d       	adc	r31, r1
    33b4:	92 9f       	mul	r25, r18
    33b6:	f0 0d       	add	r31, r0
    33b8:	83 9f       	mul	r24, r19
    33ba:	f0 0d       	add	r31, r0
    33bc:	74 9f       	mul	r23, r20
    33be:	f0 0d       	add	r31, r0
    33c0:	65 9f       	mul	r22, r21
    33c2:	f0 0d       	add	r31, r0
    33c4:	99 27       	eor	r25, r25
    33c6:	72 9f       	mul	r23, r18
    33c8:	b0 0d       	add	r27, r0
    33ca:	e1 1d       	adc	r30, r1
    33cc:	f9 1f       	adc	r31, r25
    33ce:	63 9f       	mul	r22, r19
    33d0:	b0 0d       	add	r27, r0
    33d2:	e1 1d       	adc	r30, r1
    33d4:	f9 1f       	adc	r31, r25
    33d6:	bd 01       	movw	r22, r26
    33d8:	cf 01       	movw	r24, r30
    33da:	11 24       	eor	r1, r1
    33dc:	08 95       	ret

000033de <__udivmodsi4>:
    33de:	a1 e2       	ldi	r26, 0x21	; 33
    33e0:	1a 2e       	mov	r1, r26
    33e2:	aa 1b       	sub	r26, r26
    33e4:	bb 1b       	sub	r27, r27
    33e6:	fd 01       	movw	r30, r26
    33e8:	0d c0       	rjmp	.+26     	; 0x3404 <__udivmodsi4_ep>

000033ea <__udivmodsi4_loop>:
    33ea:	aa 1f       	adc	r26, r26
    33ec:	bb 1f       	adc	r27, r27
    33ee:	ee 1f       	adc	r30, r30
    33f0:	ff 1f       	adc	r31, r31
    33f2:	a2 17       	cp	r26, r18
    33f4:	b3 07       	cpc	r27, r19
    33f6:	e4 07       	cpc	r30, r20
    33f8:	f5 07       	cpc	r31, r21
    33fa:	20 f0       	brcs	.+8      	; 0x3404 <__udivmodsi4_ep>
    33fc:	a2 1b       	sub	r26, r18
    33fe:	b3 0b       	sbc	r27, r19
    3400:	e4 0b       	sbc	r30, r20
    3402:	f5 0b       	sbc	r31, r21

00003404 <__udivmodsi4_ep>:
    3404:	66 1f       	adc	r22, r22
    3406:	77 1f       	adc	r23, r23
    3408:	88 1f       	adc	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	1a 94       	dec	r1
    340e:	69 f7       	brne	.-38     	; 0x33ea <__udivmodsi4_loop>
    3410:	60 95       	com	r22
    3412:	70 95       	com	r23
    3414:	80 95       	com	r24
    3416:	90 95       	com	r25
    3418:	9b 01       	movw	r18, r22
    341a:	ac 01       	movw	r20, r24
    341c:	bd 01       	movw	r22, r26
    341e:	cf 01       	movw	r24, r30
    3420:	08 95       	ret

00003422 <__prologue_saves__>:
    3422:	2f 92       	push	r2
    3424:	3f 92       	push	r3
    3426:	4f 92       	push	r4
    3428:	5f 92       	push	r5
    342a:	6f 92       	push	r6
    342c:	7f 92       	push	r7
    342e:	8f 92       	push	r8
    3430:	9f 92       	push	r9
    3432:	af 92       	push	r10
    3434:	bf 92       	push	r11
    3436:	cf 92       	push	r12
    3438:	df 92       	push	r13
    343a:	ef 92       	push	r14
    343c:	ff 92       	push	r15
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	ca 1b       	sub	r28, r26
    344c:	db 0b       	sbc	r29, r27
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	de bf       	out	0x3e, r29	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	cd bf       	out	0x3d, r28	; 61
    3458:	09 94       	ijmp

0000345a <__epilogue_restores__>:
    345a:	2a 88       	ldd	r2, Y+18	; 0x12
    345c:	39 88       	ldd	r3, Y+17	; 0x11
    345e:	48 88       	ldd	r4, Y+16	; 0x10
    3460:	5f 84       	ldd	r5, Y+15	; 0x0f
    3462:	6e 84       	ldd	r6, Y+14	; 0x0e
    3464:	7d 84       	ldd	r7, Y+13	; 0x0d
    3466:	8c 84       	ldd	r8, Y+12	; 0x0c
    3468:	9b 84       	ldd	r9, Y+11	; 0x0b
    346a:	aa 84       	ldd	r10, Y+10	; 0x0a
    346c:	b9 84       	ldd	r11, Y+9	; 0x09
    346e:	c8 84       	ldd	r12, Y+8	; 0x08
    3470:	df 80       	ldd	r13, Y+7	; 0x07
    3472:	ee 80       	ldd	r14, Y+6	; 0x06
    3474:	fd 80       	ldd	r15, Y+5	; 0x05
    3476:	0c 81       	ldd	r16, Y+4	; 0x04
    3478:	1b 81       	ldd	r17, Y+3	; 0x03
    347a:	aa 81       	ldd	r26, Y+2	; 0x02
    347c:	b9 81       	ldd	r27, Y+1	; 0x01
    347e:	ce 0f       	add	r28, r30
    3480:	d1 1d       	adc	r29, r1
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	ed 01       	movw	r28, r26
    348e:	08 95       	ret

00003490 <_exit>:
    3490:	f8 94       	cli

00003492 <__stop_program>:
    3492:	ff cf       	rjmp	.-2      	; 0x3492 <__stop_program>
