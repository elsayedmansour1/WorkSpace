
NEW_COT_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000035f0  00003684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800194  00800194  000037b8  2**0
                  ALLOC
  3 .stab         00003240  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000150f  00000000  00000000  000069f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000080a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_1>
       8:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_2>
       c:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__vector_3>
      10:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_4>
      14:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_5>
      18:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_6>
      1c:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_7>
      20:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_8>
      24:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_9>
      28:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_10>
      2c:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 19 	call	0x33ba	; 0x33ba <main>
      8a:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 57       	subi	r30, 0x7D	; 125
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_OV_SetCallBack>:
static void (*GPFunc_T1_ICU)(void)=NULL;
/******************************************************************/
/*Make a Set Call Back Function for every Interrupt peripherals in timer*/
			/*Set Call Back Functions for timer zero*/
void TIMER0_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER0_OV_SetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 95 01 	sts	0x0195, r25
     e44:	80 93 94 01 	sts	0x0194, r24
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TIMER0_CM_SetCallBack>:
void TIMER0_CM_SetCallBack(void (*LocalPFunc)(void))
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <TIMER0_CM_SetCallBack+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T0=LocalPFunc;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	90 93 95 01 	sts	0x0195, r25
     e68:	80 93 94 01 	sts	0x0194, r24
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <TIMER1_OV_SetCallBack>:

////////////////////////////////////////////////////
		/*Set Call Back Functions for timer one*/
void TIMER1_OV_SetCallBack(void (*LocalPFunc)(void))
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <TIMER1_OV_SetCallBack+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_OV=LocalPFunc;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	90 93 9b 01 	sts	0x019B, r25
     e8c:	80 93 9a 01 	sts	0x019A, r24
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <TIMER1_CM_A_SetCallBack>:
void TIMER1_CM_A_SetCallBack(void (*LocalPFunc)(void))
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <TIMER1_CM_A_SetCallBack+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_CA=LocalPFunc;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	90 93 9d 01 	sts	0x019D, r25
     eb0:	80 93 9c 01 	sts	0x019C, r24
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMER1_CM_B_SetCallBack>:
void TIMER1_CM_B_SetCallBack(void (*LocalPFunc)(void))
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <TIMER1_CM_B_SetCallBack+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_CB=LocalPFunc;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 9f 01 	sts	0x019F, r25
     ed4:	80 93 9e 01 	sts	0x019E, r24
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TIMER1_ICU_SetCallBack>:
void TIMER1_ICU_SetCallBack(void (*LocalPFunc)(void))
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <TIMER1_ICU_SetCallBack+0x6>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T1_ICU=LocalPFunc;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	90 93 a1 01 	sts	0x01A1, r25
     ef8:	80 93 a0 01 	sts	0x01A0, r24
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TIMER2_OV_SetCallBack>:
////////////////////////////////////////////////////
		/*Set Call Back Functions for timer one*/
void TIMER2_OV_SetCallBack(void (*LocalPFunc)(void))
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <TIMER2_OV_SetCallBack+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	90 93 97 01 	sts	0x0197, r25
     f1c:	80 93 96 01 	sts	0x0196, r24
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TIMER2_CM_SetCallBack>:
void TIMER2_CM_SetCallBack(void (*LocalPFunc)(void))
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <TIMER2_CM_SetCallBack+0x6>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
	GPFunc_T2=LocalPFunc;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	90 93 97 01 	sts	0x0197, r25
     f40:	80 93 96 01 	sts	0x0196, r24
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__vector_11>:
////////////////////////////////////////////////////
/*Make a ISR Function for every Interrupt peripherals in timer*/
			/*ISR Functions for timer Zero*/
ISR_TMR0_OVF()
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     f78:	80 91 94 01 	lds	r24, 0x0194
     f7c:	90 91 95 01 	lds	r25, 0x0195
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_11+0x40>
	{
		GPFunc_T0();
     f84:	e0 91 94 01 	lds	r30, 0x0194
     f88:	f0 91 95 01 	lds	r31, 0x0195
     f8c:	09 95       	icall
	}
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_10>:
ISR_TMR0_Comp()
{
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T0!=NULL)
     fde:	80 91 94 01 	lds	r24, 0x0194
     fe2:	90 91 95 01 	lds	r25, 0x0195
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	29 f0       	breq	.+10     	; 0xff4 <__vector_10+0x40>
	{
		GPFunc_T0();
     fea:	e0 91 94 01 	lds	r30, 0x0194
     fee:	f0 91 95 01 	lds	r31, 0x0195
     ff2:	09 95       	icall
	}
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	bf 91       	pop	r27
     ffe:	af 91       	pop	r26
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	7f 91       	pop	r23
    1006:	6f 91       	pop	r22
    1008:	5f 91       	pop	r21
    100a:	4f 91       	pop	r20
    100c:	3f 91       	pop	r19
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_9>:
////////////////////////////////////////////////////
			/*ISR Functions for timer One*/
ISR_TMR1_OVF()
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1_OV!=NULL)
    1044:	80 91 9a 01 	lds	r24, 0x019A
    1048:	90 91 9b 01 	lds	r25, 0x019B
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	29 f0       	breq	.+10     	; 0x105a <__vector_9+0x40>
		{
		GPFunc_T1_OV();
    1050:	e0 91 9a 01 	lds	r30, 0x019A
    1054:	f0 91 9b 01 	lds	r31, 0x019B
    1058:	09 95       	icall
		}
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_7>:
ISR_TMR1_CompA()
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    10aa:	80 91 98 01 	lds	r24, 0x0198
    10ae:	90 91 99 01 	lds	r25, 0x0199
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__vector_7+0x40>
		{
		GPFunc_T1_CA();
    10b6:	e0 91 9c 01 	lds	r30, 0x019C
    10ba:	f0 91 9d 01 	lds	r31, 0x019D
    10be:	09 95       	icall
		}
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_8>:
ISR_TMR1_CompB()
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1!=NULL)
    1110:	80 91 98 01 	lds	r24, 0x0198
    1114:	90 91 99 01 	lds	r25, 0x0199
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	29 f0       	breq	.+10     	; 0x1126 <__vector_8+0x40>
		{
		GPFunc_T1_CB();
    111c:	e0 91 9e 01 	lds	r30, 0x019E
    1120:	f0 91 9f 01 	lds	r31, 0x019F
    1124:	09 95       	icall
		}
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_6>:
/*ISR FOR ICU */
ISR_TMR1_Capt()
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T1_ICU!=NULL)
    1176:	80 91 a0 01 	lds	r24, 0x01A0
    117a:	90 91 a1 01 	lds	r25, 0x01A1
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <__vector_6+0x40>
		{
		GPFunc_T1_ICU();
    1182:	e0 91 a0 01 	lds	r30, 0x01A0
    1186:	f0 91 a1 01 	lds	r31, 0x01A1
    118a:	09 95       	icall
		}
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_5>:
////////////////////////////////////////////////////
			/*ISR Functions for timer Two*/
ISR_TMR2_OVF()
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	2f 93       	push	r18
    11be:	3f 93       	push	r19
    11c0:	4f 93       	push	r20
    11c2:	5f 93       	push	r21
    11c4:	6f 93       	push	r22
    11c6:	7f 93       	push	r23
    11c8:	8f 93       	push	r24
    11ca:	9f 93       	push	r25
    11cc:	af 93       	push	r26
    11ce:	bf 93       	push	r27
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    11dc:	80 91 96 01 	lds	r24, 0x0196
    11e0:	90 91 97 01 	lds	r25, 0x0197
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	29 f0       	breq	.+10     	; 0x11f2 <__vector_5+0x40>
	{
		GPFunc_T2();
    11e8:	e0 91 96 01 	lds	r30, 0x0196
    11ec:	f0 91 97 01 	lds	r31, 0x0197
    11f0:	09 95       	icall
	}
}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <__vector_4>:
ISR_TMR2_Comp()
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc_T2!=NULL)
    1242:	80 91 96 01 	lds	r24, 0x0196
    1246:	90 91 97 01 	lds	r25, 0x0197
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	29 f0       	breq	.+10     	; 0x1258 <__vector_4+0x40>
	{
		GPFunc_T2();
    124e:	e0 91 96 01 	lds	r30, 0x0196
    1252:	f0 91 97 01 	lds	r31, 0x0197
    1256:	09 95       	icall
	}
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	0f 90       	pop	r0
    127a:	1f 90       	pop	r1
    127c:	18 95       	reti

0000127e <TIMER0_INIT>:

/*******************************************************************************************************/
/*******************************************************************************************************/

void TIMER0_INIT(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_0;
	prescaler_clk_8_0;
	Non_PWM_Normal_OC0_disconnected_0;
	Compare_Match_Interrupt_Enable_0;
#elif Timer0_Mode==Fast_PWM_Timer0_Mode
	Fast_PWM_0;
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 60       	ori	r24, 0x08	; 8
    1292:	8c 93       	st	X, r24
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 64       	ori	r24, 0x40	; 64
    12a0:	8c 93       	st	X, r24
	NonInverted_Mode_0;
    12a2:	a3 e5       	ldi	r26, 0x53	; 83
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 62       	ori	r24, 0x20	; 32
    12ae:	8c 93       	st	X, r24
    12b0:	a3 e5       	ldi	r26, 0x53	; 83
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e3 e5       	ldi	r30, 0x53	; 83
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 7e       	andi	r24, 0xEF	; 239
    12bc:	8c 93       	st	X, r24
	prescaler_clk_256_0;
    12be:	a3 e5       	ldi	r26, 0x53	; 83
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e3 e5       	ldi	r30, 0x53	; 83
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	84 60       	ori	r24, 0x04	; 4
    12ca:	8c 93       	st	X, r24
    12cc:	a3 e5       	ldi	r26, 0x53	; 83
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e3 e5       	ldi	r30, 0x53	; 83
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	8c 93       	st	X, r24
    12da:	a3 e5       	ldi	r26, 0x53	; 83
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e5       	ldi	r30, 0x53	; 83
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"
#endif

}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TIMER1_INIT>:
/*******************************************************************************************************/
void TIMER1_INIT(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
#elif Timer1_Mode==PWM_Phase_Correct_1_Timer_1
#elif Timer1_Mode==CTC_2_Timer_1

#elif Timer1_Mode==Reserved_Timer_1
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	ICR1=625;		// For 50 Hz for servo motor
    12f6:	e6 e4       	ldi	r30, 0x46	; 70
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	81 e7       	ldi	r24, 0x71	; 113
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
	prescaler_clk_256_1;
    1302:	ae e4       	ldi	r26, 0x4E	; 78
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	84 60       	ori	r24, 0x04	; 4
    130e:	8c 93       	st	X, r24
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	8c 93       	st	X, r24
    131e:	ae e4       	ldi	r26, 0x4E	; 78
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ee e4       	ldi	r30, 0x4E	; 78
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	8e 7f       	andi	r24, 0xFE	; 254
    132a:	8c 93       	st	X, r24
	Fast_PWM_ICR1;
    132c:	af e4       	ldi	r26, 0x4F	; 79
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ef e4       	ldi	r30, 0x4F	; 79
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8e 7f       	andi	r24, 0xFE	; 254
    1338:	8c 93       	st	X, r24
    133a:	af e4       	ldi	r26, 0x4F	; 79
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ef e4       	ldi	r30, 0x4F	; 79
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	8c 93       	st	X, r24
    1348:	ae e4       	ldi	r26, 0x4E	; 78
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ee e4       	ldi	r30, 0x4E	; 78
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 60       	ori	r24, 0x08	; 8
    1354:	8c 93       	st	X, r24
    1356:	ae e4       	ldi	r26, 0x4E	; 78
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ee e4       	ldi	r30, 0x4E	; 78
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	80 61       	ori	r24, 0x10	; 16
    1362:	8c 93       	st	X, r24
	PWM_Non_Inverted_1;
    1364:	af e4       	ldi	r26, 0x4F	; 79
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ef e4       	ldi	r30, 0x4F	; 79
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8f 7b       	andi	r24, 0xBF	; 191
    1370:	8c 93       	st	X, r24
    1372:	af e4       	ldi	r26, 0x4F	; 79
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 68       	ori	r24, 0x80	; 128
    137e:	8c 93       	st	X, r24
    1380:	af e4       	ldi	r26, 0x4F	; 79
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 7e       	andi	r24, 0xEF	; 239
    138c:	8c 93       	st	X, r24
    138e:	af e4       	ldi	r26, 0x4F	; 79
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ef e4       	ldi	r30, 0x4F	; 79
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 62       	ori	r24, 0x20	; 32
    139a:	8c 93       	st	X, r24
#elif Timer1_Mode==Fast_PWM_OCR1A_Timer_1
#else
#error "WRONG CHOOSE"
#endif

}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <TIMER2_INIT>:
/*******************************************************************************************************/
void TIMER2_INIT(void)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	CTC_Mode_2;
	prescaler_clk_8_2;
	Non_PWM_Normal_OC0_disconnected_2;
	Compare_Match_Interrupt_Enable_2;
#elif Timer2_Mode==Fast_PWM_Timer2_Mode
	Fast_PWM_2;
    13aa:	a5 e4       	ldi	r26, 0x45	; 69
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e4       	ldi	r30, 0x45	; 69
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	88 60       	ori	r24, 0x08	; 8
    13b6:	8c 93       	st	X, r24
    13b8:	a5 e4       	ldi	r26, 0x45	; 69
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e4       	ldi	r30, 0x45	; 69
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	8c 93       	st	X, r24
	NonInverted_Mode_2;
    13c6:	a5 e4       	ldi	r26, 0x45	; 69
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e4       	ldi	r30, 0x45	; 69
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	8c 93       	st	X, r24
    13d4:	a5 e4       	ldi	r26, 0x45	; 69
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e5 e4       	ldi	r30, 0x45	; 69
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7e       	andi	r24, 0xEF	; 239
    13e0:	8c 93       	st	X, r24
	prescaler_clk_256_2;
    13e2:	a5 e4       	ldi	r26, 0x45	; 69
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e4       	ldi	r30, 0x45	; 69
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	8c 93       	st	X, r24
    13f0:	a5 e4       	ldi	r26, 0x45	; 69
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e4       	ldi	r30, 0x45	; 69
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	8c 93       	st	X, r24
    13fe:	a5 e4       	ldi	r26, 0x45	; 69
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e4       	ldi	r30, 0x45	; 69
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	8c 93       	st	X, r24

#else
#error "WRONG CHOOSE"

#endif
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <TIMER1_Input_Capture_Interrupt_Enable>:
/********************************************************************************************************/
void TIMER1_Input_Capture_Interrupt_Enable(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	8c 93       	st	X, r24
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <Set_Duty_Cycle_TIMER_0>:
/********************************************************************************************************/
void Set_Duty_Cycle_TIMER_0(f32 percentage_Value)
{
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <Set_Duty_Cycle_TIMER_0+0xa>
    1438:	00 d0       	rcall	.+0      	; 0x143a <Set_Duty_Cycle_TIMER_0+0xc>
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	69 83       	std	Y+1, r22	; 0x01
    1440:	7a 83       	std	Y+2, r23	; 0x02
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    1446:	69 81       	ldd	r22, Y+1	; 0x01
    1448:	7a 81       	ldd	r23, Y+2	; 0x02
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	48 ec       	ldi	r20, 0xC8	; 200
    1454:	52 e4       	ldi	r21, 0x42	; 66
    1456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	ab 83       	std	Y+3, r26	; 0x03
    1464:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=(percentage_Value*255)-1;
    1466:	0c e5       	ldi	r16, 0x5C	; 92
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	69 81       	ldd	r22, Y+1	; 0x01
    146c:	7a 81       	ldd	r23, Y+2	; 0x02
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	53 e4       	ldi	r21, 0x43	; 67
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	80 83       	st	Z, r24

}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <Set_Duty_Cycle_TIMER_1_A>:
void Set_Duty_Cycle_TIMER_1_A(f32 percentage_Value)
{
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <Set_Duty_Cycle_TIMER_1_A+0xa>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <Set_Duty_Cycle_TIMER_1_A+0xc>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	69 83       	std	Y+1, r22	; 0x01
    14ca:	7a 83       	std	Y+2, r23	; 0x02
    14cc:	8b 83       	std	Y+3, r24	; 0x03
    14ce:	9c 83       	std	Y+4, r25	; 0x04
	OCR1A=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1A=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    14d0:	69 81       	ldd	r22, Y+1	; 0x01
    14d2:	7a 81       	ldd	r23, Y+2	; 0x02
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	48 ec       	ldi	r20, 0xC8	; 200
    14de:	52 e4       	ldi	r21, 0x42	; 66
    14e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	ab 83       	std	Y+3, r26	; 0x03
    14ee:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A=(percentage_Value*ICR1)-1;
    14f0:	0a e4       	ldi	r16, 0x4A	; 74
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	e6 e4       	ldi	r30, 0x46	; 70
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	cc 01       	movw	r24, r24
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	3a 81       	ldd	r19, Y+2	; 0x02
    1516:	4b 81       	ldd	r20, Y+3	; 0x03
    1518:	5c 81       	ldd	r21, Y+4	; 0x04
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	f8 01       	movw	r30, r16
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <Set_Duty_Cycle_TIMER_1_B>:
void Set_Duty_Cycle_TIMER_1_B(f32 percentage_Value)
{
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <Set_Duty_Cycle_TIMER_1_B+0xa>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <Set_Duty_Cycle_TIMER_1_B+0xc>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	69 83       	std	Y+1, r22	; 0x01
    156c:	7a 83       	std	Y+2, r23	; 0x02
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	9c 83       	std	Y+4, r25	; 0x04
	OCR1B=(percentage_Value*512)-1;
#elif Timer1_Mode==Fast_PWM_10_bit_Timer_1
	percentage_Value=percentage_Value/100;
	OCR1B=(percentage_Value*1024)-1;
#elif Timer1_Mode==Fast_PWM_ICR1_Timer_1
	percentage_Value=percentage_Value/100;
    1572:	69 81       	ldd	r22, Y+1	; 0x01
    1574:	7a 81       	ldd	r23, Y+2	; 0x02
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	48 ec       	ldi	r20, 0xC8	; 200
    1580:	52 e4       	ldi	r21, 0x42	; 66
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	ab 83       	std	Y+3, r26	; 0x03
    1590:	bc 83       	std	Y+4, r27	; 0x04
	OCR1B=(percentage_Value*ICR1)-1;
    1592:	08 e4       	ldi	r16, 0x48	; 72
    1594:	10 e0       	ldi	r17, 0x00	; 0
    1596:	e6 e4       	ldi	r30, 0x46	; 70
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	cc 01       	movw	r24, r24
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	29 81       	ldd	r18, Y+1	; 0x01
    15b6:	3a 81       	ldd	r19, Y+2	; 0x02
    15b8:	4b 81       	ldd	r20, Y+3	; 0x03
    15ba:	5c 81       	ldd	r21, Y+4	; 0x04
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
#else
#error "WRONG CHOOSE"

#endif

}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	08 95       	ret

000015fc <Set_Duty_Cycle_TIMER_2>:
void Set_Duty_Cycle_TIMER_2(f32 percentage_Value)
{
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <Set_Duty_Cycle_TIMER_2+0xa>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <Set_Duty_Cycle_TIMER_2+0xc>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	69 83       	std	Y+1, r22	; 0x01
    160e:	7a 83       	std	Y+2, r23	; 0x02
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	9c 83       	std	Y+4, r25	; 0x04
	percentage_Value=percentage_Value/100;
    1614:	69 81       	ldd	r22, Y+1	; 0x01
    1616:	7a 81       	ldd	r23, Y+2	; 0x02
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	48 ec       	ldi	r20, 0xC8	; 200
    1622:	52 e4       	ldi	r21, 0x42	; 66
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	ab 83       	std	Y+3, r26	; 0x03
    1632:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=(percentage_Value*255)-1;
    1634:	03 e4       	ldi	r16, 0x43	; 67
    1636:	10 e0       	ldi	r17, 0x00	; 0
    1638:	69 81       	ldd	r22, Y+1	; 0x01
    163a:	7a 81       	ldd	r23, Y+2	; 0x02
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	53 e4       	ldi	r21, 0x43	; 67
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	f8 01       	movw	r30, r16
    1672:	80 83       	st	Z, r24

}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <MDIO_u8Init>:
#include "MDIO_config.h"
#include "MDIO_interface.h"
#include "MDIO_private.h"

void MDIO_u8Init            (void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
    1694:	e7 e3       	ldi	r30, 0x37	; 55
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
    169a:	e4 e3       	ldi	r30, 0x34	; 52
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    16a0:	e1 e3       	ldi	r30, 0x31	; 49
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    16a8:	eb e3       	ldi	r30, 0x3B	; 59
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    16b4:	e5 e3       	ldi	r30, 0x35	; 53
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    16ba:	e2 e3       	ldi	r30, 0x32	; 50
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <MDIO_u8SetPinDirection>:

u8 MDIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	2e 97       	sbiw	r28, 0x0e	; 14
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	8a 83       	std	Y+2, r24	; 0x02
    16dc:	6b 83       	std	Y+3, r22	; 0x03
    16de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <MDIO_u8SetPinDirection+0x26>
    16ea:	0c c1       	rjmp	.+536    	; 0x1904 <MDIO_u8SetPinDirection+0x23e>
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <MDIO_u8SetPinDirection+0x2e>
    16f2:	08 c1       	rjmp	.+528    	; 0x1904 <MDIO_u8SetPinDirection+0x23e>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	88 23       	and	r24, r24
    16f8:	21 f0       	breq	.+8      	; 0x1702 <MDIO_u8SetPinDirection+0x3c>
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <MDIO_u8SetPinDirection+0x3c>
    1700:	01 c1       	rjmp	.+514    	; 0x1904 <MDIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3e 87       	std	Y+14, r19	; 0x0e
    170a:	2d 87       	std	Y+13, r18	; 0x0d
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <MDIO_u8SetPinDirection+0x52>
    1716:	4f c0       	rjmp	.+158    	; 0x17b6 <MDIO_u8SetPinDirection+0xf0>
    1718:	2d 85       	ldd	r18, Y+13	; 0x0d
    171a:	3e 85       	ldd	r19, Y+14	; 0x0e
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	2c f4       	brge	.+10     	; 0x172c <MDIO_u8SetPinDirection+0x66>
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	71 f0       	breq	.+28     	; 0x1746 <MDIO_u8SetPinDirection+0x80>
    172a:	ed c0       	rjmp	.+474    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
    172c:	2d 85       	ldd	r18, Y+13	; 0x0d
    172e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <MDIO_u8SetPinDirection+0x72>
    1736:	77 c0       	rjmp	.+238    	; 0x1826 <MDIO_u8SetPinDirection+0x160>
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <MDIO_u8SetPinDirection+0x7e>
    1742:	a9 c0       	rjmp	.+338    	; 0x1896 <MDIO_u8SetPinDirection+0x1d0>
    1744:	e0 c0       	rjmp	.+448    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	3c 87       	std	Y+12, r19	; 0x0c
    174e:	2b 87       	std	Y+11, r18	; 0x0b
    1750:	8b 85       	ldd	r24, Y+11	; 0x0b
    1752:	9c 85       	ldd	r25, Y+12	; 0x0c
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	d1 f0       	breq	.+52     	; 0x178c <MDIO_u8SetPinDirection+0xc6>
    1758:	2b 85       	ldd	r18, Y+11	; 0x0b
    175a:	3c 85       	ldd	r19, Y+12	; 0x0c
    175c:	21 30       	cpi	r18, 0x01	; 1
    175e:	31 05       	cpc	r19, r1
    1760:	09 f0       	breq	.+2      	; 0x1764 <MDIO_u8SetPinDirection+0x9e>
    1762:	d1 c0       	rjmp	.+418    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
    1764:	aa e3       	ldi	r26, 0x3A	; 58
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ea e3       	ldi	r30, 0x3A	; 58
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <MDIO_u8SetPinDirection+0xbc>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <MDIO_u8SetPinDirection+0xb8>
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	bd c0       	rjmp	.+378    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
    178c:	aa e3       	ldi	r26, 0x3A	; 58
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ea e3       	ldi	r30, 0x3A	; 58
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <MDIO_u8SetPinDirection+0xe4>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <MDIO_u8SetPinDirection+0xe0>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	a8 c0       	rjmp	.+336    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3a 87       	std	Y+10, r19	; 0x0a
    17be:	29 87       	std	Y+9, r18	; 0x09
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	d1 f0       	breq	.+52     	; 0x17fc <MDIO_u8SetPinDirection+0x136>
    17c8:	29 85       	ldd	r18, Y+9	; 0x09
    17ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <MDIO_u8SetPinDirection+0x10e>
    17d2:	99 c0       	rjmp	.+306    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
    17d4:	a7 e3       	ldi	r26, 0x37	; 55
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e7 e3       	ldi	r30, 0x37	; 55
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <MDIO_u8SetPinDirection+0x12c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <MDIO_u8SetPinDirection+0x128>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	85 c0       	rjmp	.+266    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
    17fc:	a7 e3       	ldi	r26, 0x37	; 55
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e7 e3       	ldi	r30, 0x37	; 55
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <MDIO_u8SetPinDirection+0x154>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <MDIO_u8SetPinDirection+0x150>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	70 c0       	rjmp	.+224    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	38 87       	std	Y+8, r19	; 0x08
    182e:	2f 83       	std	Y+7, r18	; 0x07
    1830:	8f 81       	ldd	r24, Y+7	; 0x07
    1832:	98 85       	ldd	r25, Y+8	; 0x08
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	d1 f0       	breq	.+52     	; 0x186c <MDIO_u8SetPinDirection+0x1a6>
    1838:	2f 81       	ldd	r18, Y+7	; 0x07
    183a:	38 85       	ldd	r19, Y+8	; 0x08
    183c:	21 30       	cpi	r18, 0x01	; 1
    183e:	31 05       	cpc	r19, r1
    1840:	09 f0       	breq	.+2      	; 0x1844 <MDIO_u8SetPinDirection+0x17e>
    1842:	61 c0       	rjmp	.+194    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
    1844:	a4 e3       	ldi	r26, 0x34	; 52
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e4 e3       	ldi	r30, 0x34	; 52
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <MDIO_u8SetPinDirection+0x19c>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <MDIO_u8SetPinDirection+0x198>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	4d c0       	rjmp	.+154    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
    186c:	a4 e3       	ldi	r26, 0x34	; 52
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e4 e3       	ldi	r30, 0x34	; 52
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <MDIO_u8SetPinDirection+0x1c4>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <MDIO_u8SetPinDirection+0x1c0>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	38 c0       	rjmp	.+112    	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3e 83       	std	Y+6, r19	; 0x06
    189e:	2d 83       	std	Y+5, r18	; 0x05
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	c9 f0       	breq	.+50     	; 0x18da <MDIO_u8SetPinDirection+0x214>
    18a8:	2d 81       	ldd	r18, Y+5	; 0x05
    18aa:	3e 81       	ldd	r19, Y+6	; 0x06
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	31 05       	cpc	r19, r1
    18b0:	51 f5       	brne	.+84     	; 0x1906 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    18b2:	a1 e3       	ldi	r26, 0x31	; 49
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e1 e3       	ldi	r30, 0x31	; 49
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <MDIO_u8SetPinDirection+0x20a>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <MDIO_u8SetPinDirection+0x206>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    18da:	a1 e3       	ldi	r26, 0x31	; 49
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e1 e3       	ldi	r30, 0x31	; 49
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <MDIO_u8SetPinDirection+0x232>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <MDIO_u8SetPinDirection+0x22e>
    18fc:	80 95       	com	r24
    18fe:	84 23       	and	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <MDIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1904:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	2e 96       	adiw	r28, 0x0e	; 14
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2e 97       	sbiw	r28, 0x0e	; 14
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	6b 83       	std	Y+3, r22	; 0x03
    1932:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	08 f0       	brcs	.+2      	; 0x1940 <MDIO_u8SetPinValue+0x26>
    193e:	0c c1       	rjmp	.+536    	; 0x1b58 <MDIO_u8SetPinValue+0x23e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 30       	cpi	r24, 0x08	; 8
    1944:	08 f0       	brcs	.+2      	; 0x1948 <MDIO_u8SetPinValue+0x2e>
    1946:	08 c1       	rjmp	.+528    	; 0x1b58 <MDIO_u8SetPinValue+0x23e>
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	21 f0       	breq	.+8      	; 0x1956 <MDIO_u8SetPinValue+0x3c>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	88 23       	and	r24, r24
    1952:	09 f0       	breq	.+2      	; 0x1956 <MDIO_u8SetPinValue+0x3c>
    1954:	01 c1       	rjmp	.+514    	; 0x1b58 <MDIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3e 87       	std	Y+14, r19	; 0x0e
    195e:	2d 87       	std	Y+13, r18	; 0x0d
    1960:	8d 85       	ldd	r24, Y+13	; 0x0d
    1962:	9e 85       	ldd	r25, Y+14	; 0x0e
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <MDIO_u8SetPinValue+0x52>
    196a:	4f c0       	rjmp	.+158    	; 0x1a0a <MDIO_u8SetPinValue+0xf0>
    196c:	2d 85       	ldd	r18, Y+13	; 0x0d
    196e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <MDIO_u8SetPinValue+0x66>
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	71 f0       	breq	.+28     	; 0x199a <MDIO_u8SetPinValue+0x80>
    197e:	ed c0       	rjmp	.+474    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
    1980:	2d 85       	ldd	r18, Y+13	; 0x0d
    1982:	3e 85       	ldd	r19, Y+14	; 0x0e
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <MDIO_u8SetPinValue+0x72>
    198a:	77 c0       	rjmp	.+238    	; 0x1a7a <MDIO_u8SetPinValue+0x160>
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <MDIO_u8SetPinValue+0x7e>
    1996:	a9 c0       	rjmp	.+338    	; 0x1aea <MDIO_u8SetPinValue+0x1d0>
    1998:	e0 c0       	rjmp	.+448    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3c 87       	std	Y+12, r19	; 0x0c
    19a2:	2b 87       	std	Y+11, r18	; 0x0b
    19a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	d1 f0       	breq	.+52     	; 0x19e0 <MDIO_u8SetPinValue+0xc6>
    19ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    19ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    19b0:	21 30       	cpi	r18, 0x01	; 1
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <MDIO_u8SetPinValue+0x9e>
    19b6:	d1 c0       	rjmp	.+418    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    19b8:	ab e3       	ldi	r26, 0x3B	; 59
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e3       	ldi	r30, 0x3B	; 59
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <MDIO_u8SetPinValue+0xbc>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <MDIO_u8SetPinValue+0xb8>
    19da:	84 2b       	or	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	bd c0       	rjmp	.+378    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    19e0:	ab e3       	ldi	r26, 0x3B	; 59
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	eb e3       	ldi	r30, 0x3B	; 59
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <MDIO_u8SetPinValue+0xe4>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <MDIO_u8SetPinValue+0xe0>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	a8 c0       	rjmp	.+336    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3a 87       	std	Y+10, r19	; 0x0a
    1a12:	29 87       	std	Y+9, r18	; 0x09
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	d1 f0       	breq	.+52     	; 0x1a50 <MDIO_u8SetPinValue+0x136>
    1a1c:	29 85       	ldd	r18, Y+9	; 0x09
    1a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a20:	21 30       	cpi	r18, 0x01	; 1
    1a22:	31 05       	cpc	r19, r1
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <MDIO_u8SetPinValue+0x10e>
    1a26:	99 c0       	rjmp	.+306    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <MDIO_u8SetPinValue+0x12c>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <MDIO_u8SetPinValue+0x128>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	85 c0       	rjmp	.+266    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1a50:	a8 e3       	ldi	r26, 0x38	; 56
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <MDIO_u8SetPinValue+0x154>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <MDIO_u8SetPinValue+0x150>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	70 c0       	rjmp	.+224    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	38 87       	std	Y+8, r19	; 0x08
    1a82:	2f 83       	std	Y+7, r18	; 0x07
    1a84:	8f 81       	ldd	r24, Y+7	; 0x07
    1a86:	98 85       	ldd	r25, Y+8	; 0x08
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <MDIO_u8SetPinValue+0x1a6>
    1a8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a8e:	38 85       	ldd	r19, Y+8	; 0x08
    1a90:	21 30       	cpi	r18, 0x01	; 1
    1a92:	31 05       	cpc	r19, r1
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <MDIO_u8SetPinValue+0x17e>
    1a96:	61 c0       	rjmp	.+194    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1a98:	a5 e3       	ldi	r26, 0x35	; 53
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <MDIO_u8SetPinValue+0x19c>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <MDIO_u8SetPinValue+0x198>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	4d c0       	rjmp	.+154    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    1ac0:	a5 e3       	ldi	r26, 0x35	; 53
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <MDIO_u8SetPinValue+0x1c4>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <MDIO_u8SetPinValue+0x1c0>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	38 c0       	rjmp	.+112    	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3e 83       	std	Y+6, r19	; 0x06
    1af2:	2d 83       	std	Y+5, r18	; 0x05
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	c9 f0       	breq	.+50     	; 0x1b2e <MDIO_u8SetPinValue+0x214>
    1afc:	2d 81       	ldd	r18, Y+5	; 0x05
    1afe:	3e 81       	ldd	r19, Y+6	; 0x06
    1b00:	21 30       	cpi	r18, 0x01	; 1
    1b02:	31 05       	cpc	r19, r1
    1b04:	51 f5       	brne	.+84     	; 0x1b5a <MDIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1b06:	a2 e3       	ldi	r26, 0x32	; 50
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <MDIO_u8SetPinValue+0x20a>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <MDIO_u8SetPinValue+0x206>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	16 c0       	rjmp	.+44     	; 0x1b5a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1b2e:	a2 e3       	ldi	r26, 0x32	; 50
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <MDIO_u8SetPinValue+0x232>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <MDIO_u8SetPinValue+0x22e>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <MDIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1b58:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5c:	2e 96       	adiw	r28, 0x0e	; 14
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	27 97       	sbiw	r28, 0x07	; 7
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	6b 83       	std	Y+3, r22	; 0x03
    1b86:	5d 83       	std	Y+5, r21	; 0x05
    1b88:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <MDIO_u8GetPinValue+0x28>
    1b94:	ea c0       	rjmp	.+468    	; 0x1d6a <MDIO_u8GetPinValue+0x1fc>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 30       	cpi	r24, 0x08	; 8
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <MDIO_u8GetPinValue+0x30>
    1b9c:	e6 c0       	rjmp	.+460    	; 0x1d6a <MDIO_u8GetPinValue+0x1fc>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <MDIO_u8GetPinValue+0x3a>
    1ba6:	e1 c0       	rjmp	.+450    	; 0x1d6a <MDIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3f 83       	std	Y+7, r19	; 0x07
    1bb0:	2e 83       	std	Y+6, r18	; 0x06
    1bb2:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb4:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb6:	41 30       	cpi	r20, 0x01	; 1
    1bb8:	51 05       	cpc	r21, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <MDIO_u8GetPinValue+0x50>
    1bbc:	48 c0       	rjmp	.+144    	; 0x1c4e <MDIO_u8GetPinValue+0xe0>
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	34 f4       	brge	.+12     	; 0x1bd4 <MDIO_u8GetPinValue+0x66>
    1bc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bca:	3f 81       	ldd	r19, Y+7	; 0x07
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	71 f0       	breq	.+28     	; 0x1bee <MDIO_u8GetPinValue+0x80>
    1bd2:	cc c0       	rjmp	.+408    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
    1bd4:	4e 81       	ldd	r20, Y+6	; 0x06
    1bd6:	5f 81       	ldd	r21, Y+7	; 0x07
    1bd8:	42 30       	cpi	r20, 0x02	; 2
    1bda:	51 05       	cpc	r21, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <MDIO_u8GetPinValue+0x72>
    1bde:	67 c0       	rjmp	.+206    	; 0x1cae <MDIO_u8GetPinValue+0x140>
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	09 f4       	brne	.+2      	; 0x1bec <MDIO_u8GetPinValue+0x7e>
    1bea:	90 c0       	rjmp	.+288    	; 0x1d0c <MDIO_u8GetPinValue+0x19e>
    1bec:	bf c0       	rjmp	.+382    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    1bee:	e9 e3       	ldi	r30, 0x39	; 57
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a9 01       	movw	r20, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <MDIO_u8GetPinValue+0x98>
    1c02:	55 95       	asr	r21
    1c04:	47 95       	ror	r20
    1c06:	8a 95       	dec	r24
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <MDIO_u8GetPinValue+0x94>
    1c0a:	ca 01       	movw	r24, r20
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	21 f4       	brne	.+8      	; 0x1c1c <MDIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c14:	ec 81       	ldd	r30, Y+4	; 0x04
    1c16:	fd 81       	ldd	r31, Y+5	; 0x05
    1c18:	10 82       	st	Z, r1
    1c1a:	a8 c0       	rjmp	.+336    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    1c1c:	e9 e3       	ldi	r30, 0x39	; 57
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <MDIO_u8GetPinValue+0xc6>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	8a 95       	dec	r24
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <MDIO_u8GetPinValue+0xc2>
    1c38:	ca 01       	movw	r24, r20
    1c3a:	81 70       	andi	r24, 0x01	; 1
    1c3c:	90 70       	andi	r25, 0x00	; 0
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <MDIO_u8GetPinValue+0xd6>
    1c42:	94 c0       	rjmp	.+296    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 83       	st	Z, r24
    1c4c:	8f c0       	rjmp	.+286    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1c4e:	e6 e3       	ldi	r30, 0x36	; 54
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <MDIO_u8GetPinValue+0xf8>
    1c62:	55 95       	asr	r21
    1c64:	47 95       	ror	r20
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <MDIO_u8GetPinValue+0xf4>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <MDIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c74:	ec 81       	ldd	r30, Y+4	; 0x04
    1c76:	fd 81       	ldd	r31, Y+5	; 0x05
    1c78:	10 82       	st	Z, r1
    1c7a:	78 c0       	rjmp	.+240    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			    }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1c7c:	e6 e3       	ldi	r30, 0x36	; 54
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <MDIO_u8GetPinValue+0x126>
    1c90:	55 95       	asr	r21
    1c92:	47 95       	ror	r20
    1c94:	8a 95       	dec	r24
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <MDIO_u8GetPinValue+0x122>
    1c98:	ca 01       	movw	r24, r20
    1c9a:	81 70       	andi	r24, 0x01	; 1
    1c9c:	90 70       	andi	r25, 0x00	; 0
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <MDIO_u8GetPinValue+0x136>
    1ca2:	64 c0       	rjmp	.+200    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1ca4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ca6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 83       	st	Z, r24
    1cac:	5f c0       	rjmp	.+190    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1cae:	e3 e3       	ldi	r30, 0x33	; 51
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <MDIO_u8GetPinValue+0x158>
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <MDIO_u8GetPinValue+0x154>
    1cca:	ca 01       	movw	r24, r20
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	21 f4       	brne	.+8      	; 0x1cdc <MDIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1cd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd8:	10 82       	st	Z, r1
    1cda:	48 c0       	rjmp	.+144    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    1cdc:	e3 e3       	ldi	r30, 0x33	; 51
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a9 01       	movw	r20, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <MDIO_u8GetPinValue+0x186>
    1cf0:	55 95       	asr	r21
    1cf2:	47 95       	ror	r20
    1cf4:	8a 95       	dec	r24
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <MDIO_u8GetPinValue+0x182>
    1cf8:	ca 01       	movw	r24, r20
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	90 70       	andi	r25, 0x00	; 0
    1cfe:	88 23       	and	r24, r24
    1d00:	a9 f1       	breq	.+106    	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1d02:	ec 81       	ldd	r30, Y+4	; 0x04
    1d04:	fd 81       	ldd	r31, Y+5	; 0x05
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 83       	st	Z, r24
    1d0a:	30 c0       	rjmp	.+96     	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    1d0c:	e0 e3       	ldi	r30, 0x30	; 48
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a9 01       	movw	r20, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <MDIO_u8GetPinValue+0x1b6>
    1d20:	55 95       	asr	r21
    1d22:	47 95       	ror	r20
    1d24:	8a 95       	dec	r24
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <MDIO_u8GetPinValue+0x1b2>
    1d28:	ca 01       	movw	r24, r20
    1d2a:	81 70       	andi	r24, 0x01	; 1
    1d2c:	90 70       	andi	r25, 0x00	; 0
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	21 f4       	brne	.+8      	; 0x1d3a <MDIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1d32:	ec 81       	ldd	r30, Y+4	; 0x04
    1d34:	fd 81       	ldd	r31, Y+5	; 0x05
    1d36:	10 82       	st	Z, r1
    1d38:	19 c0       	rjmp	.+50     	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    1d3a:	e0 e3       	ldi	r30, 0x30	; 48
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <MDIO_u8GetPinValue+0x1e4>
    1d4e:	55 95       	asr	r21
    1d50:	47 95       	ror	r20
    1d52:	8a 95       	dec	r24
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <MDIO_u8GetPinValue+0x1e0>
    1d56:	ca 01       	movw	r24, r20
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	88 23       	and	r24, r24
    1d5e:	31 f0       	breq	.+12     	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1d60:	ec 81       	ldd	r30, Y+4	; 0x04
    1d62:	fd 81       	ldd	r31, Y+5	; 0x05
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 83       	st	Z, r24
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <MDIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6e:	27 96       	adiw	r28, 0x07	; 7
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <MDIO_u8SetPortDirection>:
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <MDIO_u8SetPortDirection+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <MDIO_u8SetPortDirection+0x8>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortID)
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3d 83       	std	Y+5, r19	; 0x05
    1d9e:	2c 83       	std	Y+4, r18	; 0x04
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <MDIO_u8SetPortDirection+0x5e>
    1daa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dac:	3d 81       	ldd	r19, Y+5	; 0x05
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <MDIO_u8SetPortDirection+0x3e>
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <MDIO_u8SetPortDirection+0x54>
    1dbc:	1e c0       	rjmp	.+60     	; 0x1dfa <MDIO_u8SetPortDirection+0x7a>
    1dbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <MDIO_u8SetPortDirection+0x68>
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	9d 81       	ldd	r25, Y+5	; 0x05
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <MDIO_u8SetPortDirection+0x72>
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <MDIO_u8SetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:DDRA_u8_REG = Copy_u8PortDirection;break;
    1dd4:	ea e3       	ldi	r30, 0x3A	; 58
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	80 83       	st	Z, r24
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTB:DDRB_u8_REG = Copy_u8PortDirection;break;
    1dde:	e7 e3       	ldi	r30, 0x37	; 55
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	80 83       	st	Z, r24
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTC:DDRC_u8_REG = Copy_u8PortDirection;break;
    1de8:	e4 e3       	ldi	r30, 0x34	; 52
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	80 83       	st	Z, r24
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTD:DDRD_u8_REG = Copy_u8PortDirection;break;
    1df2:	e1 e3       	ldi	r30, 0x31	; 49
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	80 83       	st	Z, r24
		}
			return Local_u8ReturnState;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <MDIO_u8SetPortValue>:

u8 MDIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <MDIO_u8SetPortValue+0x6>
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <MDIO_u8SetPortValue+0x8>
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
    1e1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	3d 83       	std	Y+5, r19	; 0x05
    1e2a:	2c 83       	std	Y+4, r18	; 0x04
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	91 05       	cpc	r25, r1
    1e34:	d1 f0       	breq	.+52     	; 0x1e6a <MDIO_u8SetPortValue+0x5e>
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
    1e38:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <MDIO_u8SetPortValue+0x3e>
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	61 f0       	breq	.+24     	; 0x1e60 <MDIO_u8SetPortValue+0x54>
    1e48:	1f c0       	rjmp	.+62     	; 0x1e88 <MDIO_u8SetPortValue+0x7c>
    1e4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	81 f0       	breq	.+32     	; 0x1e74 <MDIO_u8SetPortValue+0x68>
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	9d 81       	ldd	r25, Y+5	; 0x05
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	81 f0       	breq	.+32     	; 0x1e7e <MDIO_u8SetPortValue+0x72>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <MDIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	80 83       	st	Z, r24
    1e68:	10 c0       	rjmp	.+32     	; 0x1e8a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    1e6a:	e8 e3       	ldi	r30, 0x38	; 56
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	80 83       	st	Z, r24
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1e74:	e5 e3       	ldi	r30, 0x35	; 53
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	80 83       	st	Z, r24
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    1e7e:	e2 e3       	ldi	r30, 0x32	; 50
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	80 83       	st	Z, r24
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <MDIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1e88:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <MDIO_u8Set4PinsValue>:

u8 MDIO_u8Set4PinsValue    (u8 Copy_u8PortID, u8 Copy_u8PinStart, u8 Copy_u8PortValue)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <MDIO_u8Set4PinsValue+0x6>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <MDIO_u8Set4PinsValue+0x8>
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <MDIO_u8Set4PinsValue+0xa>
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
    1eac:	6b 83       	std	Y+3, r22	; 0x03
    1eae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinStart<=4)
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	85 30       	cpi	r24, 0x05	; 5
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <MDIO_u8Set4PinsValue+0x20>
    1eba:	c7 c0       	rjmp	.+398    	; 0x204a <MDIO_u8Set4PinsValue+0x1ae>
	{
		switch(Copy_u8PortValue)
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	2d 83       	std	Y+5, r18	; 0x05
    1ec6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec8:	7e 81       	ldd	r23, Y+6	; 0x06
    1eca:	61 30       	cpi	r22, 0x01	; 1
    1ecc:	71 05       	cpc	r23, r1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <MDIO_u8Set4PinsValue+0x36>
    1ed0:	41 c0       	rjmp	.+130    	; 0x1f54 <MDIO_u8Set4PinsValue+0xb8>
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	91 05       	cpc	r25, r1
    1eda:	34 f4       	brge	.+12     	; 0x1ee8 <MDIO_u8Set4PinsValue+0x4c>
    1edc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ede:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee0:	21 15       	cp	r18, r1
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	71 f0       	breq	.+28     	; 0x1f02 <MDIO_u8Set4PinsValue+0x66>
    1ee6:	b2 c0       	rjmp	.+356    	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>
    1ee8:	6d 81       	ldd	r22, Y+5	; 0x05
    1eea:	7e 81       	ldd	r23, Y+6	; 0x06
    1eec:	62 30       	cpi	r22, 0x02	; 2
    1eee:	71 05       	cpc	r23, r1
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <MDIO_u8Set4PinsValue+0x58>
    1ef2:	59 c0       	rjmp	.+178    	; 0x1fa6 <MDIO_u8Set4PinsValue+0x10a>
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <MDIO_u8Set4PinsValue+0x64>
    1efe:	7c c0       	rjmp	.+248    	; 0x1ff8 <MDIO_u8Set4PinsValue+0x15c>
    1f00:	a5 c0       	rjmp	.+330    	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1f02:	ab e3       	ldi	r26, 0x3B	; 59
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	eb e3       	ldi	r30, 0x3B	; 59
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8f e0       	ldi	r24, 0x0F	; 15
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <MDIO_u8Set4PinsValue+0x82>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	2a 95       	dec	r18
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <MDIO_u8Set4PinsValue+0x7e>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
			PORTA_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    1f28:	ab e3       	ldi	r26, 0x3B	; 59
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	eb e3       	ldi	r30, 0x3B	; 59
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	b9 01       	movw	r22, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <MDIO_u8Set4PinsValue+0xac>
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <MDIO_u8Set4PinsValue+0xa8>
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	84 2b       	or	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	7c c0       	rjmp	.+248    	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1f54:	a8 e3       	ldi	r26, 0x38	; 56
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e8 e3       	ldi	r30, 0x38	; 56
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8f e0       	ldi	r24, 0x0F	; 15
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <MDIO_u8Set4PinsValue+0xd4>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	2a 95       	dec	r18
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <MDIO_u8Set4PinsValue+0xd0>
    1f74:	80 95       	com	r24
    1f76:	84 23       	and	r24, r20
    1f78:	8c 93       	st	X, r24
			PORTB_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    1f7a:	a8 e3       	ldi	r26, 0x38	; 56
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e8 e3       	ldi	r30, 0x38	; 56
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	b9 01       	movw	r22, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <MDIO_u8Set4PinsValue+0xfe>
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	8a 95       	dec	r24
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <MDIO_u8Set4PinsValue+0xfa>
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	84 2b       	or	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	53 c0       	rjmp	.+166    	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1fa6:	a5 e3       	ldi	r26, 0x35	; 53
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e5 e3       	ldi	r30, 0x35	; 53
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8f e0       	ldi	r24, 0x0F	; 15
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <MDIO_u8Set4PinsValue+0x126>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	2a 95       	dec	r18
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <MDIO_u8Set4PinsValue+0x122>
    1fc6:	80 95       	com	r24
    1fc8:	84 23       	and	r24, r20
    1fca:	8c 93       	st	X, r24
			PORTC_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    1fcc:	a5 e3       	ldi	r26, 0x35	; 53
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e3       	ldi	r30, 0x35	; 53
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <MDIO_u8Set4PinsValue+0x150>
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	8a 95       	dec	r24
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <MDIO_u8Set4PinsValue+0x14c>
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	84 2b       	or	r24, r20
    1ff4:	8c 93       	st	X, r24
    1ff6:	2a c0       	rjmp	.+84     	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTD:

			PORTD_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1ff8:	a2 e3       	ldi	r26, 0x32	; 50
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e2 e3       	ldi	r30, 0x32	; 50
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8f e0       	ldi	r24, 0x0F	; 15
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <MDIO_u8Set4PinsValue+0x178>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	2a 95       	dec	r18
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <MDIO_u8Set4PinsValue+0x174>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	8c 93       	st	X, r24
			PORTD_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    201e:	a2 e3       	ldi	r26, 0x32	; 50
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	b9 01       	movw	r22, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <MDIO_u8Set4PinsValue+0x1a2>
    203a:	66 0f       	add	r22, r22
    203c:	77 1f       	adc	r23, r23
    203e:	8a 95       	dec	r24
    2040:	e2 f7       	brpl	.-8      	; 0x203a <MDIO_u8Set4PinsValue+0x19e>
    2042:	cb 01       	movw	r24, r22
    2044:	84 2b       	or	r24, r20
    2046:	8c 93       	st	X, r24
    2048:	01 c0       	rjmp	.+2      	; 0x204c <MDIO_u8Set4PinsValue+0x1b0>

		}
	}
	else
		{
			Local_u8ReturnState = STD_TYPES_NOK;
    204a:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8ReturnState;
    204c:	89 81       	ldd	r24, Y+1	; 0x01

}
    204e:	26 96       	adiw	r28, 0x06	; 6
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <MDIO_u8GetPortValue>:


u8 MDIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <MDIO_u8GetPortValue+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <MDIO_u8GetPortValue+0x8>
    2068:	00 d0       	rcall	.+0      	; 0x206a <MDIO_u8GetPortValue+0xa>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	8a 83       	std	Y+2, r24	; 0x02
    2070:	7c 83       	std	Y+4, r23	; 0x04
    2072:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	e9 f1       	breq	.+122    	; 0x20fa <MDIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3e 83       	std	Y+6, r19	; 0x06
    2088:	2d 83       	std	Y+5, r18	; 0x05
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	e1 f0       	breq	.+56     	; 0x20cc <MDIO_u8GetPortValue+0x6c>
    2094:	2d 81       	ldd	r18, Y+5	; 0x05
    2096:	3e 81       	ldd	r19, Y+6	; 0x06
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	2c f4       	brge	.+10     	; 0x20a8 <MDIO_u8GetPortValue+0x48>
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	61 f0       	breq	.+24     	; 0x20be <MDIO_u8GetPortValue+0x5e>
    20a6:	27 c0       	rjmp	.+78     	; 0x20f6 <MDIO_u8GetPortValue+0x96>
    20a8:	2d 81       	ldd	r18, Y+5	; 0x05
    20aa:	3e 81       	ldd	r19, Y+6	; 0x06
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	a1 f0       	breq	.+40     	; 0x20da <MDIO_u8GetPortValue+0x7a>
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	91 05       	cpc	r25, r1
    20ba:	b1 f0       	breq	.+44     	; 0x20e8 <MDIO_u8GetPortValue+0x88>
    20bc:	1c c0       	rjmp	.+56     	; 0x20f6 <MDIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    20be:	e9 e3       	ldi	r30, 0x39	; 57
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	eb 81       	ldd	r30, Y+3	; 0x03
    20c6:	fc 81       	ldd	r31, Y+4	; 0x04
    20c8:	80 83       	st	Z, r24
    20ca:	18 c0       	rjmp	.+48     	; 0x20fc <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    20cc:	e6 e3       	ldi	r30, 0x36	; 54
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	eb 81       	ldd	r30, Y+3	; 0x03
    20d4:	fc 81       	ldd	r31, Y+4	; 0x04
    20d6:	80 83       	st	Z, r24
    20d8:	11 c0       	rjmp	.+34     	; 0x20fc <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    20da:	e3 e3       	ldi	r30, 0x33	; 51
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	eb 81       	ldd	r30, Y+3	; 0x03
    20e2:	fc 81       	ldd	r31, Y+4	; 0x04
    20e4:	80 83       	st	Z, r24
    20e6:	0a c0       	rjmp	.+20     	; 0x20fc <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    20e8:	e0 e3       	ldi	r30, 0x30	; 48
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	eb 81       	ldd	r30, Y+3	; 0x03
    20f0:	fc 81       	ldd	r31, Y+4	; 0x04
    20f2:	80 83       	st	Z, r24
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <MDIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <MDIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    20fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20fe:	26 96       	adiw	r28, 0x06	; 6
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GIE_Vid_Enable>:
#include "MGIE_config.h"
#include "MGIE_Register.h"


void GIE_Vid_Enable (void)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,GIE_ENABLE);
    2118:	af e5       	ldi	r26, 0x5F	; 95
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ef e5       	ldi	r30, 0x5F	; 95
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 68       	ori	r24, 0x80	; 128
    2124:	8c 93       	st	X, r24
}
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <GIE_Vid_Disable>:
void GIE_Vid_Disable(void)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,GIE_ENABLE);
    2134:	af e5       	ldi	r26, 0x5F	; 95
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	ef e5       	ldi	r30, 0x5F	; 95
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8f 77       	andi	r24, 0x7F	; 127
    2140:	8c 93       	st	X, r24
}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <INT0_SetCallBack>:
static void (*GPFunc2)(void)=NULL;
/******************************************************************/
/*Make a Set Call Back Function for every Interrupt peripherals in External Interrupts*/
			/*Set Call Back Functions for External Interrupt zero*/
void INT0_SetCallBack(void(*LocPFunc)(void))
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <INT0_SetCallBack+0x6>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
	GPFunc0=LocPFunc;	
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	90 93 a3 01 	sts	0x01A3, r25
    215e:	80 93 a2 01 	sts	0x01A2, r24
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <INT1_SetCallBack>:
/*Set Call Back Functions for External Interrupt one*/

void INT1_SetCallBack(void(*LocPFunc)(void))
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <INT1_SetCallBack+0x6>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
	GPFunc1=LocPFunc;	
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	90 93 a5 01 	sts	0x01A5, r25
    2182:	80 93 a4 01 	sts	0x01A4, r24
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <INT2_SetCallBack>:
/*Set Call Back Functions for External Interrupt two*/

void INT2_SetCallBack(void(*LocPFunc)(void))
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <INT2_SetCallBack+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
	GPFunc2=LocPFunc;	
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	90 93 a7 01 	sts	0x01A7, r25
    21a6:	80 93 a6 01 	sts	0x01A6, r24
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <__vector_1>:
/***************************************************************************/
/*Make a ISR Function for every Interrupt peripherals in External Interrupt*/
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_1)
{
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc0!=NULL)
    21de:	80 91 a2 01 	lds	r24, 0x01A2
    21e2:	90 91 a3 01 	lds	r25, 0x01A3
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <__vector_1+0x40>
	{
		GPFunc0();
    21ea:	e0 91 a2 01 	lds	r30, 0x01A2
    21ee:	f0 91 a3 01 	lds	r31, 0x01A3
    21f2:	09 95       	icall
	}
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_2>:
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_2)
{
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	11 24       	eor	r1, r1
    2224:	2f 93       	push	r18
    2226:	3f 93       	push	r19
    2228:	4f 93       	push	r20
    222a:	5f 93       	push	r21
    222c:	6f 93       	push	r22
    222e:	7f 93       	push	r23
    2230:	8f 93       	push	r24
    2232:	9f 93       	push	r25
    2234:	af 93       	push	r26
    2236:	bf 93       	push	r27
    2238:	ef 93       	push	r30
    223a:	ff 93       	push	r31
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc1!=NULL)
    2244:	80 91 a4 01 	lds	r24, 0x01A4
    2248:	90 91 a5 01 	lds	r25, 0x01A5
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	29 f0       	breq	.+10     	; 0x225a <__vector_2+0x40>
	{
		GPFunc1();
    2250:	e0 91 a4 01 	lds	r30, 0x01A4
    2254:	f0 91 a5 01 	lds	r31, 0x01A5
    2258:	09 95       	icall
	}
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	ff 91       	pop	r31
    2260:	ef 91       	pop	r30
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <__vector_3>:
			/*ISR Functions for External Interrupt Zero*/
ISR(__vector_3)
{
    2280:	1f 92       	push	r1
    2282:	0f 92       	push	r0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	0f 92       	push	r0
    2288:	11 24       	eor	r1, r1
    228a:	2f 93       	push	r18
    228c:	3f 93       	push	r19
    228e:	4f 93       	push	r20
    2290:	5f 93       	push	r21
    2292:	6f 93       	push	r22
    2294:	7f 93       	push	r23
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc2!=NULL)
    22aa:	80 91 a6 01 	lds	r24, 0x01A6
    22ae:	90 91 a7 01 	lds	r25, 0x01A7
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <__vector_3+0x40>
	{
		GPFunc2();
    22b6:	e0 91 a6 01 	lds	r30, 0x01A6
    22ba:	f0 91 a7 01 	lds	r31, 0x01A7
    22be:	09 95       	icall
	}
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <EX_INT0_INIT>:


void EX_INT0_INIT(void)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 0*/
	SET_BIT(GICR ,INT0);
    22ee:	ab e5       	ldi	r26, 0x5B	; 91
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	eb e5       	ldi	r30, 0x5B	; 91
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	80 64       	ori	r24, 0x40	; 64
    22fa:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Low_Level
	CLR_BIT(MCUCR ,ISC00);
	CLR_BIT(MCUCR ,ISC01);
	#elif MODE_INT0==Any_Change
	SET_BIT(MCUCR ,ISC00);
    22fc:	a5 e5       	ldi	r26, 0x55	; 85
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e5 e5       	ldi	r30, 0x55	; 85
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	8c 93       	st	X, r24
	CLR_BIT(MCUCR ,ISC01);
    230a:	a5 e5       	ldi	r26, 0x55	; 85
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e5 e5       	ldi	r30, 0x55	; 85
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8d 7f       	andi	r24, 0xFD	; 253
    2316:	8c 93       	st	X, r24
	#endif
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <EX_INT1_INIT>:
void EX_INT1_INIT(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 1*/
	SET_BIT(GICR ,INT1);
    2326:	ab e5       	ldi	r26, 0x5B	; 91
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	eb e5       	ldi	r30, 0x5B	; 91
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	80 68       	ori	r24, 0x80	; 128
    2332:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT1==Falling_Adge
	CLR_BIT(MCUCR ,ISC10);
    2334:	a5 e5       	ldi	r26, 0x55	; 85
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e5 e5       	ldi	r30, 0x55	; 85
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8b 7f       	andi	r24, 0xFB	; 251
    2340:	8c 93       	st	X, r24
	SET_BIT(MCUCR ,ISC11);
    2342:	a5 e5       	ldi	r26, 0x55	; 85
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e5 e5       	ldi	r30, 0x55	; 85
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 60       	ori	r24, 0x08	; 8
    234e:	8c 93       	st	X, r24
	#elif MODE_INT1==Any_Change
	SET_BIT(MCUCR ,ISC10);
	CLR_BIT(MCUCR ,ISC11);

	#endif	
}
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <EX_INT2_INIT>:
void EX_INT2_INIT(void)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE EXTERNAL ENTERRUPT 2*/
	SET_BIT(GICR ,INT2);
    235e:	ab e5       	ldi	r26, 0x5B	; 91
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	eb e5       	ldi	r30, 0x5B	; 91
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	80 62       	ori	r24, 0x20	; 32
    236a:	8c 93       	st	X, r24
	/*CHOOSE MODE*/
	#if   MODE_INT2==Falling_Adge
	CLR_BIT(MCUCSR ,ISC2);
    236c:	a4 e5       	ldi	r26, 0x54	; 84
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e4 e5       	ldi	r30, 0x54	; 84
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8f 7b       	andi	r24, 0xBF	; 191
    2378:	8c 93       	st	X, r24
	#elif MODE_INT2==Rising_Adge
	SET_BIT(MCUCSR ,ISC2);

	#endif
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <ADC_SetCallBack>:
/****** Global Pointer To Function *********/
static void (*GPFunc)(void)=NULL;


void ADC_SetCallBack(void(*LocPFunc)(void))
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <ADC_SetCallBack+0x6>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
GPFunc=LocPFunc;	
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	90 93 a9 01 	sts	0x01A9, r25
    2396:	80 93 a8 01 	sts	0x01A8, r24
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <__vector_16>:
/***********ISR FUNCTION ***********/
ISR(__vector_16)
{
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	if(GPFunc!=NULL)
    23ce:	80 91 a8 01 	lds	r24, 0x01A8
    23d2:	90 91 a9 01 	lds	r25, 0x01A9
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <__vector_16+0x40>
	{
		GPFunc();
    23da:	e0 91 a8 01 	lds	r30, 0x01A8
    23de:	f0 91 a9 01 	lds	r31, 0x01A9
    23e2:	09 95       	icall
	}
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	0f 90       	pop	r0
    2406:	1f 90       	pop	r1
    2408:	18 95       	reti

0000240a <ADC_VidINIT>:

void ADC_VidINIT(void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	/***********ADC VOLTAGE REFFRANCE ***********/
	#if 	ADC_Vref==Vref_turned_off
		CLR_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);
	#elif	ADC_Vref==Vref_AVCC
		SET_BIT(ADMUX,REFS0);
    2412:	a7 e2       	ldi	r26, 0x27	; 39
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e7 e2       	ldi	r30, 0x27	; 39
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 64       	ori	r24, 0x40	; 64
    241e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
    2420:	a7 e2       	ldi	r26, 0x27	; 39
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e7 e2       	ldi	r30, 0x27	; 39
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8f 77       	andi	r24, 0x7F	; 127
    242c:	8c 93       	st	X, r24
	#elif     ADC_Prescaler==ADC_Prescaler_32
			 SET_BIT(ADCSRA,ADPS0);\
			 CLR_BIT(ADCSRA,ADPS1);\
			 SET_BIT(ADCSRA,ADPS2);
	#elif     ADC_Prescaler==ADC_Prescaler_64
			 CLR_BIT(ADCSRA,ADPS0);\
    242e:	a6 e2       	ldi	r26, 0x26	; 38
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e6 e2       	ldi	r30, 0x26	; 38
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8e 7f       	andi	r24, 0xFE	; 254
    243a:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS1);\
    243c:	a6 e2       	ldi	r26, 0x26	; 38
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e6 e2       	ldi	r30, 0x26	; 38
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	82 60       	ori	r24, 0x02	; 2
    2448:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
    244a:	a6 e2       	ldi	r26, 0x26	; 38
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e6 e2       	ldi	r30, 0x26	; 38
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	84 60       	ori	r24, 0x04	; 4
    2456:	8c 93       	st	X, r24
			 SET_BIT(ADCSRA,ADPS2);
	#endif

	/************ ADC SAVE FROM **************/
	#if  	ADC_SAVE_FROM==Right_Adjust
		CLR_BIT(ADMUX,ADLAR);
    2458:	a7 e2       	ldi	r26, 0x27	; 39
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e7 e2       	ldi	r30, 0x27	; 39
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 7d       	andi	r24, 0xDF	; 223
    2464:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADATE);
		CLR_BIT(SFIOR,ADTS0);
		CLR_BIT(SFIOR,ADTS1);
		CLR_BIT(SFIOR,ADTS2);
	#elif	ADC_Mode==ADC_External_Interrupt_0_Trigger
		SET_BIT(ADCSRA,ADATE);
    2466:	a6 e2       	ldi	r26, 0x26	; 38
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e6 e2       	ldi	r30, 0x26	; 38
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	80 62       	ori	r24, 0x20	; 32
    2472:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS0);
    2474:	a0 e5       	ldi	r26, 0x50	; 80
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e0 e5       	ldi	r30, 0x50	; 80
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8f 7d       	andi	r24, 0xDF	; 223
    2480:	8c 93       	st	X, r24
		SET_BIT(SFIOR,ADTS1);
    2482:	a0 e5       	ldi	r26, 0x50	; 80
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e0 e5       	ldi	r30, 0x50	; 80
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,ADTS2);
    2490:	a0 e5       	ldi	r26, 0x50	; 80
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e0 e5       	ldi	r30, 0x50	; 80
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8f 77       	andi	r24, 0x7F	; 127
    249c:	8c 93       	st	X, r24
	
	#endif
		/************ADC ENABLE ******************/
		SET_BIT(ADCSRA,ADEN);
    249e:	a6 e2       	ldi	r26, 0x26	; 38
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e6 e2       	ldi	r30, 0x26	; 38
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 68       	ori	r24, 0x80	; 128
    24aa:	8c 93       	st	X, r24
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <ADC_Start_Conversion>:
void ADC_Start_Conversion(void)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADSC);
    24ba:	a6 e2       	ldi	r26, 0x26	; 38
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e6 e2       	ldi	r30, 0x26	; 38
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 64       	ori	r24, 0x40	; 64
    24c6:	8c 93       	st	X, r24
}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <ADC_Select_Channel>:
void ADC_Select_Channel(u8 Channal)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0B11100000;
    24da:	a7 e2       	ldi	r26, 0x27	; 39
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e7 e2       	ldi	r30, 0x27	; 39
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	80 7e       	andi	r24, 0xE0	; 224
    24e6:	8c 93       	st	X, r24
	ADMUX|=Channal;
    24e8:	a7 e2       	ldi	r26, 0x27	; 39
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e7 e2       	ldi	r30, 0x27	; 39
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	90 81       	ld	r25, Z
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	89 2b       	or	r24, r25
    24f6:	8c 93       	st	X, r24
}
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2508:	a6 e2       	ldi	r26, 0x26	; 38
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e6 e2       	ldi	r30, 0x26	; 38
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	88 60       	ori	r24, 0x08	; 8
    2514:	8c 93       	st	X, r24
}
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <ADC_Wait_Flag>:
void ADC_Wait_Flag(void)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(ADCSRA,ADIF)!=1); //WAIT UNTILL FLAG=1
    2524:	e6 e2       	ldi	r30, 0x26	; 38
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	82 95       	swap	r24
    252c:	8f 70       	andi	r24, 0x0F	; 15
    252e:	88 2f       	mov	r24, r24
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	81 70       	andi	r24, 0x01	; 1
    2534:	90 70       	andi	r25, 0x00	; 0
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	a9 f3       	breq	.-22     	; 0x2524 <ADC_Wait_Flag+0x8>
	SET_BIT(ADCSRA,ADIF);	  //CLEAR FLAG
    253a:	a6 e2       	ldi	r26, 0x26	; 38
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e6 e2       	ldi	r30, 0x26	; 38
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 61       	ori	r24, 0x10	; 16
    2546:	8c 93       	st	X, r24
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <ADC_Get_Result>:
void ADC_Get_Result(u16 *ptr)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <ADC_Get_Result+0x6>
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
	*ptr=ADC;
    255c:	e4 e2       	ldi	r30, 0x24	; 36
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <HLED_voidTurnOn>:
#include "../../MCAL/MDIO/MDIO_Interface.h"

#include "HLED_Interface.h"

void HLED_voidTurnOn (u8 Copy_u8LedPortId, u8 Copy_u8LedPinId)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <HLED_voidTurnOn+0x6>
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_u8SetPinDirection(Copy_u8LedPortId,Copy_u8LedPinId,DIO_u8_HIGH);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	6a 81       	ldd	r22, Y+2	; 0x02
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
	MDIO_u8SetPinValue(Copy_u8LedPortId,Copy_u8LedPinId,DIO_u8_HIGH);
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	6a 81       	ldd	r22, Y+2	; 0x02
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>

}
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <HLED_voidTurnOff>:
void HLED_voidTurnOff (u8 Copy_u8LedPortId, u8 Copy_u8LedPinId)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <HLED_voidTurnOff+0x6>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_u8SetPinDirection(Copy_u8LedPortId,Copy_u8LedPinId,DIO_u8_LOW);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	6a 81       	ldd	r22, Y+2	; 0x02
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
	MDIO_u8SetPinValue(Copy_u8LedPortId,Copy_u8LedPinId,DIO_u8_LOW);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	6a 81       	ldd	r22, Y+2	; 0x02
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <HLCD_VidInit>:




void HLCD_VidInit(void)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	e8 97       	sbiw	r28, 0x38	; 56
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a8 e4       	ldi	r26, 0x48	; 72
    25e8:	b2 e4       	ldi	r27, 0x42	; 66
    25ea:	8d ab       	std	Y+53, r24	; 0x35
    25ec:	9e ab       	std	Y+54, r25	; 0x36
    25ee:	af ab       	std	Y+55, r26	; 0x37
    25f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	6d a9       	ldd	r22, Y+53	; 0x35
    25f4:	7e a9       	ldd	r23, Y+54	; 0x36
    25f6:	8f a9       	ldd	r24, Y+55	; 0x37
    25f8:	98 ad       	ldd	r25, Y+56	; 0x38
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	89 ab       	std	Y+49, r24	; 0x31
    260c:	9a ab       	std	Y+50, r25	; 0x32
    260e:	ab ab       	std	Y+51, r26	; 0x33
    2610:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2612:	69 a9       	ldd	r22, Y+49	; 0x31
    2614:	7a a9       	ldd	r23, Y+50	; 0x32
    2616:	8b a9       	ldd	r24, Y+51	; 0x33
    2618:	9c a9       	ldd	r25, Y+52	; 0x34
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <HLCD_VidInit+0x66>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	98 ab       	std	Y+48, r25	; 0x30
    2630:	8f a7       	std	Y+47, r24	; 0x2f
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <HLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    2634:	69 a9       	ldd	r22, Y+49	; 0x31
    2636:	7a a9       	ldd	r23, Y+50	; 0x32
    2638:	8b a9       	ldd	r24, Y+51	; 0x33
    263a:	9c a9       	ldd	r25, Y+52	; 0x34
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <HLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	6d a9       	ldd	r22, Y+53	; 0x35
    264e:	7e a9       	ldd	r23, Y+54	; 0x36
    2650:	8f a9       	ldd	r24, Y+55	; 0x37
    2652:	98 ad       	ldd	r25, Y+56	; 0x38
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	98 ab       	std	Y+48, r25	; 0x30
    2672:	8f a7       	std	Y+47, r24	; 0x2f
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <HLCD_VidInit+0xc6>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2680:	9e a5       	ldd	r25, Y+46	; 0x2e
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <HLCD_VidInit+0xb4>
    2686:	9e a7       	std	Y+46, r25	; 0x2e
    2688:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8f a5       	ldd	r24, Y+47	; 0x2f
    268c:	98 a9       	ldd	r25, Y+48	; 0x30
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8f a5       	ldd	r24, Y+47	; 0x2f
    2696:	98 a9       	ldd	r25, Y+48	; 0x30
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <HLCD_VidInit+0xa8>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <HLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	69 a9       	ldd	r22, Y+49	; 0x31
    26a0:	7a a9       	ldd	r23, Y+50	; 0x32
    26a2:	8b a9       	ldd	r24, Y+51	; 0x33
    26a4:	9c a9       	ldd	r25, Y+52	; 0x34
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	98 ab       	std	Y+48, r25	; 0x30
    26b0:	8f a7       	std	Y+47, r24	; 0x2f
    26b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b4:	98 a9       	ldd	r25, Y+48	; 0x30
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
    26ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    26bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <HLCD_VidInit+0xf0>
    26c2:	9c a7       	std	Y+44, r25	; 0x2c
    26c4:	8b a7       	std	Y+43, r24	; 0x2b
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);

#elif MODE==8
	  /*set direction*/
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RS,DIO_u8_OUTPUT);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RW,DIO_u8_OUTPUT);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,EN,DIO_u8_OUTPUT);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
			MDIO_u8SetPortDirection(LCD_DATA_PORT,0XFF);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	6f ef       	ldi	r22, 0xFF	; 255
    26e8:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <MDIO_u8SetPortDirection>



		HLCD_VidWriteCommend(0B00111000);//function set
    26ec:	88 e3       	ldi	r24, 0x38	; 56
    26ee:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e8       	ldi	r26, 0x80	; 128
    26f8:	bf e3       	ldi	r27, 0x3F	; 63
    26fa:	8f a3       	std	Y+39, r24	; 0x27
    26fc:	98 a7       	std	Y+40, r25	; 0x28
    26fe:	a9 a7       	std	Y+41, r26	; 0x29
    2700:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	6f a1       	ldd	r22, Y+39	; 0x27
    2704:	78 a5       	ldd	r23, Y+40	; 0x28
    2706:	89 a5       	ldd	r24, Y+41	; 0x29
    2708:	9a a5       	ldd	r25, Y+42	; 0x2a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a ef       	ldi	r20, 0xFA	; 250
    2710:	54 e4       	ldi	r21, 0x44	; 68
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8b a3       	std	Y+35, r24	; 0x23
    271c:	9c a3       	std	Y+36, r25	; 0x24
    271e:	ad a3       	std	Y+37, r26	; 0x25
    2720:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2722:	6b a1       	ldd	r22, Y+35	; 0x23
    2724:	7c a1       	ldd	r23, Y+36	; 0x24
    2726:	8d a1       	ldd	r24, Y+37	; 0x25
    2728:	9e a1       	ldd	r25, Y+38	; 0x26
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <HLCD_VidInit+0x176>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <HLCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    2744:	6b a1       	ldd	r22, Y+35	; 0x23
    2746:	7c a1       	ldd	r23, Y+36	; 0x24
    2748:	8d a1       	ldd	r24, Y+37	; 0x25
    274a:	9e a1       	ldd	r25, Y+38	; 0x26
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <HLCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	6f a1       	ldd	r22, Y+39	; 0x27
    275e:	78 a5       	ldd	r23, Y+40	; 0x28
    2760:	89 a5       	ldd	r24, Y+41	; 0x29
    2762:	9a a5       	ldd	r25, Y+42	; 0x2a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9a a3       	std	Y+34, r25	; 0x22
    2782:	89 a3       	std	Y+33, r24	; 0x21
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <HLCD_VidInit+0x1d6>
    2786:	88 ec       	ldi	r24, 0xC8	; 200
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	98 a3       	std	Y+32, r25	; 0x20
    278c:	8f 8f       	std	Y+31, r24	; 0x1f
    278e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2790:	98 a1       	ldd	r25, Y+32	; 0x20
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <HLCD_VidInit+0x1c4>
    2796:	98 a3       	std	Y+32, r25	; 0x20
    2798:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	89 a1       	ldd	r24, Y+33	; 0x21
    279c:	9a a1       	ldd	r25, Y+34	; 0x22
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	89 a1       	ldd	r24, Y+33	; 0x21
    27a6:	9a a1       	ldd	r25, Y+34	; 0x22
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <HLCD_VidInit+0x1b8>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <HLCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	9e 8f       	std	Y+30, r25	; 0x1e
    27c8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <HLCD_VidInit+0x200>
    27d2:	9e 8f       	std	Y+30, r25	; 0x1e
    27d4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_VidWriteCommend(0B00001100);//screen on
    27d6:	8c e0       	ldi	r24, 0x0C	; 12
    27d8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e8       	ldi	r26, 0x80	; 128
    27e2:	bf e3       	ldi	r27, 0x3F	; 63
    27e4:	89 8f       	std	Y+25, r24	; 0x19
    27e6:	9a 8f       	std	Y+26, r25	; 0x1a
    27e8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	69 8d       	ldd	r22, Y+25	; 0x19
    27ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a ef       	ldi	r20, 0xFA	; 250
    27fa:	54 e4       	ldi	r21, 0x44	; 68
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8d 8b       	std	Y+21, r24	; 0x15
    2806:	9e 8b       	std	Y+22, r25	; 0x16
    2808:	af 8b       	std	Y+23, r26	; 0x17
    280a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    280c:	6d 89       	ldd	r22, Y+21	; 0x15
    280e:	7e 89       	ldd	r23, Y+22	; 0x16
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	2c f4       	brge	.+10     	; 0x282e <HLCD_VidInit+0x260>
		__ticks = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	3f c0       	rjmp	.+126    	; 0x28ac <HLCD_VidInit+0x2de>
	else if (__tmp > 65535)
    282e:	6d 89       	ldd	r22, Y+21	; 0x15
    2830:	7e 89       	ldd	r23, Y+22	; 0x16
    2832:	8f 89       	ldd	r24, Y+23	; 0x17
    2834:	98 8d       	ldd	r25, Y+24	; 0x18
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	3f ef       	ldi	r19, 0xFF	; 255
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	57 e4       	ldi	r21, 0x47	; 71
    283e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	4c f5       	brge	.+82     	; 0x2898 <HLCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	69 8d       	ldd	r22, Y+25	; 0x19
    2848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
    286e:	0f c0       	rjmp	.+30     	; 0x288e <HLCD_VidInit+0x2c0>
    2870:	88 ec       	ldi	r24, 0xC8	; 200
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9a 8b       	std	Y+18, r25	; 0x12
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	89 89       	ldd	r24, Y+17	; 0x11
    287a:	9a 89       	ldd	r25, Y+18	; 0x12
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <HLCD_VidInit+0x2ae>
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9c 8b       	std	Y+20, r25	; 0x14
    288c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	69 f7       	brne	.-38     	; 0x2870 <HLCD_VidInit+0x2a2>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <HLCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9c 8b       	std	Y+20, r25	; 0x14
    28aa:	8b 8b       	std	Y+19, r24	; 0x13
    28ac:	8b 89       	ldd	r24, Y+19	; 0x13
    28ae:	9c 89       	ldd	r25, Y+20	; 0x14
    28b0:	98 8b       	std	Y+16, r25	; 0x10
    28b2:	8f 87       	std	Y+15, r24	; 0x0f
    28b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b6:	98 89       	ldd	r25, Y+16	; 0x10
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <HLCD_VidInit+0x2ea>
    28bc:	98 8b       	std	Y+16, r25	; 0x10
    28be:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    HLCD_VidWriteCommend(0B00000001);//clear display
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a0 e0       	ldi	r26, 0x00	; 0
    28cc:	b0 e4       	ldi	r27, 0x40	; 64
    28ce:	8b 87       	std	Y+11, r24	; 0x0b
    28d0:	9c 87       	std	Y+12, r25	; 0x0c
    28d2:	ad 87       	std	Y+13, r26	; 0x0d
    28d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28da:	8d 85       	ldd	r24, Y+13	; 0x0d
    28dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a ef       	ldi	r20, 0xFA	; 250
    28e4:	54 e4       	ldi	r21, 0x44	; 68
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	8f 83       	std	Y+7, r24	; 0x07
    28f0:	98 87       	std	Y+8, r25	; 0x08
    28f2:	a9 87       	std	Y+9, r26	; 0x09
    28f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <HLCD_VidInit+0x34a>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <HLCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <HLCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <HLCD_VidInit+0x3aa>
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9c 83       	std	Y+4, r25	; 0x04
    2960:	8b 83       	std	Y+3, r24	; 0x03
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <HLCD_VidInit+0x398>
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <HLCD_VidInit+0x38c>
    2980:	14 c0       	rjmp	.+40     	; 0x29aa <HLCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <HLCD_VidInit+0x3d4>
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(2);
		HLCD_VidWriteCommend(0B00000010);//Return Home
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    29b0:	e8 96       	adiw	r28, 0x38	; 56
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <HLCD_VidWriteCommend>:
void HLCD_VidWriteCommend(u8 LCD_u8Commend)
{
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	6d 97       	sbiw	r28, 0x1d	; 29
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */

#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,0);  //RS=0
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    29f0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	62 e0       	ldi	r22, 0x02	; 2
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e4       	ldi	r27, 0x40	; 64
    2a06:	89 8f       	std	Y+25, r24	; 0x19
    2a08:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8d 8b       	std	Y+21, r24	; 0x15
    2a28:	9e 8b       	std	Y+22, r25	; 0x16
    2a2a:	af 8b       	std	Y+23, r26	; 0x17
    2a2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <HLCD_VidWriteCommend+0x8e>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 8b       	std	Y+20, r25	; 0x14
    2a4c:	8b 8b       	std	Y+19, r24	; 0x13
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <HLCD_VidWriteCommend+0x10c>
	else if (__tmp > 65535)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <HLCD_VidWriteCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <HLCD_VidWriteCommend+0xee>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a 8b       	std	Y+18, r25	; 0x12
    2a98:	89 8b       	std	Y+17, r24	; 0x11
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <HLCD_VidWriteCommend+0xdc>
    2aa2:	9a 8b       	std	Y+18, r25	; 0x12
    2aa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <HLCD_VidWriteCommend+0xd0>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <HLCD_VidWriteCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6d 89       	ldd	r22, Y+21	; 0x15
    2abc:	7e 89       	ldd	r23, Y+22	; 0x16
    2abe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	98 8b       	std	Y+16, r25	; 0x10
    2ad4:	8f 87       	std	Y+15, r24	; 0x0f
    2ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad8:	98 89       	ldd	r25, Y+16	; 0x10
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <HLCD_VidWriteCommend+0x118>
    2ade:	98 8b       	std	Y+16, r25	; 0x10
    2ae0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	62 e0       	ldi	r22, 0x02	; 2
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e8       	ldi	r26, 0x80	; 128
    2af2:	bf e3       	ldi	r27, 0x3F	; 63
    2af4:	8b 87       	std	Y+11, r24	; 0x0b
    2af6:	9c 87       	std	Y+12, r25	; 0x0c
    2af8:	ad 87       	std	Y+13, r26	; 0x0d
    2afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8f 83       	std	Y+7, r24	; 0x07
    2b16:	98 87       	std	Y+8, r25	; 0x08
    2b18:	a9 87       	std	Y+9, r26	; 0x09
    2b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1e:	78 85       	ldd	r23, Y+8	; 0x08
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <HLCD_VidWriteCommend+0x17c>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <HLCD_VidWriteCommend+0x1fa>
	else if (__tmp > 65535)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <HLCD_VidWriteCommend+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <HLCD_VidWriteCommend+0x1dc>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	8b 83       	std	Y+3, r24	; 0x03
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <HLCD_VidWriteCommend+0x1ca>
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <HLCD_VidWriteCommend+0x1be>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <HLCD_VidWriteCommend+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <HLCD_VidWriteCommend+0x206>
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2bd0:	6d 96       	adiw	r28, 0x1d	; 29
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <HLCD_VidWriteData>:
void HLCD_VidWriteData(u8 LCD_u8Data)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	6d 97       	sbiw	r28, 0x1d	; 29
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8Set4PinsValue(LCD_DATA_PORT,4,LCD_u8Data);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,1);  //RS=1
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c10:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	62 e0       	ldi	r22, 0x02	; 2
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e4       	ldi	r27, 0x40	; 64
    2c26:	89 8f       	std	Y+25, r24	; 0x19
    2c28:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 8b       	std	Y+21, r24	; 0x15
    2c48:	9e 8b       	std	Y+22, r25	; 0x16
    2c4a:	af 8b       	std	Y+23, r26	; 0x17
    2c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <HLCD_VidWriteData+0x8e>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <HLCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <HLCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <HLCD_VidWriteData+0xee>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <HLCD_VidWriteData+0xdc>
    2cc2:	9a 8b       	std	Y+18, r25	; 0x12
    2cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <HLCD_VidWriteData+0xd0>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <HLCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6d 89       	ldd	r22, Y+21	; 0x15
    2cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cde:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <HLCD_VidWriteData+0x118>
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	62 e0       	ldi	r22, 0x02	; 2
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e8       	ldi	r26, 0x80	; 128
    2d12:	bf e3       	ldi	r27, 0x3F	; 63
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <HLCD_VidWriteData+0x17c>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <HLCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <HLCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <HLCD_VidWriteData+0x1dc>
    2da0:	88 ec       	ldi	r24, 0xC8	; 200
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <HLCD_VidWriteData+0x1ca>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <HLCD_VidWriteData+0x1be>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <HLCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <HLCD_VidWriteData+0x206>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2df0:	6d 96       	adiw	r28, 0x1d	; 29
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <HLCD_VoidClearDisplay>:
void HLCD_VoidClearDisplay(void)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
#if	MODE==4
	HLCD_VidWriteCommend(0x01>>4);
	HLCD_VidWriteCommend(0x01);
#elif MODE==8
	HLCD_VidWriteCommend(0x01);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 ea       	ldi	r26, 0xA0	; 160
    2e22:	b1 e4       	ldi	r27, 0x41	; 65
    2e24:	8b 87       	std	Y+11, r24	; 0x0b
    2e26:	9c 87       	std	Y+12, r25	; 0x0c
    2e28:	ad 87       	std	Y+13, r26	; 0x0d
    2e2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a ef       	ldi	r20, 0xFA	; 250
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8f 83       	std	Y+7, r24	; 0x07
    2e46:	98 87       	std	Y+8, r25	; 0x08
    2e48:	a9 87       	std	Y+9, r26	; 0x09
    2e4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4e:	78 85       	ldd	r23, Y+8	; 0x08
    2e50:	89 85       	ldd	r24, Y+9	; 0x09
    2e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <HLCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <HLCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    2e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e70:	78 85       	ldd	r23, Y+8	; 0x08
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <HLCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e 83       	std	Y+6, r25	; 0x06
    2eac:	8d 83       	std	Y+5, r24	; 0x05
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <HLCD_VoidClearDisplay+0xcc>
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <HLCD_VoidClearDisplay+0xba>
    2ec0:	9c 83       	std	Y+4, r25	; 0x04
    2ec2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <HLCD_VoidClearDisplay+0xae>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <HLCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <HLCD_VoidClearDisplay+0xf6>
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2f00:	2e 96       	adiw	r28, 0x0e	; 14
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <HLCD_DisplayCharacter>:
void HLCD_DisplayCharacter(u8 Copy_u8Data)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	0f 92       	push	r0
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	89 83       	std	Y+1, r24	; 0x01
#if	MODE==4
	HLCD_VidWriteData(Copy_u8Data>>4);
	HLCD_VidWriteData(Copy_u8Data);
#elif MODE==8
	HLCD_VidWriteData(Copy_u8Data);
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <HLCD_VidWriteData>
#else
#error "WRONG CHOOSE THE MODE"
#endif
}
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <HLCD_DisplayString>:
void HLCD_DisplayString(u8* PCopy_u8String)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <HLCD_DisplayString+0x6>
    2f32:	0f 92       	push	r0
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_u8Count=0;
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	0e c0       	rjmp	.+28     	; 0x2f5c <HLCD_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	80 81       	ld	r24, Z
    2f52:	0e 94 89 17 	call	0x2f12	; 0x2f12 <HLCD_DisplayCharacter>
		Loc_u8Count++;
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	89 83       	std	Y+1, r24	; 0x01
}
void HLCD_DisplayString(u8* PCopy_u8String)
{

	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	9b 81       	ldd	r25, Y+3	; 0x03
    2f66:	fc 01       	movw	r30, r24
    2f68:	e2 0f       	add	r30, r18
    2f6a:	f3 1f       	adc	r31, r19
    2f6c:	80 81       	ld	r24, Z
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	29 f7       	brne	.-54     	; 0x2f40 <HLCD_DisplayString+0x14>
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}


}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <HLCD_VidWriteNumber>:
void HLCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	2c 97       	sbiw	r28, 0x0c	; 12
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	69 87       	std	Y+9, r22	; 0x09
    2fa0:	7a 87       	std	Y+10, r23	; 0x0a
    2fa2:	8b 87       	std	Y+11, r24	; 0x0b
    2fa4:	9c 87       	std	Y+12, r25	; 0x0c
    2fa6:	1d 82       	std	Y+5, r1	; 0x05
    2fa8:	1e 82       	std	Y+6, r1	; 0x06
    2faa:	1f 82       	std	Y+7, r1	; 0x07
    2fac:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    2fae:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fb6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	a1 05       	cpc	r26, r1
    2fbc:	b1 05       	cpc	r27, r1
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <HLCD_VidWriteNumber+0x40>
    2fc0:	46 c0       	rjmp	.+140    	; 0x304e <HLCD_VidWriteNumber+0xcc>
{
	HLCD_DisplayCharacter(48);
    2fc2:	80 e3       	ldi	r24, 0x30	; 48
    2fc4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <HLCD_DisplayCharacter>
    2fc8:	42 c0       	rjmp	.+132    	; 0x304e <HLCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	af 81       	ldd	r26, Y+7	; 0x07
    2fd0:	b8 85       	ldd	r27, Y+8	; 0x08
    2fd2:	2a e0       	ldi	r18, 0x0A	; 10
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    2fe2:	7b 01       	movw	r14, r22
    2fe4:	8c 01       	movw	r16, r24
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fec:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fee:	2a e0       	ldi	r18, 0x0A	; 10
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	8e 0d       	add	r24, r14
    3004:	9f 1d       	adc	r25, r15
    3006:	a0 1f       	adc	r26, r16
    3008:	b1 1f       	adc	r27, r17
    300a:	8d 83       	std	Y+5, r24	; 0x05
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	af 83       	std	Y+7, r26	; 0x07
    3010:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	af 81       	ldd	r26, Y+7	; 0x07
    3018:	b8 85       	ldd	r27, Y+8	; 0x08
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	a1 05       	cpc	r26, r1
    301e:	b1 05       	cpc	r27, r1
    3020:	21 f4       	brne	.+8      	; 0x302a <HLCD_VidWriteNumber+0xa8>
	{
		 y=0;
    3022:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	8f 5f       	subi	r24, 0xFF	; 255
    3028:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3030:	bc 85       	ldd	r27, Y+12	; 0x0c
    3032:	2a e0       	ldi	r18, 0x0A	; 10
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    3042:	da 01       	movw	r26, r20
    3044:	c9 01       	movw	r24, r18
    3046:	89 87       	std	Y+9, r24	; 0x09
    3048:	9a 87       	std	Y+10, r25	; 0x0a
    304a:	ab 87       	std	Y+11, r26	; 0x0b
    304c:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	HLCD_DisplayCharacter(48);
}
while(LOC_u32num>0)
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	ab 85       	ldd	r26, Y+11	; 0x0b
    3054:	bc 85       	ldd	r27, Y+12	; 0x0c
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	a1 05       	cpc	r26, r1
    305a:	b1 05       	cpc	r27, r1
    305c:	09 f0       	breq	.+2      	; 0x3060 <HLCD_VidWriteNumber+0xde>
    305e:	b5 cf       	rjmp	.-150    	; 0x2fca <HLCD_VidWriteNumber+0x48>
    3060:	25 c0       	rjmp	.+74     	; 0x30ac <HLCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	af 81       	ldd	r26, Y+7	; 0x07
    3068:	b8 85       	ldd	r27, Y+8	; 0x08
    306a:	2a e0       	ldi	r18, 0x0A	; 10
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_DisplayCharacter(res+48);
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	80 5d       	subi	r24, 0xD0	; 208
    3084:	0e 94 89 17 	call	0x2f12	; 0x2f12 <HLCD_DisplayCharacter>
	revrese=revrese/10;
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	af 81       	ldd	r26, Y+7	; 0x07
    308e:	b8 85       	ldd	r27, Y+8	; 0x08
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    30a0:	da 01       	movw	r26, r20
    30a2:	c9 01       	movw	r24, r18
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	af 83       	std	Y+7, r26	; 0x07
    30aa:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	9e 81       	ldd	r25, Y+6	; 0x06
    30b0:	af 81       	ldd	r26, Y+7	; 0x07
    30b2:	b8 85       	ldd	r27, Y+8	; 0x08
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	a1 05       	cpc	r26, r1
    30b8:	b1 05       	cpc	r27, r1
    30ba:	99 f6       	brne	.-90     	; 0x3062 <HLCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    30bc:	8c 81       	ldd	r24, Y+4	; 0x04
    30be:	88 23       	and	r24, r24
    30c0:	61 f4       	brne	.+24     	; 0x30da <HLCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	06 c0       	rjmp	.+12     	; 0x30d2 <HLCD_VidWriteNumber+0x150>
	{
		HLCD_DisplayCharacter(48);
    30c6:	80 e3       	ldi	r24, 0x30	; 48
    30c8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <HLCD_DisplayCharacter>
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	8f 5f       	subi	r24, 0xFF	; 255
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	99 81       	ldd	r25, Y+1	; 0x01
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	98 17       	cp	r25, r24
    30d8:	b0 f3       	brcs	.-20     	; 0x30c6 <HLCD_VidWriteNumber+0x144>
	{
		HLCD_DisplayCharacter(48);
	}
}
}
    30da:	2c 96       	adiw	r28, 0x0c	; 12
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	08 95       	ret

000030f4 <HLCD_SetPosition>:
void HLCD_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <HLCD_SetPosition+0x6>
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <HLCD_SetPosition+0x8>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber<=0)&&(Copy_u8PositionNumber<= 39))
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	88 23       	and	r24, r24
    3108:	d9 f4       	brne	.+54     	; 0x3140 <HLCD_SetPosition+0x4c>
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	88 32       	cpi	r24, 0x28	; 40
    310e:	c0 f4       	brcc	.+48     	; 0x3140 <HLCD_SetPosition+0x4c>
			HLCD_VidWriteCommend((192+Copy_u8PositionNumber));
			break;
		}

#elif MODE==8
		switch(Copy_u8LineNumber)
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	3c 83       	std	Y+4, r19	; 0x04
    3118:	2b 83       	std	Y+3, r18	; 0x03
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	9c 81       	ldd	r25, Y+4	; 0x04
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	31 f0       	breq	.+12     	; 0x312e <HLCD_SetPosition+0x3a>
    3122:	2b 81       	ldd	r18, Y+3	; 0x03
    3124:	3c 81       	ldd	r19, Y+4	; 0x04
    3126:	21 30       	cpi	r18, 0x01	; 1
    3128:	31 05       	cpc	r19, r1
    312a:	31 f0       	breq	.+12     	; 0x3138 <HLCD_SetPosition+0x44>
    312c:	09 c0       	rjmp	.+18     	; 0x3140 <HLCD_SetPosition+0x4c>
				{

				case LCD_u8_LINE0 : HLCD_VidWriteCommend(0x80 + Copy_u8PositionNumber);break;
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	80 58       	subi	r24, 0x80	; 128
    3132:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <HLCD_SetPosition+0x4c>

				case LCD_u8_LINE1 : HLCD_VidWriteCommend(0xC0 + Copy_u8PositionNumber);break;
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	80 54       	subi	r24, 0x40	; 64
    313c:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HLCD_VidWriteCommend>
#endif

	}


}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <HKEYPAD_VidInit>:
#include "HKeypad_Interface.h"



void HKEYPAD_VidInit(void)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
	/*we will set the first 4-pins as output by set 1 in direction*/
	 /*and set the second 4-pins as input by set 0 in direction*/
	MDIO_u8SetPortDirection ( DIO_Keypad,0b00001111);
    3156:	82 e0       	ldi	r24, 0x02	; 2
    3158:	6f e0       	ldi	r22, 0x0F	; 15
    315a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <MDIO_u8SetPortDirection>
	/*the 4 input pins we will activate pull up resistor */
	/*the 4 output pins we will set value as 1*/
	MDIO_u8SetPortValue	( DIO_Keypad, 0b11111111);
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	6f ef       	ldi	r22, 0xFF	; 255
    3162:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <MDIO_u8SetPortValue>
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <HKEYPAD_GET_PressedKey>:
u8 HKEYPAD_GET_PressedKey(void)
{   u8 keypad_array[4][4]={{ 1, 2, 3, 4},
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	a7 97       	sbiw	r28, 0x27	; 39
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
		                   { 5, 6, 7, 8},
						   { 9,10,11,12},
						   {13,14,15,16}};
    3180:	ce 01       	movw	r24, r28
    3182:	42 96       	adiw	r24, 0x12	; 18
    3184:	9c a3       	std	Y+36, r25	; 0x24
    3186:	8b a3       	std	Y+35, r24	; 0x23
    3188:	e3 e8       	ldi	r30, 0x83	; 131
    318a:	f1 e0       	ldi	r31, 0x01	; 1
    318c:	fe a3       	std	Y+38, r31	; 0x26
    318e:	ed a3       	std	Y+37, r30	; 0x25
    3190:	f0 e1       	ldi	r31, 0x10	; 16
    3192:	ff a3       	std	Y+39, r31	; 0x27
    3194:	ed a1       	ldd	r30, Y+37	; 0x25
    3196:	fe a1       	ldd	r31, Y+38	; 0x26
    3198:	00 80       	ld	r0, Z
    319a:	8d a1       	ldd	r24, Y+37	; 0x25
    319c:	9e a1       	ldd	r25, Y+38	; 0x26
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	9e a3       	std	Y+38, r25	; 0x26
    31a2:	8d a3       	std	Y+37, r24	; 0x25
    31a4:	eb a1       	ldd	r30, Y+35	; 0x23
    31a6:	fc a1       	ldd	r31, Y+36	; 0x24
    31a8:	00 82       	st	Z, r0
    31aa:	8b a1       	ldd	r24, Y+35	; 0x23
    31ac:	9c a1       	ldd	r25, Y+36	; 0x24
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	9c a3       	std	Y+36, r25	; 0x24
    31b2:	8b a3       	std	Y+35, r24	; 0x23
    31b4:	9f a1       	ldd	r25, Y+39	; 0x27
    31b6:	91 50       	subi	r25, 0x01	; 1
    31b8:	9f a3       	std	Y+39, r25	; 0x27
    31ba:	ef a1       	ldd	r30, Y+39	; 0x27
    31bc:	ee 23       	and	r30, r30
    31be:	51 f7       	brne	.-44     	; 0x3194 <HKEYPAD_GET_PressedKey+0x28>
	/*Columns for output pins*/
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
    31c0:	1f 86       	std	Y+15, r1	; 0x0f
	u8 copy_u8CheckPressed=1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	8a a3       	std	Y+34, r24	; 0x22
	for(col=0;col<4;col++)
    31c6:	19 8a       	std	Y+17, r1	; 0x11
    31c8:	b8 c0       	rjmp	.+368    	; 0x333a <HKEYPAD_GET_PressedKey+0x1ce>
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		MDIO_u8SetPinValue	( DIO_Keypad, col, 0);
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	69 89       	ldd	r22, Y+17	; 0x11
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
		for(row=4;row<8;row++)
    31d4:	84 e0       	ldi	r24, 0x04	; 4
    31d6:	88 8b       	std	Y+16, r24	; 0x10
    31d8:	a4 c0       	rjmp	.+328    	; 0x3322 <HKEYPAD_GET_PressedKey+0x1b6>
		{
			/*every time you change the column value */
			     /*you will check all Rows */
			/*if any Row his value changed that mean*/
				/*there is key is pressed*/
			MDIO_u8GetPinValue(DIO_Keypad,row,&copy_u8CheckPressed);
    31da:	9e 01       	movw	r18, r28
    31dc:	2e 5d       	subi	r18, 0xDE	; 222
    31de:	3f 4f       	sbci	r19, 0xFF	; 255
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	68 89       	ldd	r22, Y+16	; 0x10
    31e4:	a9 01       	movw	r20, r18
    31e6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MDIO_u8GetPinValue>
			if(copy_u8CheckPressed==0)
    31ea:	8a a1       	ldd	r24, Y+34	; 0x22
    31ec:	88 23       	and	r24, r24
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <HKEYPAD_GET_PressedKey+0x86>
    31f0:	95 c0       	rjmp	.+298    	; 0x331c <HKEYPAD_GET_PressedKey+0x1b0>
			{
				/*we will mapping between the pressed key*/
					/*and the value in keypad array*/
				keypad_out= keypad_array[row-4][col];
    31f2:	88 89       	ldd	r24, Y+16	; 0x10
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9c 01       	movw	r18, r24
    31fa:	24 50       	subi	r18, 0x04	; 4
    31fc:	30 40       	sbci	r19, 0x00	; 0
    31fe:	89 89       	ldd	r24, Y+17	; 0x11
    3200:	48 2f       	mov	r20, r24
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	22 0f       	add	r18, r18
    3206:	33 1f       	adc	r19, r19
    3208:	22 0f       	add	r18, r18
    320a:	33 1f       	adc	r19, r19
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	82 0f       	add	r24, r18
    3212:	93 1f       	adc	r25, r19
    3214:	84 0f       	add	r24, r20
    3216:	95 1f       	adc	r25, r21
    3218:	fc 01       	movw	r30, r24
    321a:	71 96       	adiw	r30, 0x11	; 17
    321c:	80 81       	ld	r24, Z
    321e:	8f 87       	std	Y+15, r24	; 0x0f
    3220:	08 c0       	rjmp	.+16     	; 0x3232 <HKEYPAD_GET_PressedKey+0xc6>
				/* if the key is still pressed you will not  */
				      /* go to for the next instruction*/

				while(copy_u8CheckPressed==0)
				{
					MDIO_u8GetPinValue(DIO_Keypad,row,&copy_u8CheckPressed);
    3222:	9e 01       	movw	r18, r28
    3224:	2e 5d       	subi	r18, 0xDE	; 222
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	82 e0       	ldi	r24, 0x02	; 2
    322a:	68 89       	ldd	r22, Y+16	; 0x10
    322c:	a9 01       	movw	r20, r18
    322e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MDIO_u8GetPinValue>
					/*and the value in keypad array*/
				keypad_out= keypad_array[row-4][col];
				/* if the key is still pressed you will not  */
				      /* go to for the next instruction*/

				while(copy_u8CheckPressed==0)
    3232:	8a a1       	ldd	r24, Y+34	; 0x22
    3234:	88 23       	and	r24, r24
    3236:	a9 f3       	breq	.-22     	; 0x3222 <HKEYPAD_GET_PressedKey+0xb6>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a8 e4       	ldi	r26, 0x48	; 72
    323e:	b2 e4       	ldi	r27, 0x42	; 66
    3240:	8b 87       	std	Y+11, r24	; 0x0b
    3242:	9c 87       	std	Y+12, r25	; 0x0c
    3244:	ad 87       	std	Y+13, r26	; 0x0d
    3246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3248:	6b 85       	ldd	r22, Y+11	; 0x0b
    324a:	7c 85       	ldd	r23, Y+12	; 0x0c
    324c:	8d 85       	ldd	r24, Y+13	; 0x0d
    324e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	4a ef       	ldi	r20, 0xFA	; 250
    3256:	54 e4       	ldi	r21, 0x44	; 68
    3258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	8f 83       	std	Y+7, r24	; 0x07
    3262:	98 87       	std	Y+8, r25	; 0x08
    3264:	a9 87       	std	Y+9, r26	; 0x09
    3266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3268:	6f 81       	ldd	r22, Y+7	; 0x07
    326a:	78 85       	ldd	r23, Y+8	; 0x08
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e8       	ldi	r20, 0x80	; 128
    3276:	5f e3       	ldi	r21, 0x3F	; 63
    3278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327c:	88 23       	and	r24, r24
    327e:	2c f4       	brge	.+10     	; 0x328a <HKEYPAD_GET_PressedKey+0x11e>
		__ticks = 1;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	3f c0       	rjmp	.+126    	; 0x3308 <HKEYPAD_GET_PressedKey+0x19c>
	else if (__tmp > 65535)
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	3f ef       	ldi	r19, 0xFF	; 255
    3296:	4f e7       	ldi	r20, 0x7F	; 127
    3298:	57 e4       	ldi	r21, 0x47	; 71
    329a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    329e:	18 16       	cp	r1, r24
    32a0:	4c f5       	brge	.+82     	; 0x32f4 <HKEYPAD_GET_PressedKey+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e2       	ldi	r20, 0x20	; 32
    32b0:	51 e4       	ldi	r21, 0x41	; 65
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	9e 83       	std	Y+6, r25	; 0x06
    32c8:	8d 83       	std	Y+5, r24	; 0x05
    32ca:	0f c0       	rjmp	.+30     	; 0x32ea <HKEYPAD_GET_PressedKey+0x17e>
    32cc:	88 ec       	ldi	r24, 0xC8	; 200
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9c 83       	std	Y+4, r25	; 0x04
    32d2:	8b 83       	std	Y+3, r24	; 0x03
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <HKEYPAD_GET_PressedKey+0x16c>
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	69 f7       	brne	.-38     	; 0x32cc <HKEYPAD_GET_PressedKey+0x160>
    32f2:	14 c0       	rjmp	.+40     	; 0x331c <HKEYPAD_GET_PressedKey+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f4:	6f 81       	ldd	r22, Y+7	; 0x07
    32f6:	78 85       	ldd	r23, Y+8	; 0x08
    32f8:	89 85       	ldd	r24, Y+9	; 0x09
    32fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	9a 83       	std	Y+2, r25	; 0x02
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <HKEYPAD_GET_PressedKey+0x1a8>
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
	for(col=0;col<4;col++)
	{
		/*we will activate only one column at time*/
			/*by change his value from 1 to 0*/
		MDIO_u8SetPinValue	( DIO_Keypad, col, 0);
		for(row=4;row<8;row++)
    331c:	88 89       	ldd	r24, Y+16	; 0x10
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	88 8b       	std	Y+16, r24	; 0x10
    3322:	88 89       	ldd	r24, Y+16	; 0x10
    3324:	88 30       	cpi	r24, 0x08	; 8
    3326:	08 f4       	brcc	.+2      	; 0x332a <HKEYPAD_GET_PressedKey+0x1be>
    3328:	58 cf       	rjmp	.-336    	; 0x31da <HKEYPAD_GET_PressedKey+0x6e>


		}
			  /*if you check in all rows in this column*/
		/*you need to deactivate it to go to the next column*/
		MDIO_u8SetPinValue	( DIO_Keypad, col, 1);
    332a:	82 e0       	ldi	r24, 0x02	; 2
    332c:	69 89       	ldd	r22, Y+17	; 0x11
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
	 /*Rows for input pins*/
	u8 col,row;
	/*keypad_out variable for Get the pressed switch*/
	u8 keypad_out=0;
	u8 copy_u8CheckPressed=1;
	for(col=0;col<4;col++)
    3334:	89 89       	ldd	r24, Y+17	; 0x11
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	89 8b       	std	Y+17, r24	; 0x11
    333a:	89 89       	ldd	r24, Y+17	; 0x11
    333c:	84 30       	cpi	r24, 0x04	; 4
    333e:	08 f4       	brcc	.+2      	; 0x3342 <HKEYPAD_GET_PressedKey+0x1d6>
    3340:	44 cf       	rjmp	.-376    	; 0x31ca <HKEYPAD_GET_PressedKey+0x5e>
		/*you need to deactivate it to go to the next column*/
		MDIO_u8SetPinValue	( DIO_Keypad, col, 1);
	}
/*if there is any switch is pressed the value of keypad_out variable*/
	/*will change from 0 to the mapping value in keypad_array*/
return keypad_out;
    3342:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3344:	a7 96       	adiw	r28, 0x27	; 39
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <HDIP_u8GetPressedKey>:
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "HDIP_SWITCH_Interface.h"


u8 HDIP_u8GetPressedKey (u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	00 d0       	rcall	.+0      	; 0x335c <HDIP_u8GetPressedKey+0x6>
    335c:	0f 92       	push	r0
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	8a 83       	std	Y+2, r24	; 0x02
    3364:	6b 83       	std	Y+3, r22	; 0x03
	u8 HDIP_SWITCH_state=0;
    3366:	19 82       	std	Y+1, r1	; 0x01
	/*set this pin as Input*/
	MDIO_u8SetPinDirection(Copy_u8PortId,Copy_u8PinId,DIO_u8_INPUT);
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	6b 81       	ldd	r22, Y+3	; 0x03
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <MDIO_u8SetPinDirection>
	/*Activate Pull up resistor*/
	MDIO_u8SetPinValue(Copy_u8PortId,Copy_u8PinId,DIO_u8_HIGH);
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	6b 81       	ldd	r22, Y+3	; 0x03
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	0e 94 8d 0c 	call	0x191a	; 0x191a <MDIO_u8SetPinValue>
	/*to get the state of the selected pin that connect with DIP Switch*/
	MDIO_u8GetPinValue(Copy_u8PortId,Copy_u8PinId,&HDIP_SWITCH_state);
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	6b 81       	ldd	r22, Y+3	; 0x03
    3380:	9e 01       	movw	r18, r28
    3382:	2f 5f       	subi	r18, 0xFF	; 255
    3384:	3f 4f       	sbci	r19, 0xFF	; 255
    3386:	a9 01       	movw	r20, r18
    3388:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <MDIO_u8GetPinValue>
	/*To return the State of DIP Switch*/
	return HDIP_SWITCH_state;
    338c:	89 81       	ldd	r24, Y+1	; 0x01

}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <HDIP_u8GetPressedKeys>:
u8 HDIP_u8GetPressedKeys (u8 Copy_u8PortId, u8 Copy_u8NumberOfPortPins)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <HDIP_u8GetPressedKeys+0x6>
    33a0:	0f 92       	push	r0
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	8a 83       	std	Y+2, r24	; 0x02
    33a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 HDIP_SWITCH_state=0;
    33aa:	19 82       	std	Y+1, r1	; 0x01


	return HDIP_SWITCH_state;
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <main>:

#include "../HAL/HLCD/HLCD_Interface.h"
#include "../HAL/HKeypad/HKeypad_Interface.h"
#include "../HAL/HDIP_SWITCH/HDIP_SWITCH_Interface.h"
int main(void)
{
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	2f 97       	sbiw	r28, 0x0f	; 15
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
	u8 Keypad_out=1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	8f 87       	std	Y+15, r24	; 0x0f
	/*LCD INITIALIZATION*/
	HLCD_VidInit();
    33d2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <HLCD_VidInit>
	HKEYPAD_VidInit();
    33d6:	0e 94 a7 18 	call	0x314e	; 0x314e <HKEYPAD_VidInit>
	HLCD_DisplayString("Welcome elsayed");
    33da:	80 e6       	ldi	r24, 0x60	; 96
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <HLCD_DisplayString>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	aa e7       	ldi	r26, 0x7A	; 122
    33e8:	b4 e4       	ldi	r27, 0x44	; 68
    33ea:	8b 87       	std	Y+11, r24	; 0x0b
    33ec:	9c 87       	std	Y+12, r25	; 0x0c
    33ee:	ad 87       	std	Y+13, r26	; 0x0d
    33f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	4a ef       	ldi	r20, 0xFA	; 250
    3400:	54 e4       	ldi	r21, 0x44	; 68
    3402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	8f 83       	std	Y+7, r24	; 0x07
    340c:	98 87       	std	Y+8, r25	; 0x08
    340e:	a9 87       	std	Y+9, r26	; 0x09
    3410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e8       	ldi	r20, 0x80	; 128
    3420:	5f e3       	ldi	r21, 0x3F	; 63
    3422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3426:	88 23       	and	r24, r24
    3428:	2c f4       	brge	.+10     	; 0x3434 <main+0x7a>
		__ticks = 1;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	3f c0       	rjmp	.+126    	; 0x34b2 <main+0xf8>
	else if (__tmp > 65535)
    3434:	6f 81       	ldd	r22, Y+7	; 0x07
    3436:	78 85       	ldd	r23, Y+8	; 0x08
    3438:	89 85       	ldd	r24, Y+9	; 0x09
    343a:	9a 85       	ldd	r25, Y+10	; 0x0a
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	3f ef       	ldi	r19, 0xFF	; 255
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	57 e4       	ldi	r21, 0x47	; 71
    3444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	4c f5       	brge	.+82     	; 0x349e <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344c:	6b 85       	ldd	r22, Y+11	; 0x0b
    344e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3450:	8d 85       	ldd	r24, Y+13	; 0x0d
    3452:	9e 85       	ldd	r25, Y+14	; 0x0e
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e2       	ldi	r20, 0x20	; 32
    345a:	51 e4       	ldi	r21, 0x41	; 65
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	0f c0       	rjmp	.+30     	; 0x3494 <main+0xda>
    3476:	88 ec       	ldi	r24, 0xC8	; 200
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9c 83       	std	Y+4, r25	; 0x04
    347c:	8b 83       	std	Y+3, r24	; 0x03
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	9c 81       	ldd	r25, Y+4	; 0x04
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <main+0xc8>
    3486:	9c 83       	std	Y+4, r25	; 0x04
    3488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	9e 83       	std	Y+6, r25	; 0x06
    3492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	69 f7       	brne	.-38     	; 0x3476 <main+0xbc>
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	9a 81       	ldd	r25, Y+2	; 0x02
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <main+0x104>
    34c2:	9a 83       	std	Y+2, r25	; 0x02
    34c4:	89 83       	std	Y+1, r24	; 0x01
	//HLCD_VidWriteData('A');
	_delay_ms(1000);
	HLCD_VoidClearDisplay();
    34c6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <HLCD_VoidClearDisplay>
	while(1)
	{
		Keypad_out=HKEYPAD_GET_PressedKey();
    34ca:	0e 94 b6 18 	call	0x316c	; 0x316c <HKEYPAD_GET_PressedKey>
    34ce:	8f 87       	std	Y+15, r24	; 0x0f
		if(Keypad_out!=0)
    34d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d2:	88 23       	and	r24, r24
    34d4:	89 f0       	breq	.+34     	; 0x34f8 <main+0x13e>
		{
			HLCD_SetPosition(0,0);
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HLCD_SetPosition>
			HLCD_DisplayString("the value=");
    34de:	80 e7       	ldi	r24, 0x70	; 112
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <HLCD_DisplayString>
			HLCD_VidWriteNumber(Keypad_out);
    34e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <HLCD_VidWriteNumber>
		}
		Keypad_out=0;
    34f8:	1f 86       	std	Y+15, r1	; 0x0f
    34fa:	e7 cf       	rjmp	.-50     	; 0x34ca <main+0x110>

000034fc <__mulsi3>:
    34fc:	62 9f       	mul	r22, r18
    34fe:	d0 01       	movw	r26, r0
    3500:	73 9f       	mul	r23, r19
    3502:	f0 01       	movw	r30, r0
    3504:	82 9f       	mul	r24, r18
    3506:	e0 0d       	add	r30, r0
    3508:	f1 1d       	adc	r31, r1
    350a:	64 9f       	mul	r22, r20
    350c:	e0 0d       	add	r30, r0
    350e:	f1 1d       	adc	r31, r1
    3510:	92 9f       	mul	r25, r18
    3512:	f0 0d       	add	r31, r0
    3514:	83 9f       	mul	r24, r19
    3516:	f0 0d       	add	r31, r0
    3518:	74 9f       	mul	r23, r20
    351a:	f0 0d       	add	r31, r0
    351c:	65 9f       	mul	r22, r21
    351e:	f0 0d       	add	r31, r0
    3520:	99 27       	eor	r25, r25
    3522:	72 9f       	mul	r23, r18
    3524:	b0 0d       	add	r27, r0
    3526:	e1 1d       	adc	r30, r1
    3528:	f9 1f       	adc	r31, r25
    352a:	63 9f       	mul	r22, r19
    352c:	b0 0d       	add	r27, r0
    352e:	e1 1d       	adc	r30, r1
    3530:	f9 1f       	adc	r31, r25
    3532:	bd 01       	movw	r22, r26
    3534:	cf 01       	movw	r24, r30
    3536:	11 24       	eor	r1, r1
    3538:	08 95       	ret

0000353a <__udivmodsi4>:
    353a:	a1 e2       	ldi	r26, 0x21	; 33
    353c:	1a 2e       	mov	r1, r26
    353e:	aa 1b       	sub	r26, r26
    3540:	bb 1b       	sub	r27, r27
    3542:	fd 01       	movw	r30, r26
    3544:	0d c0       	rjmp	.+26     	; 0x3560 <__udivmodsi4_ep>

00003546 <__udivmodsi4_loop>:
    3546:	aa 1f       	adc	r26, r26
    3548:	bb 1f       	adc	r27, r27
    354a:	ee 1f       	adc	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	a2 17       	cp	r26, r18
    3550:	b3 07       	cpc	r27, r19
    3552:	e4 07       	cpc	r30, r20
    3554:	f5 07       	cpc	r31, r21
    3556:	20 f0       	brcs	.+8      	; 0x3560 <__udivmodsi4_ep>
    3558:	a2 1b       	sub	r26, r18
    355a:	b3 0b       	sbc	r27, r19
    355c:	e4 0b       	sbc	r30, r20
    355e:	f5 0b       	sbc	r31, r21

00003560 <__udivmodsi4_ep>:
    3560:	66 1f       	adc	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	1a 94       	dec	r1
    356a:	69 f7       	brne	.-38     	; 0x3546 <__udivmodsi4_loop>
    356c:	60 95       	com	r22
    356e:	70 95       	com	r23
    3570:	80 95       	com	r24
    3572:	90 95       	com	r25
    3574:	9b 01       	movw	r18, r22
    3576:	ac 01       	movw	r20, r24
    3578:	bd 01       	movw	r22, r26
    357a:	cf 01       	movw	r24, r30
    357c:	08 95       	ret

0000357e <__prologue_saves__>:
    357e:	2f 92       	push	r2
    3580:	3f 92       	push	r3
    3582:	4f 92       	push	r4
    3584:	5f 92       	push	r5
    3586:	6f 92       	push	r6
    3588:	7f 92       	push	r7
    358a:	8f 92       	push	r8
    358c:	9f 92       	push	r9
    358e:	af 92       	push	r10
    3590:	bf 92       	push	r11
    3592:	cf 92       	push	r12
    3594:	df 92       	push	r13
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	ca 1b       	sub	r28, r26
    35a8:	db 0b       	sbc	r29, r27
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	09 94       	ijmp

000035b6 <__epilogue_restores__>:
    35b6:	2a 88       	ldd	r2, Y+18	; 0x12
    35b8:	39 88       	ldd	r3, Y+17	; 0x11
    35ba:	48 88       	ldd	r4, Y+16	; 0x10
    35bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    35be:	6e 84       	ldd	r6, Y+14	; 0x0e
    35c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35c8:	b9 84       	ldd	r11, Y+9	; 0x09
    35ca:	c8 84       	ldd	r12, Y+8	; 0x08
    35cc:	df 80       	ldd	r13, Y+7	; 0x07
    35ce:	ee 80       	ldd	r14, Y+6	; 0x06
    35d0:	fd 80       	ldd	r15, Y+5	; 0x05
    35d2:	0c 81       	ldd	r16, Y+4	; 0x04
    35d4:	1b 81       	ldd	r17, Y+3	; 0x03
    35d6:	aa 81       	ldd	r26, Y+2	; 0x02
    35d8:	b9 81       	ldd	r27, Y+1	; 0x01
    35da:	ce 0f       	add	r28, r30
    35dc:	d1 1d       	adc	r29, r1
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	ed 01       	movw	r28, r26
    35ea:	08 95       	ret

000035ec <_exit>:
    35ec:	f8 94       	cli

000035ee <__stop_program>:
    35ee:	ff cf       	rjmp	.-2      	; 0x35ee <__stop_program>
