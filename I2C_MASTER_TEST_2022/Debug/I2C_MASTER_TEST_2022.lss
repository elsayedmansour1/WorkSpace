
I2C_MASTER_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000290a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000290a  0000297e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002100  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e17  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000058af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000059ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000077a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008693  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000095a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000982d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009ffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 dd 12 	call	0x25ba	; 0x25ba <main>
      7a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_register.h"
#include "TWI_config.h"

void TWI_voidMasterInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* Set Prescaler Value */
	CLR_BIT(TWSR,1);
     b3e:	a1 e2       	ldi	r26, 0x21	; 33
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e1 e2       	ldi	r30, 0x21	; 33
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     b4c:	a1 e2       	ldi	r26, 0x21	; 33
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e1 e2       	ldi	r30, 0x21	; 33
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	8c 93       	st	X, r24
	
	/* Set TWBR Value 200KHZ */
	TWBR = 12;
     b5a:	e0 e2       	ldi	r30, 0x20	; 32
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8c e0       	ldi	r24, 0x0C	; 12
     b60:	80 83       	st	Z, r24
	
	/* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     b62:	a6 e5       	ldi	r26, 0x56	; 86
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e6 e5       	ldi	r30, 0x56	; 86
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 64       	ori	r24, 0x40	; 64
     b6e:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     b70:	a6 e5       	ldi	r26, 0x56	; 86
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e6 e5       	ldi	r30, 0x56	; 86
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	84 60       	ori	r24, 0x04	; 4
     b7c:	8c 93       	st	X, r24
}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <TWI_u8SlaveInit>:

void   TWI_u8SlaveInit(u8 Copy_u8SlaveAddress)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01
	//u8 Local_u8ErrorState = STD_TYPES_OK;
	/* Set Slave Adress IN TWAR REG */
	TWAR = Copy_u8SlaveAddress << 1;
     b90:	e2 e2       	ldi	r30, 0x22	; 34
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 0f       	add	r24, r24
     b98:	80 83       	st	Z, r24
	
    /* Enable ACKnowledgemnet */
	SET_BIT(TWCR,6);
     b9a:	a6 e5       	ldi	r26, 0x56	; 86
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e6 e5       	ldi	r30, 0x56	; 86
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 64       	ori	r24, 0x40	; 64
     ba6:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWCR,2);
     ba8:	a6 e5       	ldi	r26, 0x56	; 86
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e6 e5       	ldi	r30, 0x56	; 86
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	84 60       	ori	r24, 0x04	; 4
     bb4:	8c 93       	st	X, r24
}
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <TWI_enuSendStartCondition>:

TWI_ErrorState   TWI_enuSendStartCondition(void)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	0f 92       	push	r0
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     bcc:	a6 e5       	ldi	r26, 0x56	; 86
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e6 e5       	ldi	r30, 0x56	; 86
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 62       	ori	r24, 0x20	; 32
     bd8:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     bda:	a6 e5       	ldi	r26, 0x56	; 86
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e5       	ldi	r30, 0x56	; 86
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     be8:	e6 e5       	ldi	r30, 0x56	; 86
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	dc f7       	brge	.-10     	; 0xbe8 <TWI_enuSendStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x08 )
     bf2:	e1 e2       	ldi	r30, 0x21	; 33
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	88 7f       	andi	r24, 0xF8	; 248
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	88 30       	cpi	r24, 0x08	; 8
     c02:	91 05       	cpc	r25, r1
     c04:	11 f0       	breq	.+4      	; 0xc0a <TWI_enuSendStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_SC_ERROR;
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <TWI_enuSendRepeatedStartCondition>:

TWI_ErrorState   TWI_enuSendRepeatedStartCondition(void)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition */
	SET_BIT(TWCR,5);
     c22:	a6 e5       	ldi	r26, 0x56	; 86
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e6 e5       	ldi	r30, 0x56	; 86
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 62       	ori	r24, 0x20	; 32
     c2e:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     c30:	a6 e5       	ldi	r26, 0x56	; 86
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e6 e5       	ldi	r30, 0x56	; 86
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     c3e:	e6 e5       	ldi	r30, 0x56	; 86
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	88 23       	and	r24, r24
     c46:	dc f7       	brge	.-10     	; 0xc3e <TWI_enuSendRepeatedStartCondition+0x2a>
	
	/* Check ACKnowledgemnt => START CONDITION */
	if((TWSR & 0xF8) != 0x10 )
     c48:	e1 e2       	ldi	r30, 0x21	; 33
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 7f       	andi	r24, 0xF8	; 248
     c54:	90 70       	andi	r25, 0x00	; 0
     c56:	80 31       	cpi	r24, 0x10	; 16
     c58:	91 05       	cpc	r25, r1
     c5a:	11 f0       	breq	.+4      	; 0xc60 <TWI_enuSendRepeatedStartCondition+0x4c>
	{
		Local_enuErrorState = TWI_RSC_ERROR;
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c60:	89 81       	ldd	r24, Y+1	; 0x01
}
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <TWI_enuSendSlaveWithWrite>:

TWI_ErrorState   TWI_enuSendSlaveWithWrite(u8 Copy_u8SlaveAddress)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <TWI_enuSendSlaveWithWrite+0x6>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     c7a:	e3 e2       	ldi	r30, 0x23	; 35
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	88 0f       	add	r24, r24
     c82:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
     c84:	a3 e2       	ldi	r26, 0x23	; 35
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e2       	ldi	r30, 0x23	; 35
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     c92:	a6 e5       	ldi	r26, 0x56	; 86
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e5       	ldi	r30, 0x56	; 86
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 7d       	andi	r24, 0xDF	; 223
     c9e:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     ca0:	a6 e5       	ldi	r26, 0x56	; 86
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e6 e5       	ldi	r30, 0x56	; 86
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 68       	ori	r24, 0x80	; 128
     cac:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     cae:	e6 e5       	ldi	r30, 0x56	; 86
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	dc f7       	brge	.-10     	; 0xcae <TWI_enuSendSlaveWithWrite+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x18 )
     cb8:	e1 e2       	ldi	r30, 0x21	; 33
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	88 7f       	andi	r24, 0xF8	; 248
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	88 31       	cpi	r24, 0x18	; 24
     cc8:	91 05       	cpc	r25, r1
     cca:	11 f0       	breq	.+4      	; 0xcd0 <TWI_enuSendSlaveWithWrite+0x66>
	{
		Local_enuErrorState = TWI_SLA_W_ERROR;
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <TWI_enuSendSlaveWithRead>:

TWI_ErrorState   TWI_enuSendSlaveWithRead(u8 Copy_u8SlaveAddress)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <TWI_enuSendSlaveWithRead+0x6>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = SL Address + Write*/
	TWDR = Copy_u8SlaveAddress << 1;
     cec:	e3 e2       	ldi	r30, 0x23	; 35
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	88 0f       	add	r24, r24
     cf4:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
     cf6:	a3 e2       	ldi	r26, 0x23	; 35
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e2       	ldi	r30, 0x23	; 35
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	8c 93       	st	X, r24
	/* Clear Start Condition */
	CLR_BIT(TWCR,5);
     d04:	a6 e5       	ldi	r26, 0x56	; 86
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 7d       	andi	r24, 0xDF	; 223
     d10:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     d12:	a6 e5       	ldi	r26, 0x56	; 86
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e6 e5       	ldi	r30, 0x56	; 86
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	8c 93       	st	X, r24
	
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     d20:	e6 e5       	ldi	r30, 0x56	; 86
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 23       	and	r24, r24
     d28:	dc f7       	brge	.-10     	; 0xd20 <TWI_enuSendSlaveWithRead+0x44>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x40 )
     d2a:	e1 e2       	ldi	r30, 0x21	; 33
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	88 7f       	andi	r24, 0xF8	; 248
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	80 34       	cpi	r24, 0x40	; 64
     d3a:	91 05       	cpc	r25, r1
     d3c:	11 f0       	breq	.+4      	; 0xd42 <TWI_enuSendSlaveWithRead+0x66>
	{
		Local_enuErrorState = TWI_SLA_R_ERROR;
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <TWI_enuSendDataByte>:

TWI_ErrorState   TWI_enuSendDataByte(u8 Copy_u8Data)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <TWI_enuSendDataByte+0x6>
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
	/* Set TWDR = Data + Read*/
	TWDR = Copy_u8Data;
     d5e:	e3 e2       	ldi	r30, 0x23	; 35
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	80 83       	st	Z, r24

	/* Clear Flag */
	//SET_BIT(TWCR,7);
	TWCR = (1<<7) | (1<<2);
     d66:	e6 e5       	ldi	r30, 0x56	; 86
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	84 e8       	ldi	r24, 0x84	; 132
     d6c:	80 83       	st	Z, r24
	/* Wait for the Flag */
	while(!(GET_BIT(TWCR,7)));
     d6e:	e6 e5       	ldi	r30, 0x56	; 86
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 23       	and	r24, r24
     d76:	dc f7       	brge	.-10     	; 0xd6e <TWI_enuSendDataByte+0x20>
	
	/* Check ACKnowledgemnt => Slave Address + W */
	if((TWSR & 0xF8) != 0x28 )
     d78:	e1 e2       	ldi	r30, 0x21	; 33
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 7f       	andi	r24, 0xF8	; 248
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	88 32       	cpi	r24, 0x28	; 40
     d88:	91 05       	cpc	r25, r1
     d8a:	11 f0       	breq	.+4      	; 0xd90 <TWI_enuSendDataByte+0x42>
	{
		Local_enuErrorState = TWI_DATA_W_ERROR;
     d8c:	86 e0       	ldi	r24, 0x06	; 6
     d8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TWI_enuReceiveDataByte>:

TWI_ErrorState   TWI_enuReceiveDataByte(u8 * Copy_pu8ReceivedData)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <TWI_enuReceiveDataByte+0x6>
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	9b 83       	std	Y+3, r25	; 0x03
     daa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Local_enuErrorState = TWI_OK;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01

	/* Check pointer */
	if(Copy_pu8ReceivedData != NULL)
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	01 f1       	breq	.+64     	; 0xdf8 <TWI_enuReceiveDataByte+0x5c>
	{

		/* Clear Flag */
		SET_BIT(TWCR,7);
     db8:	a6 e5       	ldi	r26, 0x56	; 86
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e6 e5       	ldi	r30, 0x56	; 86
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	8c 93       	st	X, r24

		/* Wait for the Flag */
		while(!(GET_BIT(TWCR,7)));
     dc6:	e6 e5       	ldi	r30, 0x56	; 86
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 23       	and	r24, r24
     dce:	dc f7       	brge	.-10     	; 0xdc6 <TWI_enuReceiveDataByte+0x2a>

		/* Check ACKnowledgemnt => Slave Address + W */
		if((TWSR & 0xF8) != 0x50 )
     dd0:	e1 e2       	ldi	r30, 0x21	; 33
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	88 7f       	andi	r24, 0xF8	; 248
     ddc:	90 70       	andi	r25, 0x00	; 0
     dde:	80 35       	cpi	r24, 0x50	; 80
     de0:	91 05       	cpc	r25, r1
     de2:	19 f0       	breq	.+6      	; 0xdea <TWI_enuReceiveDataByte+0x4e>
		{
			Local_enuErrorState = TWI_DATA_R_ERROR;
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <TWI_enuReceiveDataByte+0x60>
		}
		else
		{
			/* Read Data */
			*Copy_pu8ReceivedData = TWDR;
     dea:	e3 e2       	ldi	r30, 0x23	; 35
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	ea 81       	ldd	r30, Y+2	; 0x02
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
     df4:	80 83       	st	Z, r24
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <TWI_enuReceiveDataByte+0x60>
		}
	}
	else
	{
		Local_enuErrorState = TWI_NULL_POINTER;
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_enuErrorState;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	/* Send Stop Condition */
	SET_BIT(TWCR,4);
     e12:	a6 e5       	ldi	r26, 0x56	; 86
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e6 e5       	ldi	r30, 0x56	; 86
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 61       	ori	r24, 0x10	; 16
     e1e:	8c 93       	st	X, r24
	
	/* Clear Flag */
	SET_BIT(TWCR,7);
     e20:	a6 e5       	ldi	r26, 0x56	; 86
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c 93       	st	X, r24
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <DIO_VidSetPinDirection>:




void DIO_VidSetPinDirection	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8State)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	27 97       	sbiw	r28, 0x07	; 7
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	6a 83       	std	Y+2, r22	; 0x02
     e4c:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8State==OUTPUT)
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	09 f0       	breq	.+2      	; 0xe56 <DIO_VidSetPinDirection+0x22>
     e54:	6f c0       	rjmp	.+222    	; 0xf34 <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3f 83       	std	Y+7, r19	; 0x07
     e5e:	2e 83       	std	Y+6, r18	; 0x06
     e60:	8e 81       	ldd	r24, Y+6	; 0x06
     e62:	9f 81       	ldd	r25, Y+7	; 0x07
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	49 f1       	breq	.+82     	; 0xebc <DIO_VidSetPinDirection+0x88>
     e6a:	2e 81       	ldd	r18, Y+6	; 0x06
     e6c:	3f 81       	ldd	r19, Y+7	; 0x07
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	2c f4       	brge	.+10     	; 0xe7e <DIO_VidSetPinDirection+0x4a>
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	61 f0       	breq	.+24     	; 0xe94 <DIO_VidSetPinDirection+0x60>
     e7c:	d2 c0       	rjmp	.+420    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
     e7e:	2e 81       	ldd	r18, Y+6	; 0x06
     e80:	3f 81       	ldd	r19, Y+7	; 0x07
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	71 f1       	breq	.+92     	; 0xee4 <DIO_VidSetPinDirection+0xb0>
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	9f 81       	ldd	r25, Y+7	; 0x07
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	e9 f1       	breq	.+122    	; 0xf0c <DIO_VidSetPinDirection+0xd8>
     e92:	c7 c0       	rjmp	.+398    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:SET_BIT(DDRA,LOC_u8PinNumber);break;
     e94:	aa e3       	ldi	r26, 0x3A	; 58
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e3       	ldi	r30, 0x3A	; 58
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_VidSetPinDirection+0x7e>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_VidSetPinDirection+0x7a>
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	b3 c0       	rjmp	.+358    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:SET_BIT(DDRB,LOC_u8PinNumber);break;
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_VidSetPinDirection+0xa6>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_VidSetPinDirection+0xa2>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	9f c0       	rjmp	.+318    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:SET_BIT(DDRC,LOC_u8PinNumber);break;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_VidSetPinDirection+0xce>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_VidSetPinDirection+0xca>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	8b c0       	rjmp	.+278    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:SET_BIT(DDRD,LOC_u8PinNumber);break;	
     f0c:	a1 e3       	ldi	r26, 0x31	; 49
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e3       	ldi	r30, 0x31	; 49
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinDirection+0xf6>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinDirection+0xf2>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	77 c0       	rjmp	.+238    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8State==INPUT)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	88 23       	and	r24, r24
     f38:	09 f0       	breq	.+2      	; 0xf3c <DIO_VidSetPinDirection+0x108>
     f3a:	73 c0       	rjmp	.+230    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3d 83       	std	Y+5, r19	; 0x05
     f44:	2c 83       	std	Y+4, r18	; 0x04
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	59 f1       	breq	.+86     	; 0xfa6 <DIO_VidSetPinDirection+0x172>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	2c f4       	brge	.+10     	; 0xf64 <DIO_VidSetPinDirection+0x130>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f0       	breq	.+26     	; 0xf7c <DIO_VidSetPinDirection+0x148>
     f62:	5f c0       	rjmp	.+190    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	89 f1       	breq	.+98     	; 0xfd0 <DIO_VidSetPinDirection+0x19c>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <DIO_VidSetPinDirection+0x146>
     f78:	40 c0       	rjmp	.+128    	; 0xffa <DIO_VidSetPinDirection+0x1c6>
     f7a:	53 c0       	rjmp	.+166    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(DDRA,LOC_u8PinNumber);break;
     f7c:	aa e3       	ldi	r26, 0x3A	; 58
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e3       	ldi	r30, 0x3A	; 58
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_VidSetPinDirection+0x166>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_VidSetPinDirection+0x162>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	3e c0       	rjmp	.+124    	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTB:CLR_BIT(DDRB,LOC_u8PinNumber);break;
     fa6:	a7 e3       	ldi	r26, 0x37	; 55
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e3       	ldi	r30, 0x37	; 55
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_VidSetPinDirection+0x190>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_VidSetPinDirection+0x18c>
     fc8:	80 95       	com	r24
     fca:	84 23       	and	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	29 c0       	rjmp	.+82     	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTC:CLR_BIT(DDRC,LOC_u8PinNumber);break;
     fd0:	a4 e3       	ldi	r26, 0x34	; 52
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e4 e3       	ldi	r30, 0x34	; 52
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_VidSetPinDirection+0x1ba>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_VidSetPinDirection+0x1b6>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <DIO_VidSetPinDirection+0x1ee>
		case DIO_PORTD:CLR_BIT(DDRD,LOC_u8PinNumber);break;	
     ffa:	a1 e3       	ldi	r26, 0x31	; 49
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e1 e3       	ldi	r30, 0x31	; 49
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_VidSetPinDirection+0x1e4>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_VidSetPinDirection+0x1e0>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
		}	
	}
	else{}
	
}
    1022:	27 96       	adiw	r28, 0x07	; 7
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <DIO_VidSetPinValue>:
void DIO_VidSetPinValue	(u8 LOC_u8Port,u8 LOC_u8PinNumber,u8 LOC_u8Value)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	27 97       	sbiw	r28, 0x07	; 7
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
    104c:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Value==HIGH)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	09 f0       	breq	.+2      	; 0x1056 <DIO_VidSetPinValue+0x22>
    1054:	6f c0       	rjmp	.+222    	; 0x1134 <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3f 83       	std	Y+7, r19	; 0x07
    105e:	2e 83       	std	Y+6, r18	; 0x06
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
    1062:	9f 81       	ldd	r25, Y+7	; 0x07
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 05       	cpc	r25, r1
    1068:	49 f1       	breq	.+82     	; 0x10bc <DIO_VidSetPinValue+0x88>
    106a:	2e 81       	ldd	r18, Y+6	; 0x06
    106c:	3f 81       	ldd	r19, Y+7	; 0x07
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <DIO_VidSetPinValue+0x4a>
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <DIO_VidSetPinValue+0x60>
    107c:	d2 c0       	rjmp	.+420    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	71 f1       	breq	.+92     	; 0x10e4 <DIO_VidSetPinValue+0xb0>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	e9 f1       	breq	.+122    	; 0x110c <DIO_VidSetPinValue+0xd8>
    1092:	c7 c0       	rjmp	.+398    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:SET_BIT(PORTA,LOC_u8PinNumber);break;
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_VidSetPinValue+0x7e>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_VidSetPinValue+0x7a>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	b3 c0       	rjmp	.+358    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:SET_BIT(PORTB,LOC_u8PinNumber);break;
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_VidSetPinValue+0xa6>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_VidSetPinValue+0xa2>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	9f c0       	rjmp	.+318    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:SET_BIT(PORTC,LOC_u8PinNumber);break;
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_VidSetPinValue+0xce>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_VidSetPinValue+0xca>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	8b c0       	rjmp	.+278    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:SET_BIT(PORTD,LOC_u8PinNumber);break;	
    110c:	a2 e3       	ldi	r26, 0x32	; 50
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e2 e3       	ldi	r30, 0x32	; 50
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_VidSetPinValue+0xf6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_VidSetPinValue+0xf2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	77 c0       	rjmp	.+238    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOC_u8Value==LOW)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <DIO_VidSetPinValue+0x108>
    113a:	73 c0       	rjmp	.+230    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	59 f1       	breq	.+86     	; 0x11a6 <DIO_VidSetPinValue+0x172>
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <DIO_VidSetPinValue+0x130>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	69 f0       	breq	.+26     	; 0x117c <DIO_VidSetPinValue+0x148>
    1162:	5f c0       	rjmp	.+190    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	89 f1       	breq	.+98     	; 0x11d0 <DIO_VidSetPinValue+0x19c>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	91 05       	cpc	r25, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <DIO_VidSetPinValue+0x146>
    1178:	40 c0       	rjmp	.+128    	; 0x11fa <DIO_VidSetPinValue+0x1c6>
    117a:	53 c0       	rjmp	.+166    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		{
		case DIO_PORTA:CLR_BIT(PORTA,LOC_u8PinNumber);break;
    117c:	ab e3       	ldi	r26, 0x3B	; 59
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	eb e3       	ldi	r30, 0x3B	; 59
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_VidSetPinValue+0x166>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_VidSetPinValue+0x162>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	3e c0       	rjmp	.+124    	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTB:CLR_BIT(PORTB,LOC_u8PinNumber);break;
    11a6:	a8 e3       	ldi	r26, 0x38	; 56
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e8 e3       	ldi	r30, 0x38	; 56
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_VidSetPinValue+0x190>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_VidSetPinValue+0x18c>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	29 c0       	rjmp	.+82     	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTC:CLR_BIT(PORTC,LOC_u8PinNumber);break;
    11d0:	a5 e3       	ldi	r26, 0x35	; 53
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e3       	ldi	r30, 0x35	; 53
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_VidSetPinValue+0x1ba>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_VidSetPinValue+0x1b6>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <DIO_VidSetPinValue+0x1ee>
		case DIO_PORTD:CLR_BIT(PORTD,LOC_u8PinNumber);break;	
    11fa:	a2 e3       	ldi	r26, 0x32	; 50
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_VidSetPinValue+0x1e4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_VidSetPinValue+0x1e0>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
		}	
	}
	else{}	
}
    1222:	27 96       	adiw	r28, 0x07	; 7
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_VidSetPortDirection+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <DIO_VidSetPortDirection+0x8>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <DIO_VidSetPortDirection+0x58>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_VidSetPortDirection+0x38>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_VidSetPortDirection+0x4e>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <DIO_VidSetPortDirection+0x74>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <DIO_VidSetPortDirection+0x62>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_VidSetPortDirection+0x6c>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA=LOC_u8Value;break;
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTB:DDRB=LOC_u8Value;break;
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTC:DDRC=LOC_u8Value;break;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_VidSetPortDirection+0x74>
	case DIO_PORTD:DDRD=LOC_u8Value;break;	
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
	}	
	
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <DIO_VidSetPortValue>:
void DIO_VidSetPortValue	(u8 LOC_u8Port,u8 LOC_u8Value)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_VidSetPortValue+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_VidSetPortValue+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	91 05       	cpc	r25, r1
    12d8:	d1 f0       	breq	.+52     	; 0x130e <DIO_VidSetPortValue+0x58>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <DIO_VidSetPortValue+0x38>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	61 f0       	breq	.+24     	; 0x1304 <DIO_VidSetPortValue+0x4e>
    12ec:	1e c0       	rjmp	.+60     	; 0x132a <DIO_VidSetPortValue+0x74>
    12ee:	2b 81       	ldd	r18, Y+3	; 0x03
    12f0:	3c 81       	ldd	r19, Y+4	; 0x04
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <DIO_VidSetPortValue+0x62>
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	91 05       	cpc	r25, r1
    1300:	81 f0       	breq	.+32     	; 0x1322 <DIO_VidSetPortValue+0x6c>
    1302:	13 c0       	rjmp	.+38     	; 0x132a <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA=LOC_u8Value;break;
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	0e c0       	rjmp	.+28     	; 0x132a <DIO_VidSetPortValue+0x74>
	case DIO_PORTB:PORTB=LOC_u8Value;break;
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	09 c0       	rjmp	.+18     	; 0x132a <DIO_VidSetPortValue+0x74>
	case DIO_PORTC:PORTC=LOC_u8Value;break;
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
    1320:	04 c0       	rjmp	.+8      	; 0x132a <DIO_VidSetPortValue+0x74>
	case DIO_PORTD:PORTD=LOC_u8Value;break;	
    1322:	e2 e3       	ldi	r30, 0x32	; 50
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
	}	
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <DIO_u8GetPinValue+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_u8GetPinValue+0x8>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value=0;
    134a:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3d 83       	std	Y+5, r19	; 0x05
    1354:	2c 83       	std	Y+4, r18	; 0x04
    1356:	4c 81       	ldd	r20, Y+4	; 0x04
    1358:	5d 81       	ldd	r21, Y+5	; 0x05
    135a:	41 30       	cpi	r20, 0x01	; 1
    135c:	51 05       	cpc	r21, r1
    135e:	41 f1       	breq	.+80     	; 0x13b0 <DIO_u8GetPinValue+0x78>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	91 05       	cpc	r25, r1
    1368:	34 f4       	brge	.+12     	; 0x1376 <DIO_u8GetPinValue+0x3e>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	61 f0       	breq	.+24     	; 0x138c <DIO_u8GetPinValue+0x54>
    1374:	52 c0       	rjmp	.+164    	; 0x141a <DIO_u8GetPinValue+0xe2>
    1376:	4c 81       	ldd	r20, Y+4	; 0x04
    1378:	5d 81       	ldd	r21, Y+5	; 0x05
    137a:	42 30       	cpi	r20, 0x02	; 2
    137c:	51 05       	cpc	r21, r1
    137e:	51 f1       	breq	.+84     	; 0x13d4 <DIO_u8GetPinValue+0x9c>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	b9 f1       	breq	.+110    	; 0x13f8 <DIO_u8GetPinValue+0xc0>
    138a:	47 c0       	rjmp	.+142    	; 0x141a <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:Value=GET_BIT(PINA,LOC_u8Pin);break;
    138c:	e9 e3       	ldi	r30, 0x39	; 57
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a9 01       	movw	r20, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_u8GetPinValue+0x6c>
    13a0:	55 95       	asr	r21
    13a2:	47 95       	ror	r20
    13a4:	8a 95       	dec	r24
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_u8GetPinValue+0x68>
    13a8:	ca 01       	movw	r24, r20
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	35 c0       	rjmp	.+106    	; 0x141a <DIO_u8GetPinValue+0xe2>
	case DIO_PORTB:Value=GET_BIT(PINB,LOC_u8Pin);break;
    13b0:	e6 e3       	ldi	r30, 0x36	; 54
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8GetPinValue+0x90>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8GetPinValue+0x8c>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	23 c0       	rjmp	.+70     	; 0x141a <DIO_u8GetPinValue+0xe2>
	case DIO_PORTC:Value=GET_BIT(PINC,LOC_u8Pin);break;
    13d4:	e3 e3       	ldi	r30, 0x33	; 51
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8GetPinValue+0xb4>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8GetPinValue+0xb0>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	11 c0       	rjmp	.+34     	; 0x141a <DIO_u8GetPinValue+0xe2>
	case DIO_PORTD:Value=GET_BIT(PIND,LOC_u8Pin);break;
    13f8:	e0 e3       	ldi	r30, 0x30	; 48
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8GetPinValue+0xd8>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_u8GetPinValue+0xd4>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
	}
	return Value;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <DIO_u8TogglePinValue>:
void DIO_u8TogglePinValue   	(u8 LOC_u8Port,u8 LOC_u8Pin)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_u8TogglePinValue+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <DIO_u8TogglePinValue+0x8>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3c 83       	std	Y+4, r19	; 0x04
    1444:	2b 83       	std	Y+3, r18	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	49 f1       	breq	.+82     	; 0x14a2 <DIO_u8TogglePinValue+0x76>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <DIO_u8TogglePinValue+0x38>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <DIO_u8TogglePinValue+0x4e>
    1462:	5a c0       	rjmp	.+180    	; 0x1518 <DIO_u8TogglePinValue+0xec>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	71 f1       	breq	.+92     	; 0x14ca <DIO_u8TogglePinValue+0x9e>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	e9 f1       	breq	.+122    	; 0x14f2 <DIO_u8TogglePinValue+0xc6>
    1478:	4f c0       	rjmp	.+158    	; 0x1518 <DIO_u8TogglePinValue+0xec>
	{
	case DIO_PORTA:TOG_BIT(PORTA,LOC_u8Pin);break;
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_u8TogglePinValue+0x6c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_u8TogglePinValue+0x68>
    149c:	84 27       	eor	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	3b c0       	rjmp	.+118    	; 0x1518 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTB:TOG_BIT(PORTB,LOC_u8Pin);break;
    14a2:	a8 e3       	ldi	r26, 0x38	; 56
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e3       	ldi	r30, 0x38	; 56
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_u8TogglePinValue+0x94>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_u8TogglePinValue+0x90>
    14c4:	84 27       	eor	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	27 c0       	rjmp	.+78     	; 0x1518 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTC:TOG_BIT(PORTC,LOC_u8Pin);break;
    14ca:	a5 e3       	ldi	r26, 0x35	; 53
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e3       	ldi	r30, 0x35	; 53
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_u8TogglePinValue+0xbc>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_u8TogglePinValue+0xb8>
    14ec:	84 27       	eor	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	13 c0       	rjmp	.+38     	; 0x1518 <DIO_u8TogglePinValue+0xec>
	case DIO_PORTD:TOG_BIT(PORTD,LOC_u8Pin);break;	
    14f2:	a2 e3       	ldi	r26, 0x32	; 50
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8TogglePinValue+0xe4>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8TogglePinValue+0xe0>
    1514:	84 27       	eor	r24, r20
    1516:	8c 93       	st	X, r24
	}
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <DIO_SetNippleValue>:
void DIO_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <DIO_SetNippleValue+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <DIO_SetNippleValue+0x8>
    152e:	0f 92       	push	r0
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8PinStart<=4)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	85 30       	cpi	r24, 0x05	; 5
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_SetNippleValue+0x1c>
    1540:	c6 c0       	rjmp	.+396    	; 0x16ce <DIO_SetNippleValue+0x1a8>
	{
		switch(Copy_u8PortNumber)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3d 83       	std	Y+5, r19	; 0x05
    154a:	2c 83       	std	Y+4, r18	; 0x04
    154c:	6c 81       	ldd	r22, Y+4	; 0x04
    154e:	7d 81       	ldd	r23, Y+5	; 0x05
    1550:	61 30       	cpi	r22, 0x01	; 1
    1552:	71 05       	cpc	r23, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <DIO_SetNippleValue+0x32>
    1556:	41 c0       	rjmp	.+130    	; 0x15da <DIO_SetNippleValue+0xb4>
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	34 f4       	brge	.+12     	; 0x156e <DIO_SetNippleValue+0x48>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	71 f0       	breq	.+28     	; 0x1588 <DIO_SetNippleValue+0x62>
    156c:	b0 c0       	rjmp	.+352    	; 0x16ce <DIO_SetNippleValue+0x1a8>
    156e:	6c 81       	ldd	r22, Y+4	; 0x04
    1570:	7d 81       	ldd	r23, Y+5	; 0x05
    1572:	62 30       	cpi	r22, 0x02	; 2
    1574:	71 05       	cpc	r23, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_SetNippleValue+0x54>
    1578:	59 c0       	rjmp	.+178    	; 0x162c <DIO_SetNippleValue+0x106>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <DIO_SetNippleValue+0x60>
    1584:	7c c0       	rjmp	.+248    	; 0x167e <DIO_SetNippleValue+0x158>
    1586:	a3 c0       	rjmp	.+326    	; 0x16ce <DIO_SetNippleValue+0x1a8>
		{
		case DIO_PORTA:
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1588:	ab e3       	ldi	r26, 0x3B	; 59
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	eb e3       	ldi	r30, 0x3B	; 59
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8f e0       	ldi	r24, 0x0F	; 15
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_SetNippleValue+0x7e>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	2a 95       	dec	r18
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_SetNippleValue+0x7a>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
			PORTA|=(Copy_u8Value<<Copy_u8PinStart);
    15ae:	ab e3       	ldi	r26, 0x3B	; 59
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	b9 01       	movw	r22, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_SetNippleValue+0xa8>
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	8a 95       	dec	r24
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_SetNippleValue+0xa4>
    15d2:	cb 01       	movw	r24, r22
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	7a c0       	rjmp	.+244    	; 0x16ce <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTB:
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    15da:	a8 e3       	ldi	r26, 0x38	; 56
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8f e0       	ldi	r24, 0x0F	; 15
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_SetNippleValue+0xd0>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	2a 95       	dec	r18
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_SetNippleValue+0xcc>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<Copy_u8PinStart);
    1600:	a8 e3       	ldi	r26, 0x38	; 56
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	b9 01       	movw	r22, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_SetNippleValue+0xfa>
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	8a 95       	dec	r24
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_SetNippleValue+0xf6>
    1624:	cb 01       	movw	r24, r22
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	51 c0       	rjmp	.+162    	; 0x16ce <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTC:
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    162c:	a5 e3       	ldi	r26, 0x35	; 53
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8f e0       	ldi	r24, 0x0F	; 15
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_SetNippleValue+0x122>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	2a 95       	dec	r18
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_SetNippleValue+0x11e>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<Copy_u8PinStart);
    1652:	a5 e3       	ldi	r26, 0x35	; 53
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	b9 01       	movw	r22, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_SetNippleValue+0x14c>
    166e:	66 0f       	add	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_SetNippleValue+0x148>
    1676:	cb 01       	movw	r24, r22
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	28 c0       	rjmp	.+80     	; 0x16ce <DIO_SetNippleValue+0x1a8>
			break;
		case DIO_PORTD:

			PORTD&=(~(0x0F<<Copy_u8PinStart));
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	8f e0       	ldi	r24, 0x0F	; 15
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_SetNippleValue+0x174>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	2a 95       	dec	r18
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_SetNippleValue+0x170>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<Copy_u8PinStart);
    16a4:	a2 e3       	ldi	r26, 0x32	; 50
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	b9 01       	movw	r22, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_SetNippleValue+0x19e>
    16c0:	66 0f       	add	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	8a 95       	dec	r24
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_SetNippleValue+0x19a>
    16c8:	cb 01       	movw	r24, r22
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
			break;

		}
	}

}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <LCD_VidPulseEnable>:
#include "LCD_Interface.h"
#include "avr/delay.h"


void LCD_VidPulseEnable(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	6c 97       	sbiw	r28, 0x1c	; 28
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	62 e0       	ldi	r22, 0x02	; 2
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	89 8f       	std	Y+25, r24	; 0x19
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
    1708:	ab 8f       	std	Y+27, r26	; 0x1b
    170a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8d 8b       	std	Y+21, r24	; 0x15
    1726:	9e 8b       	std	Y+22, r25	; 0x16
    1728:	af 8b       	std	Y+23, r26	; 0x17
    172a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <LCD_VidPulseEnable+0x70>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	69 8d       	ldd	r22, Y+25	; 0x19
    1768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_VidPulseEnable+0xd0>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	9a 89       	ldd	r25, Y+18	; 0x12
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_VidPulseEnable+0xbe>
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <LCD_VidPulseEnable+0xb2>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	9c 89       	ldd	r25, Y+20	; 0x14
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	98 89       	ldd	r25, Y+16	; 0x10
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_VidPulseEnable+0xfa>
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e8       	ldi	r26, 0x80	; 128
    17f0:	bf e3       	ldi	r27, 0x3F	; 63
    17f2:	8b 87       	std	Y+11, r24	; 0x0b
    17f4:	9c 87       	std	Y+12, r25	; 0x0c
    17f6:	ad 87       	std	Y+13, r26	; 0x0d
    17f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a ef       	ldi	r20, 0xFA	; 250
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8f 83       	std	Y+7, r24	; 0x07
    1814:	98 87       	std	Y+8, r25	; 0x08
    1816:	a9 87       	std	Y+9, r26	; 0x09
    1818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	0f c0       	rjmp	.+30     	; 0x189c <LCD_VidPulseEnable+0x1be>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_VidPulseEnable+0x1ac>
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <LCD_VidPulseEnable+0x1a0>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	78 85       	ldd	r23, Y+8	; 0x08
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_VidPulseEnable+0x1e8>
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    18ce:	6c 96       	adiw	r28, 0x1c	; 28
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <LCD_VidInit>:
void LCD_VidInit(void)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	e8 97       	sbiw	r28, 0x38	; 56
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a8 e4       	ldi	r26, 0x48	; 72
    18fa:	b2 e4       	ldi	r27, 0x42	; 66
    18fc:	8d ab       	std	Y+53, r24	; 0x35
    18fe:	9e ab       	std	Y+54, r25	; 0x36
    1900:	af ab       	std	Y+55, r26	; 0x37
    1902:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6d a9       	ldd	r22, Y+53	; 0x35
    1906:	7e a9       	ldd	r23, Y+54	; 0x36
    1908:	8f a9       	ldd	r24, Y+55	; 0x37
    190a:	98 ad       	ldd	r25, Y+56	; 0x38
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	89 ab       	std	Y+49, r24	; 0x31
    191e:	9a ab       	std	Y+50, r25	; 0x32
    1920:	ab ab       	std	Y+51, r26	; 0x33
    1922:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1924:	69 a9       	ldd	r22, Y+49	; 0x31
    1926:	7a a9       	ldd	r23, Y+50	; 0x32
    1928:	8b a9       	ldd	r24, Y+51	; 0x33
    192a:	9c a9       	ldd	r25, Y+52	; 0x34
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <LCD_VidInit+0x66>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	98 ab       	std	Y+48, r25	; 0x30
    1942:	8f a7       	std	Y+47, r24	; 0x2f
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6d a9       	ldd	r22, Y+53	; 0x35
    1960:	7e a9       	ldd	r23, Y+54	; 0x36
    1962:	8f a9       	ldd	r24, Y+55	; 0x37
    1964:	98 ad       	ldd	r25, Y+56	; 0x38
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	98 ab       	std	Y+48, r25	; 0x30
    1984:	8f a7       	std	Y+47, r24	; 0x2f
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <LCD_VidInit+0xc6>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e a7       	std	Y+46, r25	; 0x2e
    198e:	8d a7       	std	Y+45, r24	; 0x2d
    1990:	8d a5       	ldd	r24, Y+45	; 0x2d
    1992:	9e a5       	ldd	r25, Y+46	; 0x2e
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_VidInit+0xb4>
    1998:	9e a7       	std	Y+46, r25	; 0x2e
    199a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	98 ab       	std	Y+48, r25	; 0x30
    19a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a8:	98 a9       	ldd	r25, Y+48	; 0x30
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <LCD_VidInit+0xa8>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	69 a9       	ldd	r22, Y+49	; 0x31
    19b2:	7a a9       	ldd	r23, Y+50	; 0x32
    19b4:	8b a9       	ldd	r24, Y+51	; 0x33
    19b6:	9c a9       	ldd	r25, Y+52	; 0x34
    19b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	98 ab       	std	Y+48, r25	; 0x30
    19c2:	8f a7       	std	Y+47, r24	; 0x2f
    19c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c6:	98 a9       	ldd	r25, Y+48	; 0x30
    19c8:	9c a7       	std	Y+44, r25	; 0x2c
    19ca:	8b a7       	std	Y+43, r24	; 0x2b
    19cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_VidInit+0xf0>
    19d4:	9c a7       	std	Y+44, r25	; 0x2c
    19d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
#if MODE==4
	//DIO_VidSetPortDirection(LCD_CTRL_PORT,0x07);  /* Configure the control pins(E,RS,RW) as output pins */
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RS,OUTPUT);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RW,OUTPUT);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,EN,OUTPUT);
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	62 e0       	ldi	r22, 0x02	; 2
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
	//_delay_ms(1);


		// set only PORT 4~7 pins as outputs
		//DIO_VidSetPortDirection(LCD_DATA_PORT,0xF0);  /* Configure the data port as output port */
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN4,OUTPUT);
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	64 e0       	ldi	r22, 0x04	; 4
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN5,OUTPUT);
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	65 e0       	ldi	r22, 0x05	; 5
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN6,OUTPUT);
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	66 e0       	ldi	r22, 0x06	; 6
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(LCD_DATA_PORT,PIN7,OUTPUT);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	67 e0       	ldi	r22, 0x07	; 7
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
		/*send function set command*/
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET>>4);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
		LCD_VidWriteCommend(HCLCD_FUNCTION_SET);
    1a2a:	88 e2       	ldi	r24, 0x28	; 40
    1a2c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e8       	ldi	r26, 0x80	; 128
    1a36:	bf e3       	ldi	r27, 0x3F	; 63
    1a38:	8f a3       	std	Y+39, r24	; 0x27
    1a3a:	98 a7       	std	Y+40, r25	; 0x28
    1a3c:	a9 a7       	std	Y+41, r26	; 0x29
    1a3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	6f a1       	ldd	r22, Y+39	; 0x27
    1a42:	78 a5       	ldd	r23, Y+40	; 0x28
    1a44:	89 a5       	ldd	r24, Y+41	; 0x29
    1a46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a ef       	ldi	r20, 0xFA	; 250
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8b a3       	std	Y+35, r24	; 0x23
    1a5a:	9c a3       	std	Y+36, r25	; 0x24
    1a5c:	ad a3       	std	Y+37, r26	; 0x25
    1a5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a60:	6b a1       	ldd	r22, Y+35	; 0x23
    1a62:	7c a1       	ldd	r23, Y+36	; 0x24
    1a64:	8d a1       	ldd	r24, Y+37	; 0x25
    1a66:	9e a1       	ldd	r25, Y+38	; 0x26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <LCD_VidInit+0x1a2>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <LCD_VidInit+0x220>
	else if (__tmp > 65535)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <LCD_VidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <LCD_VidInit+0x202>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	8f 8f       	std	Y+31, r24	; 0x1f
    1acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ace:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_VidInit+0x1f0>
    1ad4:	98 a3       	std	Y+32, r25	; 0x20
    1ad6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <LCD_VidInit+0x1e4>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <LCD_VidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	9e 8f       	std	Y+30, r25	; 0x1e
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
    1b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_VidInit+0x22c>
    1b10:	9e 8f       	std	Y+30, r25	; 0x1e
    1b12:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			/*send Display on/off  command*/
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF>>4);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_DISPLAY_ON_OFF);
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e8       	ldi	r26, 0x80	; 128
    1b26:	bf e3       	ldi	r27, 0x3F	; 63
    1b28:	89 8f       	std	Y+25, r24	; 0x19
    1b2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	69 8d       	ldd	r22, Y+25	; 0x19
    1b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a ef       	ldi	r20, 0xFA	; 250
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8d 8b       	std	Y+21, r24	; 0x15
    1b4a:	9e 8b       	std	Y+22, r25	; 0x16
    1b4c:	af 8b       	std	Y+23, r26	; 0x17
    1b4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <LCD_VidInit+0x292>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <LCD_VidInit+0x310>
	else if (__tmp > 65535)
    1b72:	6d 89       	ldd	r22, Y+21	; 0x15
    1b74:	7e 89       	ldd	r23, Y+22	; 0x16
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <LCD_VidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <LCD_VidInit+0x2f2>
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9a 8b       	std	Y+18, r25	; 0x12
    1bba:	89 8b       	std	Y+17, r24	; 0x11
    1bbc:	89 89       	ldd	r24, Y+17	; 0x11
    1bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_VidInit+0x2e0>
    1bc4:	9a 8b       	std	Y+18, r25	; 0x12
    1bc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <LCD_VidInit+0x2d4>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <LCD_VidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9c 8b       	std	Y+20, r25	; 0x14
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	98 8b       	std	Y+16, r25	; 0x10
    1bf6:	8f 87       	std	Y+15, r24	; 0x0f
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	98 89       	ldd	r25, Y+16	; 0x10
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_VidInit+0x31c>
    1c00:	98 8b       	std	Y+16, r25	; 0x10
    1c02:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			/*send Display Clear  command*/
			LCD_VidWriteCommend(DISPLAY_CLEAR>>4);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(DISPLAY_CLEAR);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e4       	ldi	r27, 0x40	; 64
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <LCD_VidInit+0x382>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <LCD_VidInit+0x400>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <LCD_VidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <LCD_VidInit+0x3e2>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_VidInit+0x3d0>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <LCD_VidInit+0x3c4>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <LCD_VidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_VidInit+0x40c>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			/*send Entry Mode  set command*/
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
			LCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);
    1cfa:	86 e0       	ldi	r24, 0x06	; 6
    1cfc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
	    _delay_ms(2);
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    1d00:	e8 96       	adiw	r28, 0x38	; 56
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <LCD_VidWriteCommend>:
void LCD_VidWriteCommend(u8 LCD_u8Commend)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	ab 97       	sbiw	r28, 0x2b	; 43
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	8b a7       	std	Y+43, r24	; 0x2b
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,0); /* Instruction Mode RS=0 */
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	8f a3       	std	Y+39, r24	; 0x27
    1d46:	98 a7       	std	Y+40, r25	; 0x28
    1d48:	a9 a7       	std	Y+41, r26	; 0x29
    1d4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d50:	89 a5       	ldd	r24, Y+41	; 0x29
    1d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8b a3       	std	Y+35, r24	; 0x23
    1d66:	9c a3       	std	Y+36, r25	; 0x24
    1d68:	ad a3       	std	Y+37, r26	; 0x25
    1d6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d70:	8d a1       	ldd	r24, Y+37	; 0x25
    1d72:	9e a1       	ldd	r25, Y+38	; 0x26
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_VidWriteCommend+0x7c>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_VidWriteCommend+0xfa>
	else if (__tmp > 65535)
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_VidWriteCommend+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	6f a1       	ldd	r22, Y+39	; 0x27
    1da8:	78 a5       	ldd	r23, Y+40	; 0x28
    1daa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_VidWriteCommend+0xdc>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	98 a3       	std	Y+32, r25	; 0x20
    1dd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dda:	98 a1       	ldd	r25, Y+32	; 0x20
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_VidWriteCommend+0xca>
    1de0:	98 a3       	std	Y+32, r25	; 0x20
    1de2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	89 a1       	ldd	r24, Y+33	; 0x21
    1de6:	9a a1       	ldd	r25, Y+34	; 0x22
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9a a3       	std	Y+34, r25	; 0x22
    1dec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	89 a1       	ldd	r24, Y+33	; 0x21
    1df0:	9a a1       	ldd	r25, Y+34	; 0x22
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_VidWriteCommend+0xbe>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_VidWriteCommend+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1e00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	9e 8f       	std	Y+30, r25	; 0x1e
    1e12:	8d 8f       	std	Y+29, r24	; 0x1d
    1e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_VidWriteCommend+0x106>
    1e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Commend); /* out the required command to the data bus D0 --> D7 */
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	4b a5       	ldd	r20, Y+43	; 0x2b
    1e26:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_SetNippleValue>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	bf e3       	ldi	r27, 0x3F	; 63
    1e32:	89 8f       	std	Y+25, r24	; 0x19
    1e34:	9a 8f       	std	Y+26, r25	; 0x1a
    1e36:	ab 8f       	std	Y+27, r26	; 0x1b
    1e38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	8d 8b       	std	Y+21, r24	; 0x15
    1e54:	9e 8b       	std	Y+22, r25	; 0x16
    1e56:	af 8b       	std	Y+23, r26	; 0x17
    1e58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e60:	98 8d       	ldd	r25, Y+24	; 0x18
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <LCD_VidWriteCommend+0x16a>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <LCD_VidWriteCommend+0x1e8>
	else if (__tmp > 65535)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <LCD_VidWriteCommend+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	69 8d       	ldd	r22, Y+25	; 0x19
    1e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9c 8b       	std	Y+20, r25	; 0x14
    1eba:	8b 8b       	std	Y+19, r24	; 0x13
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <LCD_VidWriteCommend+0x1ca>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9a 8b       	std	Y+18, r25	; 0x12
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
    1ec6:	89 89       	ldd	r24, Y+17	; 0x11
    1ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <LCD_VidWriteCommend+0x1b8>
    1ece:	9a 8b       	std	Y+18, r25	; 0x12
    1ed0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ede:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <LCD_VidWriteCommend+0x1ac>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <LCD_VidWriteCommend+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eea:	8f 89       	ldd	r24, Y+23	; 0x17
    1eec:	98 8d       	ldd	r25, Y+24	; 0x18
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9c 8b       	std	Y+20, r25	; 0x14
    1ef8:	8b 8b       	std	Y+19, r24	; 0x13
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	98 8b       	std	Y+16, r25	; 0x10
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
    1f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f04:	98 89       	ldd	r25, Y+16	; 0x10
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_VidWriteCommend+0x1f4>
    1f0a:	98 8b       	std	Y+16, r25	; 0x10
    1f0c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e4       	ldi	r27, 0x40	; 64
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ad 87       	std	Y+13, r26	; 0x0d
    1f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8f 83       	std	Y+7, r24	; 0x07
    1f42:	98 87       	std	Y+8, r25	; 0x08
    1f44:	a9 87       	std	Y+9, r26	; 0x09
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <LCD_VidWriteCommend+0x258>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <LCD_VidWriteCommend+0x2d6>
	else if (__tmp > 65535)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	57 e4       	ldi	r21, 0x47	; 71
    1f7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	4c f5       	brge	.+82     	; 0x1fd4 <LCD_VidWriteCommend+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e2       	ldi	r20, 0x20	; 32
    1f90:	51 e4       	ldi	r21, 0x41	; 65
    1f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <LCD_VidWriteCommend+0x2b8>
    1fac:	88 ec       	ldi	r24, 0xC8	; 200
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 83       	std	Y+4, r25	; 0x04
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_VidWriteCommend+0x2a6>
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <LCD_VidWriteCommend+0x29a>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <LCD_VidWriteCommend+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_VidWriteCommend+0x2e2>
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	62 e0       	ldi	r22, 0x02	; 2
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    2006:	ab 96       	adiw	r28, 0x2b	; 43
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <LCD_VidWriteData>:
void LCD_VidWriteData(u8 LCD_u8Data)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	6d 97       	sbiw	r28, 0x1d	; 29
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	8d 8f       	std	Y+29, r24	; 0x1d
#if MODE==4
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1); /* Instruction Mode RS=0 */
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	89 8f       	std	Y+25, r24	; 0x19
    204c:	9a 8f       	std	Y+26, r25	; 0x1a
    204e:	ab 8f       	std	Y+27, r26	; 0x1b
    2050:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	69 8d       	ldd	r22, Y+25	; 0x19
    2054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8d 8b       	std	Y+21, r24	; 0x15
    206c:	9e 8b       	std	Y+22, r25	; 0x16
    206e:	af 8b       	std	Y+23, r26	; 0x17
    2070:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_VidWriteData+0x7c>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_VidWriteData+0xfa>
	else if (__tmp > 65535)
    2094:	6d 89       	ldd	r22, Y+21	; 0x15
    2096:	7e 89       	ldd	r23, Y+22	; 0x16
    2098:	8f 89       	ldd	r24, Y+23	; 0x17
    209a:	98 8d       	ldd	r25, Y+24	; 0x18
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_VidWriteData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	69 8d       	ldd	r22, Y+25	; 0x19
    20ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_VidWriteData+0xdc>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	89 8b       	std	Y+17, r24	; 0x11
    20de:	89 89       	ldd	r24, Y+17	; 0x11
    20e0:	9a 89       	ldd	r25, Y+18	; 0x12
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_VidWriteData+0xca>
    20e6:	9a 8b       	std	Y+18, r25	; 0x12
    20e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8b 89       	ldd	r24, Y+19	; 0x13
    20f6:	9c 89       	ldd	r25, Y+20	; 0x14
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_VidWriteData+0xbe>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_VidWriteData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	98 8b       	std	Y+16, r25	; 0x10
    2118:	8f 87       	std	Y+15, r24	; 0x0f
    211a:	8f 85       	ldd	r24, Y+15	; 0x0f
    211c:	98 89       	ldd	r25, Y+16	; 0x10
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_VidWriteData+0x106>
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_SetNippleValue(4,LCD_DATA_PORT,LCD_u8Data);
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    212c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_SetNippleValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e4       	ldi	r27, 0x40	; 64
    2142:	8b 87       	std	Y+11, r24	; 0x0b
    2144:	9c 87       	std	Y+12, r25	; 0x0c
    2146:	ad 87       	std	Y+13, r26	; 0x0d
    2148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a ef       	ldi	r20, 0xFA	; 250
    2158:	54 e4       	ldi	r21, 0x44	; 68
    215a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8f 83       	std	Y+7, r24	; 0x07
    2164:	98 87       	std	Y+8, r25	; 0x08
    2166:	a9 87       	std	Y+9, r26	; 0x09
    2168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_VidWriteData+0x174>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	3f c0       	rjmp	.+126    	; 0x220a <LCD_VidWriteData+0x1f2>
	else if (__tmp > 65535)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <LCD_VidWriteData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_VidWriteData+0x1d4>
    21ce:	88 ec       	ldi	r24, 0xC8	; 200
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_VidWriteData+0x1c2>
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_VidWriteData+0x1b6>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <LCD_VidWriteData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_VidWriteData+0x1fe>
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_VidSetPinValue>
	_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    2228:	6d 96       	adiw	r28, 0x1d	; 29
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <LCD_4Bits_VoidClearDisplay>:
void LCD_4Bits_VoidClearDisplay(void)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	2e 97       	sbiw	r28, 0x0e	; 14
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommend(0x01>>4);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
	LCD_VidWriteCommend(0x01);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 ea       	ldi	r26, 0xA0	; 160
    2260:	b1 e4       	ldi	r27, 0x41	; 65
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	a9 87       	std	Y+9, r26	; 0x09
    2288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <LCD_4Bits_VoidClearDisplay+0x72>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <LCD_4Bits_VoidClearDisplay+0xf0>
	else if (__tmp > 65535)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <LCD_4Bits_VoidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <LCD_4Bits_VoidClearDisplay+0xd2>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_4Bits_VoidClearDisplay+0xc0>
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <LCD_4Bits_VoidClearDisplay+0xb4>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <LCD_4Bits_VoidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_4Bits_VoidClearDisplay+0xfc>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    233e:	2e 96       	adiw	r28, 0x0e	; 14
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <LCD_4Bits_DisplayCharacter>:
void LCD_4Bits_DisplayCharacter(u8 Copy_u8Data)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data>>4);
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	82 95       	swap	r24
    2360:	8f 70       	andi	r24, 0x0F	; 15
    2362:	0e 94 0c 10 	call	0x2018	; 0x2018 <LCD_VidWriteData>
	LCD_VidWriteData(Copy_u8Data);
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	0e 94 0c 10 	call	0x2018	; 0x2018 <LCD_VidWriteData>
}
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <LCD_4Bits_DisplayString>:
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <LCD_4Bits_DisplayString+0x6>
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	9b 83       	std	Y+3, r25	; 0x03
    2382:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2384:	19 82       	std	Y+1, r1	; 0x01
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <LCD_4Bits_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	fc 01       	movw	r30, r24
    2394:	e2 0f       	add	r30, r18
    2396:	f3 1f       	adc	r31, r19
    2398:	80 81       	ld	r24, Z
    239a:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_4Bits_DisplayCharacter>
		Loc_u8Count++;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWriteData(Copy_u8Data);
}
void LCD_4Bits_DisplayString(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	fc 01       	movw	r30, r24
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 81       	ld	r24, Z
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	29 f7       	brne	.-54     	; 0x2388 <LCD_4Bits_DisplayString+0x14>
	{
		LCD_4Bits_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <LCD_4Bits_VidWriteNumber>:
	{

	}
}*/
void LCD_4Bits_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	2c 97       	sbiw	r28, 0x0c	; 12
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	69 87       	std	Y+9, r22	; 0x09
    23e8:	7a 87       	std	Y+10, r23	; 0x0a
    23ea:	8b 87       	std	Y+11, r24	; 0x0b
    23ec:	9c 87       	std	Y+12, r25	; 0x0c
    23ee:	1d 82       	std	Y+5, r1	; 0x05
    23f0:	1e 82       	std	Y+6, r1	; 0x06
    23f2:	1f 82       	std	Y+7, r1	; 0x07
    23f4:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    23f6:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    23fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	a1 05       	cpc	r26, r1
    2404:	b1 05       	cpc	r27, r1
    2406:	09 f0       	breq	.+2      	; 0x240a <LCD_4Bits_VidWriteNumber+0x40>
    2408:	46 c0       	rjmp	.+140    	; 0x2496 <LCD_4Bits_VidWriteNumber+0xcc>
{
	LCD_4Bits_DisplayCharacter(48);
    240a:	80 e3       	ldi	r24, 0x30	; 48
    240c:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_4Bits_DisplayCharacter>
    2410:	42 c0       	rjmp	.+132    	; 0x2496 <LCD_4Bits_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	af 81       	ldd	r26, Y+7	; 0x07
    2418:	b8 85       	ldd	r27, Y+8	; 0x08
    241a:	2a e0       	ldi	r18, 0x0A	; 10
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 0b 14 	call	0x2816	; 0x2816 <__mulsi3>
    242a:	7b 01       	movw	r14, r22
    242c:	8c 01       	movw	r16, r24
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	ab 85       	ldd	r26, Y+11	; 0x0b
    2434:	bc 85       	ldd	r27, Y+12	; 0x0c
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodsi4>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 0d       	add	r24, r14
    244c:	9f 1d       	adc	r25, r15
    244e:	a0 1f       	adc	r26, r16
    2450:	b1 1f       	adc	r27, r17
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	af 83       	std	Y+7, r26	; 0x07
    2458:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	af 81       	ldd	r26, Y+7	; 0x07
    2460:	b8 85       	ldd	r27, Y+8	; 0x08
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	a1 05       	cpc	r26, r1
    2466:	b1 05       	cpc	r27, r1
    2468:	21 f4       	brne	.+8      	; 0x2472 <LCD_4Bits_VidWriteNumber+0xa8>
	{
		 y=0;
    246a:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	ab 85       	ldd	r26, Y+11	; 0x0b
    2478:	bc 85       	ldd	r27, Y+12	; 0x0c
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodsi4>
    248a:	da 01       	movw	r26, r20
    248c:	c9 01       	movw	r24, r18
    248e:	89 87       	std	Y+9, r24	; 0x09
    2490:	9a 87       	std	Y+10, r25	; 0x0a
    2492:	ab 87       	std	Y+11, r26	; 0x0b
    2494:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	LCD_4Bits_DisplayCharacter(48);
}
while(LOC_u32num>0)
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	ab 85       	ldd	r26, Y+11	; 0x0b
    249c:	bc 85       	ldd	r27, Y+12	; 0x0c
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	a1 05       	cpc	r26, r1
    24a2:	b1 05       	cpc	r27, r1
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <LCD_4Bits_VidWriteNumber+0xde>
    24a6:	b5 cf       	rjmp	.-150    	; 0x2412 <LCD_4Bits_VidWriteNumber+0x48>
    24a8:	25 c0       	rjmp	.+74     	; 0x24f4 <LCD_4Bits_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	af 81       	ldd	r26, Y+7	; 0x07
    24b0:	b8 85       	ldd	r27, Y+8	; 0x08
    24b2:	2a e0       	ldi	r18, 0x0A	; 10
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodsi4>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_4Bits_DisplayCharacter(res+48);
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	80 5d       	subi	r24, 0xD0	; 208
    24cc:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_4Bits_DisplayCharacter>
	revrese=revrese/10;
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	af 81       	ldd	r26, Y+7	; 0x07
    24d6:	b8 85       	ldd	r27, Y+8	; 0x08
    24d8:	2a e0       	ldi	r18, 0x0A	; 10
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodsi4>
    24e8:	da 01       	movw	r26, r20
    24ea:	c9 01       	movw	r24, r18
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	af 83       	std	Y+7, r26	; 0x07
    24f2:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	af 81       	ldd	r26, Y+7	; 0x07
    24fa:	b8 85       	ldd	r27, Y+8	; 0x08
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	a1 05       	cpc	r26, r1
    2500:	b1 05       	cpc	r27, r1
    2502:	99 f6       	brne	.-90     	; 0x24aa <LCD_4Bits_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	88 23       	and	r24, r24
    2508:	61 f4       	brne	.+24     	; 0x2522 <LCD_4Bits_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    250a:	19 82       	std	Y+1, r1	; 0x01
    250c:	06 c0       	rjmp	.+12     	; 0x251a <LCD_4Bits_VidWriteNumber+0x150>
	{
		LCD_4Bits_DisplayCharacter(48);
    250e:	80 e3       	ldi	r24, 0x30	; 48
    2510:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_4Bits_DisplayCharacter>
	LCD_4Bits_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	99 81       	ldd	r25, Y+1	; 0x01
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	98 17       	cp	r25, r24
    2520:	b0 f3       	brcs	.-20     	; 0x250e <LCD_4Bits_VidWriteNumber+0x144>
	{
		LCD_4Bits_DisplayCharacter(48);
	}
}
}
    2522:	2c 96       	adiw	r28, 0x0c	; 12
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	08 95       	ret

0000253c <LCD_4Bits_SetPosition>:
void LCD_4Bits_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <LCD_4Bits_SetPosition+0x6>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==0)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	88 23       	and	r24, r24
    254e:	b9 f4       	brne	.+46     	; 0x257e <LCD_4Bits_SetPosition+0x42>
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	80 31       	cpi	r24, 0x10	; 16
    2554:	a0 f4       	brcc	.+40     	; 0x257e <LCD_4Bits_SetPosition+0x42>
	{
		LCD_VidWriteCommend((128+Copy_u8PositionNumber)>>4);
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	80 58       	subi	r24, 0x80	; 128
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	95 95       	asr	r25
    2562:	87 95       	ror	r24
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	95 95       	asr	r25
    256a:	87 95       	ror	r24
    256c:	95 95       	asr	r25
    256e:	87 95       	ror	r24
    2570:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
		LCD_VidWriteCommend((128+Copy_u8PositionNumber));
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	80 58       	subi	r24, 0x80	; 128
    2578:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
    257c:	19 c0       	rjmp	.+50     	; 0x25b0 <LCD_4Bits_SetPosition+0x74>
	}
	else if((Copy_u8LineNumber==1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	b1 f4       	brne	.+44     	; 0x25b0 <LCD_4Bits_SetPosition+0x74>
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	80 31       	cpi	r24, 0x10	; 16
    2588:	98 f4       	brcc	.+38     	; 0x25b0 <LCD_4Bits_SetPosition+0x74>
	{
		LCD_VidWriteCommend((192+Copy_u8PositionNumber)>>4);
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	80 54       	subi	r24, 0x40	; 64
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	95 95       	asr	r25
    2596:	87 95       	ror	r24
    2598:	95 95       	asr	r25
    259a:	87 95       	ror	r24
    259c:	95 95       	asr	r25
    259e:	87 95       	ror	r24
    25a0:	95 95       	asr	r25
    25a2:	87 95       	ror	r24
    25a4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
		LCD_VidWriteCommend((192+Copy_u8PositionNumber));
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	80 54       	subi	r24, 0x40	; 64
    25ac:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_VidWriteCommend>
	}
	else
	{
	}
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <main>:


#include "util/delay.h"

int main ()
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	6d 97       	sbiw	r28, 0x1d	; 29
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
	/*Variable initialization*/
	u8 error;
	/*set SDA-->C1 &SCL-->C0 AS output */
	DIO_VidSetPinDirection(DIO_PORTC,PIN0,OUTPUT);//SCL
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DIO_PORTC,PIN1,OUTPUT);//SDA
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_VidSetPinDirection>
	/*LCD initialization*/
	LCD_VidInit();
    25e2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_VidInit>
	LCD_4Bits_DisplayString("I'M the Master");
    25e6:	80 e6       	ldi	r24, 0x60	; 96
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 ba 11 	call	0x2374	; 0x2374 <LCD_4Bits_DisplayString>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	aa e7       	ldi	r26, 0x7A	; 122
    25f4:	b4 e4       	ldi	r27, 0x44	; 68
    25f6:	89 8f       	std	Y+25, r24	; 0x19
    25f8:	9a 8f       	std	Y+26, r25	; 0x1a
    25fa:	ab 8f       	std	Y+27, r26	; 0x1b
    25fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a ef       	ldi	r20, 0xFA	; 250
    260c:	54 e4       	ldi	r21, 0x44	; 68
    260e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8d 8b       	std	Y+21, r24	; 0x15
    2618:	9e 8b       	std	Y+22, r25	; 0x16
    261a:	af 8b       	std	Y+23, r26	; 0x17
    261c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    261e:	6d 89       	ldd	r22, Y+21	; 0x15
    2620:	7e 89       	ldd	r23, Y+22	; 0x16
    2622:	8f 89       	ldd	r24, Y+23	; 0x17
    2624:	98 8d       	ldd	r25, Y+24	; 0x18
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <main+0x86>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 8b       	std	Y+20, r25	; 0x14
    263c:	8b 8b       	std	Y+19, r24	; 0x13
    263e:	3f c0       	rjmp	.+126    	; 0x26be <main+0x104>
	else if (__tmp > 65535)
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	69 8d       	ldd	r22, Y+25	; 0x19
    265a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <main+0xe6>
    2682:	88 ec       	ldi	r24, 0xC8	; 200
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9a 8b       	std	Y+18, r25	; 0x12
    2688:	89 8b       	std	Y+17, r24	; 0x11
    268a:	89 89       	ldd	r24, Y+17	; 0x11
    268c:	9a 89       	ldd	r25, Y+18	; 0x12
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <main+0xd4>
    2692:	9a 8b       	std	Y+18, r25	; 0x12
    2694:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8b 89       	ldd	r24, Y+19	; 0x13
    2698:	9c 89       	ldd	r25, Y+20	; 0x14
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <main+0xc8>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	6d 89       	ldd	r22, Y+21	; 0x15
    26ac:	7e 89       	ldd	r23, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	98 8b       	std	Y+16, r25	; 0x10
    26c4:	8f 87       	std	Y+15, r24	; 0x0f
    26c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c8:	98 89       	ldd	r25, Y+16	; 0x10
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <main+0x110>
    26ce:	98 8b       	std	Y+16, r25	; 0x10
    26d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_4Bits_VoidClearDisplay();
    26d2:	0e 94 1d 11 	call	0x223a	; 0x223a <LCD_4Bits_VoidClearDisplay>
	/*TWI initialization as a master*/
	TWI_voidMasterInit();
    26d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <TWI_voidMasterInit>

	while(1)
	{
		/* Start Condition */
		error=TWI_enuSendStartCondition();
    26da:	0e 94 df 05 	call	0xbbe	; 0xbbe <TWI_enuSendStartCondition>
    26de:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_4Bits_VidWriteNumber(error);
    26e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e0       	ldi	r26, 0x00	; 0
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_4Bits_VidWriteNumber>
		/* Send Slave Address with Write Bit */
		error=TWI_enuSendSlaveWithWrite(0x01);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 35 06 	call	0xc6a	; 0xc6a <TWI_enuSendSlaveWithWrite>
    26f8:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_4Bits_VidWriteNumber(error);
    26fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	a0 e0       	ldi	r26, 0x00	; 0
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_4Bits_VidWriteNumber>
		/* Send The Data Byte */
		error=TWI_enuSendDataByte('a');
    270c:	81 e6       	ldi	r24, 0x61	; 97
    270e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TWI_enuSendDataByte>
    2712:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_4Bits_VidWriteNumber(error);
    2714:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e0       	ldi	r26, 0x00	; 0
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 e5 11 	call	0x23ca	; 0x23ca <LCD_4Bits_VidWriteNumber>
		/* Send Stop Condition */
		TWI_voidSendStopCondition();
    2726:	0e 94 05 07 	call	0xe0a	; 0xe0a <TWI_voidSendStopCondition>
		/*send the same data to LCD*/
		LCD_4Bits_DisplayCharacter('a');
    272a:	81 e6       	ldi	r24, 0x61	; 97
    272c:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_4Bits_DisplayCharacter>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e4       	ldi	r25, 0x40	; 64
    2734:	ac e9       	ldi	r26, 0x9C	; 156
    2736:	b5 e4       	ldi	r27, 0x45	; 69
    2738:	8b 87       	std	Y+11, r24	; 0x0b
    273a:	9c 87       	std	Y+12, r25	; 0x0c
    273c:	ad 87       	std	Y+13, r26	; 0x0d
    273e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a ef       	ldi	r20, 0xFA	; 250
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8f 83       	std	Y+7, r24	; 0x07
    275a:	98 87       	std	Y+8, r25	; 0x08
    275c:	a9 87       	std	Y+9, r26	; 0x09
    275e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2760:	6f 81       	ldd	r22, Y+7	; 0x07
    2762:	78 85       	ldd	r23, Y+8	; 0x08
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	2c f4       	brge	.+10     	; 0x2782 <main+0x1c8>
		__ticks = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	3f c0       	rjmp	.+126    	; 0x2800 <main+0x246>
	else if (__tmp > 65535)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2796:	18 16       	cp	r1, r24
    2798:	4c f5       	brge	.+82     	; 0x27ec <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e2       	ldi	r20, 0x20	; 32
    27a8:	51 e4       	ldi	r21, 0x41	; 65
    27aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	0f c0       	rjmp	.+30     	; 0x27e2 <main+0x228>
    27c4:	88 ec       	ldi	r24, 0xC8	; 200
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9c 83       	std	Y+4, r25	; 0x04
    27ca:	8b 83       	std	Y+3, r24	; 0x03
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <main+0x216>
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <main+0x20a>
    27ea:	77 cf       	rjmp	.-274    	; 0x26da <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <main+0x252>
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	62 cf       	rjmp	.-316    	; 0x26da <main+0x120>

00002816 <__mulsi3>:
    2816:	62 9f       	mul	r22, r18
    2818:	d0 01       	movw	r26, r0
    281a:	73 9f       	mul	r23, r19
    281c:	f0 01       	movw	r30, r0
    281e:	82 9f       	mul	r24, r18
    2820:	e0 0d       	add	r30, r0
    2822:	f1 1d       	adc	r31, r1
    2824:	64 9f       	mul	r22, r20
    2826:	e0 0d       	add	r30, r0
    2828:	f1 1d       	adc	r31, r1
    282a:	92 9f       	mul	r25, r18
    282c:	f0 0d       	add	r31, r0
    282e:	83 9f       	mul	r24, r19
    2830:	f0 0d       	add	r31, r0
    2832:	74 9f       	mul	r23, r20
    2834:	f0 0d       	add	r31, r0
    2836:	65 9f       	mul	r22, r21
    2838:	f0 0d       	add	r31, r0
    283a:	99 27       	eor	r25, r25
    283c:	72 9f       	mul	r23, r18
    283e:	b0 0d       	add	r27, r0
    2840:	e1 1d       	adc	r30, r1
    2842:	f9 1f       	adc	r31, r25
    2844:	63 9f       	mul	r22, r19
    2846:	b0 0d       	add	r27, r0
    2848:	e1 1d       	adc	r30, r1
    284a:	f9 1f       	adc	r31, r25
    284c:	bd 01       	movw	r22, r26
    284e:	cf 01       	movw	r24, r30
    2850:	11 24       	eor	r1, r1
    2852:	08 95       	ret

00002854 <__udivmodsi4>:
    2854:	a1 e2       	ldi	r26, 0x21	; 33
    2856:	1a 2e       	mov	r1, r26
    2858:	aa 1b       	sub	r26, r26
    285a:	bb 1b       	sub	r27, r27
    285c:	fd 01       	movw	r30, r26
    285e:	0d c0       	rjmp	.+26     	; 0x287a <__udivmodsi4_ep>

00002860 <__udivmodsi4_loop>:
    2860:	aa 1f       	adc	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	ee 1f       	adc	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	a2 17       	cp	r26, r18
    286a:	b3 07       	cpc	r27, r19
    286c:	e4 07       	cpc	r30, r20
    286e:	f5 07       	cpc	r31, r21
    2870:	20 f0       	brcs	.+8      	; 0x287a <__udivmodsi4_ep>
    2872:	a2 1b       	sub	r26, r18
    2874:	b3 0b       	sbc	r27, r19
    2876:	e4 0b       	sbc	r30, r20
    2878:	f5 0b       	sbc	r31, r21

0000287a <__udivmodsi4_ep>:
    287a:	66 1f       	adc	r22, r22
    287c:	77 1f       	adc	r23, r23
    287e:	88 1f       	adc	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	1a 94       	dec	r1
    2884:	69 f7       	brne	.-38     	; 0x2860 <__udivmodsi4_loop>
    2886:	60 95       	com	r22
    2888:	70 95       	com	r23
    288a:	80 95       	com	r24
    288c:	90 95       	com	r25
    288e:	9b 01       	movw	r18, r22
    2890:	ac 01       	movw	r20, r24
    2892:	bd 01       	movw	r22, r26
    2894:	cf 01       	movw	r24, r30
    2896:	08 95       	ret

00002898 <__prologue_saves__>:
    2898:	2f 92       	push	r2
    289a:	3f 92       	push	r3
    289c:	4f 92       	push	r4
    289e:	5f 92       	push	r5
    28a0:	6f 92       	push	r6
    28a2:	7f 92       	push	r7
    28a4:	8f 92       	push	r8
    28a6:	9f 92       	push	r9
    28a8:	af 92       	push	r10
    28aa:	bf 92       	push	r11
    28ac:	cf 92       	push	r12
    28ae:	df 92       	push	r13
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	ca 1b       	sub	r28, r26
    28c2:	db 0b       	sbc	r29, r27
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	09 94       	ijmp

000028d0 <__epilogue_restores__>:
    28d0:	2a 88       	ldd	r2, Y+18	; 0x12
    28d2:	39 88       	ldd	r3, Y+17	; 0x11
    28d4:	48 88       	ldd	r4, Y+16	; 0x10
    28d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28da:	7d 84       	ldd	r7, Y+13	; 0x0d
    28dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28de:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e2:	b9 84       	ldd	r11, Y+9	; 0x09
    28e4:	c8 84       	ldd	r12, Y+8	; 0x08
    28e6:	df 80       	ldd	r13, Y+7	; 0x07
    28e8:	ee 80       	ldd	r14, Y+6	; 0x06
    28ea:	fd 80       	ldd	r15, Y+5	; 0x05
    28ec:	0c 81       	ldd	r16, Y+4	; 0x04
    28ee:	1b 81       	ldd	r17, Y+3	; 0x03
    28f0:	aa 81       	ldd	r26, Y+2	; 0x02
    28f2:	b9 81       	ldd	r27, Y+1	; 0x01
    28f4:	ce 0f       	add	r28, r30
    28f6:	d1 1d       	adc	r29, r1
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	ed 01       	movw	r28, r26
    2904:	08 95       	ret

00002906 <_exit>:
    2906:	f8 94       	cli

00002908 <__stop_program>:
    2908:	ff cf       	rjmp	.-2      	; 0x2908 <__stop_program>
